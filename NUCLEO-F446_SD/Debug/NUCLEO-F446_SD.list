
NUCLEO-F446_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008690  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e58  08008e58  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e60  08008e60  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c08  20000088  08008ef0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c90  08008ef0  00024c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147c3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ed  00000000  00000000  0003487b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00037a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00038840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247da  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b2b  00000000  00000000  0005dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd066  00000000  00000000  000717c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e82b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  0013e880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008848 	.word	0x08008848

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08008848 	.word	0x08008848

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96e 	b.w	8000bc0 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468c      	mov	ip, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f040 8083 	bne.w	8000a12 <__udivmoddi4+0x116>
 800090c:	428a      	cmp	r2, r1
 800090e:	4617      	mov	r7, r2
 8000910:	d947      	bls.n	80009a2 <__udivmoddi4+0xa6>
 8000912:	fab2 f282 	clz	r2, r2
 8000916:	b142      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000918:	f1c2 0020 	rsb	r0, r2, #32
 800091c:	fa24 f000 	lsr.w	r0, r4, r0
 8000920:	4091      	lsls	r1, r2
 8000922:	4097      	lsls	r7, r2
 8000924:	ea40 0c01 	orr.w	ip, r0, r1
 8000928:	4094      	lsls	r4, r2
 800092a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800092e:	0c23      	lsrs	r3, r4, #16
 8000930:	fbbc f6f8 	udiv	r6, ip, r8
 8000934:	fa1f fe87 	uxth.w	lr, r7
 8000938:	fb08 c116 	mls	r1, r8, r6, ip
 800093c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000940:	fb06 f10e 	mul.w	r1, r6, lr
 8000944:	4299      	cmp	r1, r3
 8000946:	d909      	bls.n	800095c <__udivmoddi4+0x60>
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	f106 30ff 	add.w	r0, r6, #4294967295
 800094e:	f080 8119 	bcs.w	8000b84 <__udivmoddi4+0x288>
 8000952:	4299      	cmp	r1, r3
 8000954:	f240 8116 	bls.w	8000b84 <__udivmoddi4+0x288>
 8000958:	3e02      	subs	r6, #2
 800095a:	443b      	add	r3, r7
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	b2a4      	uxth	r4, r4
 8000960:	fbb3 f0f8 	udiv	r0, r3, r8
 8000964:	fb08 3310 	mls	r3, r8, r0, r3
 8000968:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800096c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000970:	45a6      	cmp	lr, r4
 8000972:	d909      	bls.n	8000988 <__udivmoddi4+0x8c>
 8000974:	193c      	adds	r4, r7, r4
 8000976:	f100 33ff 	add.w	r3, r0, #4294967295
 800097a:	f080 8105 	bcs.w	8000b88 <__udivmoddi4+0x28c>
 800097e:	45a6      	cmp	lr, r4
 8000980:	f240 8102 	bls.w	8000b88 <__udivmoddi4+0x28c>
 8000984:	3802      	subs	r0, #2
 8000986:	443c      	add	r4, r7
 8000988:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800098c:	eba4 040e 	sub.w	r4, r4, lr
 8000990:	2600      	movs	r6, #0
 8000992:	b11d      	cbz	r5, 800099c <__udivmoddi4+0xa0>
 8000994:	40d4      	lsrs	r4, r2
 8000996:	2300      	movs	r3, #0
 8000998:	e9c5 4300 	strd	r4, r3, [r5]
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	b902      	cbnz	r2, 80009a6 <__udivmoddi4+0xaa>
 80009a4:	deff      	udf	#255	; 0xff
 80009a6:	fab2 f282 	clz	r2, r2
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d150      	bne.n	8000a50 <__udivmoddi4+0x154>
 80009ae:	1bcb      	subs	r3, r1, r7
 80009b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b4:	fa1f f887 	uxth.w	r8, r7
 80009b8:	2601      	movs	r6, #1
 80009ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80009be:	0c21      	lsrs	r1, r4, #16
 80009c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c8:	fb08 f30c 	mul.w	r3, r8, ip
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d907      	bls.n	80009e0 <__udivmoddi4+0xe4>
 80009d0:	1879      	adds	r1, r7, r1
 80009d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0xe2>
 80009d8:	428b      	cmp	r3, r1
 80009da:	f200 80e9 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 80009de:	4684      	mov	ip, r0
 80009e0:	1ac9      	subs	r1, r1, r3
 80009e2:	b2a3      	uxth	r3, r4
 80009e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009f0:	fb08 f800 	mul.w	r8, r8, r0
 80009f4:	45a0      	cmp	r8, r4
 80009f6:	d907      	bls.n	8000a08 <__udivmoddi4+0x10c>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x10a>
 8000a00:	45a0      	cmp	r8, r4
 8000a02:	f200 80d9 	bhi.w	8000bb8 <__udivmoddi4+0x2bc>
 8000a06:	4618      	mov	r0, r3
 8000a08:	eba4 0408 	sub.w	r4, r4, r8
 8000a0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a10:	e7bf      	b.n	8000992 <__udivmoddi4+0x96>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d909      	bls.n	8000a2a <__udivmoddi4+0x12e>
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	f000 80b1 	beq.w	8000b7e <__udivmoddi4+0x282>
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a22:	4630      	mov	r0, r6
 8000a24:	4631      	mov	r1, r6
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	fab3 f683 	clz	r6, r3
 8000a2e:	2e00      	cmp	r6, #0
 8000a30:	d14a      	bne.n	8000ac8 <__udivmoddi4+0x1cc>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d302      	bcc.n	8000a3c <__udivmoddi4+0x140>
 8000a36:	4282      	cmp	r2, r0
 8000a38:	f200 80b8 	bhi.w	8000bac <__udivmoddi4+0x2b0>
 8000a3c:	1a84      	subs	r4, r0, r2
 8000a3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a42:	2001      	movs	r0, #1
 8000a44:	468c      	mov	ip, r1
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0a8      	beq.n	800099c <__udivmoddi4+0xa0>
 8000a4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a4e:	e7a5      	b.n	800099c <__udivmoddi4+0xa0>
 8000a50:	f1c2 0320 	rsb	r3, r2, #32
 8000a54:	fa20 f603 	lsr.w	r6, r0, r3
 8000a58:	4097      	lsls	r7, r2
 8000a5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a62:	40d9      	lsrs	r1, r3
 8000a64:	4330      	orrs	r0, r6
 8000a66:	0c03      	lsrs	r3, r0, #16
 8000a68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a6c:	fa1f f887 	uxth.w	r8, r7
 8000a70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f108 	mul.w	r1, r6, r8
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x19c>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a8a:	f080 808d 	bcs.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 808a 	bls.w	8000ba8 <__udivmoddi4+0x2ac>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b281      	uxth	r1, r0
 8000a9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aa0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa8:	fb00 f308 	mul.w	r3, r0, r8
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d907      	bls.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ab0:	1879      	adds	r1, r7, r1
 8000ab2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ab6:	d273      	bcs.n	8000ba0 <__udivmoddi4+0x2a4>
 8000ab8:	428b      	cmp	r3, r1
 8000aba:	d971      	bls.n	8000ba0 <__udivmoddi4+0x2a4>
 8000abc:	3802      	subs	r0, #2
 8000abe:	4439      	add	r1, r7
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ac6:	e778      	b.n	80009ba <__udivmoddi4+0xbe>
 8000ac8:	f1c6 0c20 	rsb	ip, r6, #32
 8000acc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ad0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ad4:	431c      	orrs	r4, r3
 8000ad6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ada:	fa01 f306 	lsl.w	r3, r1, r6
 8000ade:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ae2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	0c3b      	lsrs	r3, r7, #16
 8000aea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aee:	fa1f f884 	uxth.w	r8, r4
 8000af2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000af6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000afa:	fb09 fa08 	mul.w	sl, r9, r8
 8000afe:	458a      	cmp	sl, r1
 8000b00:	fa02 f206 	lsl.w	r2, r2, r6
 8000b04:	fa00 f306 	lsl.w	r3, r0, r6
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x220>
 8000b0a:	1861      	adds	r1, r4, r1
 8000b0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b10:	d248      	bcs.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b12:	458a      	cmp	sl, r1
 8000b14:	d946      	bls.n	8000ba4 <__udivmoddi4+0x2a8>
 8000b16:	f1a9 0902 	sub.w	r9, r9, #2
 8000b1a:	4421      	add	r1, r4
 8000b1c:	eba1 010a 	sub.w	r1, r1, sl
 8000b20:	b2bf      	uxth	r7, r7
 8000b22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b2e:	fb00 f808 	mul.w	r8, r0, r8
 8000b32:	45b8      	cmp	r8, r7
 8000b34:	d907      	bls.n	8000b46 <__udivmoddi4+0x24a>
 8000b36:	19e7      	adds	r7, r4, r7
 8000b38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b3c:	d22e      	bcs.n	8000b9c <__udivmoddi4+0x2a0>
 8000b3e:	45b8      	cmp	r8, r7
 8000b40:	d92c      	bls.n	8000b9c <__udivmoddi4+0x2a0>
 8000b42:	3802      	subs	r0, #2
 8000b44:	4427      	add	r7, r4
 8000b46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b4a:	eba7 0708 	sub.w	r7, r7, r8
 8000b4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b52:	454f      	cmp	r7, r9
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4649      	mov	r1, r9
 8000b58:	d31a      	bcc.n	8000b90 <__udivmoddi4+0x294>
 8000b5a:	d017      	beq.n	8000b8c <__udivmoddi4+0x290>
 8000b5c:	b15d      	cbz	r5, 8000b76 <__udivmoddi4+0x27a>
 8000b5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b62:	eb67 0701 	sbc.w	r7, r7, r1
 8000b66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b6a:	40f2      	lsrs	r2, r6
 8000b6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b70:	40f7      	lsrs	r7, r6
 8000b72:	e9c5 2700 	strd	r2, r7, [r5]
 8000b76:	2600      	movs	r6, #0
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	462e      	mov	r6, r5
 8000b80:	4628      	mov	r0, r5
 8000b82:	e70b      	b.n	800099c <__udivmoddi4+0xa0>
 8000b84:	4606      	mov	r6, r0
 8000b86:	e6e9      	b.n	800095c <__udivmoddi4+0x60>
 8000b88:	4618      	mov	r0, r3
 8000b8a:	e6fd      	b.n	8000988 <__udivmoddi4+0x8c>
 8000b8c:	4543      	cmp	r3, r8
 8000b8e:	d2e5      	bcs.n	8000b5c <__udivmoddi4+0x260>
 8000b90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b94:	eb69 0104 	sbc.w	r1, r9, r4
 8000b98:	3801      	subs	r0, #1
 8000b9a:	e7df      	b.n	8000b5c <__udivmoddi4+0x260>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e7d2      	b.n	8000b46 <__udivmoddi4+0x24a>
 8000ba0:	4660      	mov	r0, ip
 8000ba2:	e78d      	b.n	8000ac0 <__udivmoddi4+0x1c4>
 8000ba4:	4681      	mov	r9, r0
 8000ba6:	e7b9      	b.n	8000b1c <__udivmoddi4+0x220>
 8000ba8:	4666      	mov	r6, ip
 8000baa:	e775      	b.n	8000a98 <__udivmoddi4+0x19c>
 8000bac:	4630      	mov	r0, r6
 8000bae:	e74a      	b.n	8000a46 <__udivmoddi4+0x14a>
 8000bb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb4:	4439      	add	r1, r7
 8000bb6:	e713      	b.n	80009e0 <__udivmoddi4+0xe4>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	443c      	add	r4, r7
 8000bbc:	e724      	b.n	8000a08 <__udivmoddi4+0x10c>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_idiv0>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <SELECT+0x14>)
 8000bd0:	f001 fc7a 	bl	80024c8 <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40020400 	.word	0x40020400

08000bdc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be6:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <DESELECT+0x14>)
 8000be8:	f001 fc6e 	bl	80024c8 <HAL_GPIO_WritePin>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000bfe:	bf00      	nop
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <SPI_TxByte+0x30>)
 8000c02:	f002 fd9c 	bl	800373e <HAL_SPI_GetState>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d1f9      	bne.n	8000c00 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000c0c:	1df9      	adds	r1, r7, #7
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <SPI_TxByte+0x30>)
 8000c16:	f002 fab4 	bl	8003182 <HAL_SPI_Transmit>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20002b6c 	.word	0x20002b6c

08000c28 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c2e:	23ff      	movs	r3, #255	; 0xff
 8000c30:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000c36:	bf00      	nop
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <SPI_RxByte+0x38>)
 8000c3a:	f002 fd80 	bl	800373e <HAL_SPI_GetState>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d1f9      	bne.n	8000c38 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000c44:	1dba      	adds	r2, r7, #6
 8000c46:	1df9      	adds	r1, r7, #7
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <SPI_RxByte+0x38>)
 8000c52:	f002 fbd2 	bl	80033fa <HAL_SPI_TransmitReceive>
  
  return data;
 8000c56:	79bb      	ldrb	r3, [r7, #6]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20002b6c 	.word	0x20002b6c

08000c64 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c6c:	f7ff ffdc 	bl	8000c28 <SPI_RxByte>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <SD_ReadyWait+0x34>)
 8000c88:	2232      	movs	r2, #50	; 0x32
 8000c8a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000c8c:	f7ff ffcc 	bl	8000c28 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000c90:	f7ff ffca 	bl	8000c28 <SPI_RxByte>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2bff      	cmp	r3, #255	; 0xff
 8000c9c:	d004      	beq.n	8000ca8 <SD_ReadyWait+0x28>
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SD_ReadyWait+0x34>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f3      	bne.n	8000c90 <SD_ReadyWait+0x10>
  
  return res;
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20002bc4 	.word	0x20002bc4

08000cb8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000cbe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cc2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000cc4:	f7ff ff8a 	bl	8000bdc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	e005      	b.n	8000cda <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	f7ff ff90 	bl	8000bf4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	2b09      	cmp	r3, #9
 8000cde:	ddf6      	ble.n	8000cce <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000ce0:	f7ff ff70 	bl	8000bc4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cf8:	2395      	movs	r3, #149	; 0x95
 8000cfa:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	e009      	b.n	8000d16 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000d02:	1d3a      	adds	r2, r7, #4
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff72 	bl	8000bf4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3301      	adds	r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2b05      	cmp	r3, #5
 8000d1a:	ddf2      	ble.n	8000d02 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000d1c:	e002      	b.n	8000d24 <SD_PowerOn+0x6c>
  {
    Count--;
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000d24:	f7ff ff80 	bl	8000c28 <SPI_RxByte>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d002      	beq.n	8000d34 <SD_PowerOn+0x7c>
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f4      	bne.n	8000d1e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000d34:	f7ff ff52 	bl	8000bdc <DESELECT>
  SPI_TxByte(0XFF);
 8000d38:	20ff      	movs	r0, #255	; 0xff
 8000d3a:	f7ff ff5b 	bl	8000bf4 <SPI_TxByte>
  
  PowerFlag = 1;
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SD_PowerOn+0x94>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000a5 	.word	0x200000a5

08000d50 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <SD_PowerOff+0x14>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	200000a5 	.word	0x200000a5

08000d68 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <SD_CheckPower+0x14>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000a5 	.word	0x200000a5

08000d80 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <SD_RxDataBlock+0x68>)
 8000d8c:	220a      	movs	r2, #10
 8000d8e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000d90:	f7ff ff4a 	bl	8000c28 <SPI_RxByte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d104      	bne.n	8000da8 <SD_RxDataBlock+0x28>
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <SD_RxDataBlock+0x68>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f3      	bne.n	8000d90 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2bfe      	cmp	r3, #254	; 0xfe
 8000dac:	d001      	beq.n	8000db2 <SD_RxDataBlock+0x32>
    return FALSE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e016      	b.n	8000de0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff53 	bl	8000c64 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff4d 	bl	8000c64 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1ed      	bne.n	8000db2 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000dd6:	f7ff ff27 	bl	8000c28 <SPI_RxByte>
  SPI_RxByte();
 8000dda:	f7ff ff25 	bl	8000c28 <SPI_RxByte>
  
  return TRUE;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20002bc5 	.word	0x20002bc5

08000dec <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dfc:	f7ff ff40 	bl	8000c80 <SD_ReadyWait>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2bff      	cmp	r3, #255	; 0xff
 8000e04:	d001      	beq.n	8000e0a <SD_TxDataBlock+0x1e>
    return FALSE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e040      	b.n	8000e8c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000e0a:	78fb      	ldrb	r3, [r7, #3]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fef1 	bl	8000bf4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	2bfd      	cmp	r3, #253	; 0xfd
 8000e16:	d031      	beq.n	8000e7c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fee5 	bl	8000bf4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fede 	bl	8000bf4 <SPI_TxByte>
    } while (--wc);
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	73bb      	strb	r3, [r7, #14]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1eb      	bne.n	8000e1c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000e44:	f7ff fef0 	bl	8000c28 <SPI_RxByte>
    SPI_RxByte();
 8000e48:	f7ff feee 	bl	8000c28 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000e4c:	e00b      	b.n	8000e66 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000e4e:	f7ff feeb 	bl	8000c28 <SPI_RxByte>
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d006      	beq.n	8000e6e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	3301      	adds	r3, #1
 8000e64:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000e66:	7b7b      	ldrb	r3, [r7, #13]
 8000e68:	2b40      	cmp	r3, #64	; 0x40
 8000e6a:	d9f0      	bls.n	8000e4e <SD_TxDataBlock+0x62>
 8000e6c:	e000      	b.n	8000e70 <SD_TxDataBlock+0x84>
        break;
 8000e6e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e70:	bf00      	nop
 8000e72:	f7ff fed9 	bl	8000c28 <SPI_RxByte>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0fa      	beq.n	8000e72 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d101      	bne.n	8000e8a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000ea0:	f7ff feee 	bl	8000c80 <SD_ReadyWait>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2bff      	cmp	r3, #255	; 0xff
 8000ea8:	d001      	beq.n	8000eae <SD_SendCmd+0x1a>
    return 0xFF;
 8000eaa:	23ff      	movs	r3, #255	; 0xff
 8000eac:	e040      	b.n	8000f30 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe9f 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fe99 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe93 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe8d 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fe88 	bl	8000bf4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b40      	cmp	r3, #64	; 0x40
 8000eec:	d101      	bne.n	8000ef2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000eee:	2395      	movs	r3, #149	; 0x95
 8000ef0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b48      	cmp	r3, #72	; 0x48
 8000ef6:	d101      	bne.n	8000efc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ef8:	2387      	movs	r3, #135	; 0x87
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fe78 	bl	8000bf4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b4c      	cmp	r3, #76	; 0x4c
 8000f08:	d101      	bne.n	8000f0e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000f0a:	f7ff fe8d 	bl	8000c28 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000f0e:	230a      	movs	r3, #10
 8000f10:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000f12:	f7ff fe89 	bl	8000c28 <SPI_RxByte>
 8000f16:	4603      	mov	r3, r0
 8000f18:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000f1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da05      	bge.n	8000f2e <SD_SendCmd+0x9a>
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	73bb      	strb	r3, [r7, #14]
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f1      	bne.n	8000f12 <SD_SendCmd+0x7e>
  
  return res;
 8000f2e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e0d5      	b.n	80010f8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f4c:	4b6c      	ldr	r3, [pc, #432]	; (8001100 <SD_disk_initialize+0x1c8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <SD_disk_initialize+0x2a>
    return Stat;        
 8000f5a:	4b69      	ldr	r3, [pc, #420]	; (8001100 <SD_disk_initialize+0x1c8>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	e0ca      	b.n	80010f8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8000f62:	f7ff fea9 	bl	8000cb8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000f66:	f7ff fe2d 	bl	8000bc4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2040      	movs	r0, #64	; 0x40
 8000f72:	f7ff ff8f 	bl	8000e94 <SD_SendCmd>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f040 80a5 	bne.w	80010c8 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f7e:	4b61      	ldr	r3, [pc, #388]	; (8001104 <SD_disk_initialize+0x1cc>)
 8000f80:	2264      	movs	r2, #100	; 0x64
 8000f82:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000f84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f88:	2048      	movs	r0, #72	; 0x48
 8000f8a:	f7ff ff83 	bl	8000e94 <SD_SendCmd>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d158      	bne.n	8001046 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e00c      	b.n	8000fb4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f9a:	7bfc      	ldrb	r4, [r7, #15]
 8000f9c:	f7ff fe44 	bl	8000c28 <SPI_RxByte>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4423      	add	r3, r4
 8000faa:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d9ef      	bls.n	8000f9a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000fba:	7abb      	ldrb	r3, [r7, #10]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f040 8083 	bne.w	80010c8 <SD_disk_initialize+0x190>
 8000fc2:	7afb      	ldrb	r3, [r7, #11]
 8000fc4:	2baa      	cmp	r3, #170	; 0xaa
 8000fc6:	d17f      	bne.n	80010c8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2077      	movs	r0, #119	; 0x77
 8000fcc:	f7ff ff62 	bl	8000e94 <SD_SendCmd>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d807      	bhi.n	8000fe6 <SD_disk_initialize+0xae>
 8000fd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fda:	2069      	movs	r0, #105	; 0x69
 8000fdc:	f7ff ff5a 	bl	8000e94 <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000fe6:	4b47      	ldr	r3, [pc, #284]	; (8001104 <SD_disk_initialize+0x1cc>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1eb      	bne.n	8000fc8 <SD_disk_initialize+0x90>
 8000ff0:	e000      	b.n	8000ff4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000ff2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000ff4:	4b43      	ldr	r3, [pc, #268]	; (8001104 <SD_disk_initialize+0x1cc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d064      	beq.n	80010c8 <SD_disk_initialize+0x190>
 8000ffe:	2100      	movs	r1, #0
 8001000:	207a      	movs	r0, #122	; 0x7a
 8001002:	f7ff ff47 	bl	8000e94 <SD_SendCmd>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d15d      	bne.n	80010c8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e00c      	b.n	800102c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001012:	7bfc      	ldrb	r4, [r7, #15]
 8001014:	f7ff fe08 	bl	8000c28 <SPI_RxByte>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4423      	add	r3, r4
 8001022:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d9ef      	bls.n	8001012 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001032:	7a3b      	ldrb	r3, [r7, #8]
 8001034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SD_disk_initialize+0x108>
 800103c:	2306      	movs	r3, #6
 800103e:	e000      	b.n	8001042 <SD_disk_initialize+0x10a>
 8001040:	2302      	movs	r3, #2
 8001042:	73bb      	strb	r3, [r7, #14]
 8001044:	e040      	b.n	80010c8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001046:	2100      	movs	r1, #0
 8001048:	2077      	movs	r0, #119	; 0x77
 800104a:	f7ff ff23 	bl	8000e94 <SD_SendCmd>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d808      	bhi.n	8001066 <SD_disk_initialize+0x12e>
 8001054:	2100      	movs	r1, #0
 8001056:	2069      	movs	r0, #105	; 0x69
 8001058:	f7ff ff1c 	bl	8000e94 <SD_SendCmd>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d801      	bhi.n	8001066 <SD_disk_initialize+0x12e>
 8001062:	2302      	movs	r3, #2
 8001064:	e000      	b.n	8001068 <SD_disk_initialize+0x130>
 8001066:	2301      	movs	r3, #1
 8001068:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d10e      	bne.n	800108e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001070:	2100      	movs	r1, #0
 8001072:	2077      	movs	r0, #119	; 0x77
 8001074:	f7ff ff0e 	bl	8000e94 <SD_SendCmd>
 8001078:	4603      	mov	r3, r0
 800107a:	2b01      	cmp	r3, #1
 800107c:	d80e      	bhi.n	800109c <SD_disk_initialize+0x164>
 800107e:	2100      	movs	r1, #0
 8001080:	2069      	movs	r0, #105	; 0x69
 8001082:	f7ff ff07 	bl	8000e94 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800108c:	e00d      	b.n	80010aa <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800108e:	2100      	movs	r1, #0
 8001090:	2041      	movs	r0, #65	; 0x41
 8001092:	f7ff feff 	bl	8000e94 <SD_SendCmd>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <SD_disk_initialize+0x1cc>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e1      	bne.n	800106a <SD_disk_initialize+0x132>
 80010a6:	e000      	b.n	80010aa <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80010a8:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <SD_disk_initialize+0x1cc>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <SD_disk_initialize+0x18c>
 80010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b8:	2050      	movs	r0, #80	; 0x50
 80010ba:	f7ff feeb 	bl	8000e94 <SD_SendCmd>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80010c8:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <SD_disk_initialize+0x1d0>)
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80010ce:	f7ff fd85 	bl	8000bdc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80010d2:	f7ff fda9 	bl	8000c28 <SPI_RxByte>
  
  if (type) 
 80010d6:	7bbb      	ldrb	r3, [r7, #14]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <SD_disk_initialize+0x1c8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f023 0301 	bic.w	r3, r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SD_disk_initialize+0x1c8>)
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e001      	b.n	80010f2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010ee:	f7ff fe2f 	bl	8000d50 <SD_PowerOff>
  }
  
  return Stat;
 80010f2:	4b03      	ldr	r3, [pc, #12]	; (8001100 <SD_disk_initialize+0x1c8>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20002bc5 	.word	0x20002bc5
 8001108:	200000a4 	.word	0x200000a4

0800110c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SD_disk_status+0x14>
    return STA_NOINIT; 
 800111c:	2301      	movs	r3, #1
 800111e:	e002      	b.n	8001126 <SD_disk_status+0x1a>
  
  return Stat;
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SD_disk_status+0x28>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000

08001138 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <SD_disk_read+0x1c>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <SD_disk_read+0x20>
    return RES_PARERR;
 8001154:	2304      	movs	r3, #4
 8001156:	e051      	b.n	80011fc <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <SD_disk_read+0xcc>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001166:	2303      	movs	r3, #3
 8001168:	e048      	b.n	80011fc <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <SD_disk_read+0xd0>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800117c:	f7ff fd22 	bl	8000bc4 <SELECT>
  
  if (count == 1) 
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d111      	bne.n	80011aa <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2051      	movs	r0, #81	; 0x51
 800118a:	f7ff fe83 	bl	8000e94 <SD_SendCmd>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d129      	bne.n	80011e8 <SD_disk_read+0xb0>
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f7ff fdf1 	bl	8000d80 <SD_RxDataBlock>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d021      	beq.n	80011e8 <SD_disk_read+0xb0>
      count = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	e01e      	b.n	80011e8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2052      	movs	r0, #82	; 0x52
 80011ae:	f7ff fe71 	bl	8000e94 <SD_SendCmd>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d117      	bne.n	80011e8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80011b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011bc:	68b8      	ldr	r0, [r7, #8]
 80011be:	f7ff fddf 	bl	8000d80 <SD_RxDataBlock>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00a      	beq.n	80011de <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011ce:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1ed      	bne.n	80011b8 <SD_disk_read+0x80>
 80011dc:	e000      	b.n	80011e0 <SD_disk_read+0xa8>
          break;
 80011de:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80011e0:	2100      	movs	r1, #0
 80011e2:	204c      	movs	r0, #76	; 0x4c
 80011e4:	f7ff fe56 	bl	8000e94 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80011e8:	f7ff fcf8 	bl	8000bdc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011ec:	f7ff fd1c 	bl	8000c28 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	200000a4 	.word	0x200000a4

0800120c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <SD_disk_write+0x1c>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <SD_disk_write+0x20>
    return RES_PARERR;
 8001228:	2304      	movs	r3, #4
 800122a:	e06b      	b.n	8001304 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <SD_disk_write+0x100>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800123a:	2303      	movs	r3, #3
 800123c:	e062      	b.n	8001304 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <SD_disk_write+0x100>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SD_disk_write+0x44>
    return RES_WRPRT;
 800124c:	2302      	movs	r3, #2
 800124e:	e059      	b.n	8001304 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <SD_disk_write+0x104>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d102      	bne.n	8001262 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	025b      	lsls	r3, r3, #9
 8001260:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001262:	f7ff fcaf 	bl	8000bc4 <SELECT>
  
  if (count == 1) 
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d110      	bne.n	800128e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	2058      	movs	r0, #88	; 0x58
 8001270:	f7ff fe10 	bl	8000e94 <SD_SendCmd>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d13a      	bne.n	80012f0 <SD_disk_write+0xe4>
 800127a:	21fe      	movs	r1, #254	; 0xfe
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f7ff fdb5 	bl	8000dec <SD_TxDataBlock>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d033      	beq.n	80012f0 <SD_disk_write+0xe4>
      count = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	e030      	b.n	80012f0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <SD_disk_write+0x104>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800129a:	2100      	movs	r1, #0
 800129c:	2077      	movs	r0, #119	; 0x77
 800129e:	f7ff fdf9 	bl	8000e94 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	2057      	movs	r0, #87	; 0x57
 80012a6:	f7ff fdf5 	bl	8000e94 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	2059      	movs	r0, #89	; 0x59
 80012ae:	f7ff fdf1 	bl	8000e94 <SD_SendCmd>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11b      	bne.n	80012f0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80012b8:	21fc      	movs	r1, #252	; 0xfc
 80012ba:	68b8      	ldr	r0, [r7, #8]
 80012bc:	f7ff fd96 	bl	8000dec <SD_TxDataBlock>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012cc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ee      	bne.n	80012b8 <SD_disk_write+0xac>
 80012da:	e000      	b.n	80012de <SD_disk_write+0xd2>
          break;
 80012dc:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80012de:	21fd      	movs	r1, #253	; 0xfd
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fd83 	bl	8000dec <SD_TxDataBlock>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <SD_disk_write+0xe4>
      {        
        count = 1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80012f0:	f7ff fc74 	bl	8000bdc <DESELECT>
  SPI_RxByte();
 80012f4:	f7ff fc98 	bl	8000c28 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
}
 8001304:	4618      	mov	r0, r3
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000000 	.word	0x20000000
 8001310:	200000a4 	.word	0x200000a4

08001314 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b08b      	sub	sp, #44	; 0x2c
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800132e:	2304      	movs	r3, #4
 8001330:	e11b      	b.n	800156a <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b05      	cmp	r3, #5
 800133c:	d129      	bne.n	8001392 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d017      	beq.n	8001376 <SD_disk_ioctl+0x62>
 8001346:	2b02      	cmp	r3, #2
 8001348:	dc1f      	bgt.n	800138a <SD_disk_ioctl+0x76>
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <SD_disk_ioctl+0x40>
 800134e:	2b01      	cmp	r3, #1
 8001350:	d00b      	beq.n	800136a <SD_disk_ioctl+0x56>
 8001352:	e01a      	b.n	800138a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001354:	f7ff fd08 	bl	8000d68 <SD_CheckPower>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800135e:	f7ff fcf7 	bl	8000d50 <SD_PowerOff>
      res = RES_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001368:	e0fd      	b.n	8001566 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800136a:	f7ff fca5 	bl	8000cb8 <SD_PowerOn>
      res = RES_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001374:	e0f7      	b.n	8001566 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	1c5c      	adds	r4, r3, #1
 800137a:	f7ff fcf5 	bl	8000d68 <SD_CheckPower>
 800137e:	4603      	mov	r3, r0
 8001380:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001382:	2300      	movs	r3, #0
 8001384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001388:	e0ed      	b.n	8001566 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800138a:	2304      	movs	r3, #4
 800138c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001390:	e0e9      	b.n	8001566 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <SD_disk_ioctl+0x260>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0e2      	b.n	800156a <SD_disk_ioctl+0x256>
    
    SELECT();
 80013a4:	f7ff fc0e 	bl	8000bc4 <SELECT>
    
    switch (ctrl) 
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	2b0d      	cmp	r3, #13
 80013ac:	f200 80cc 	bhi.w	8001548 <SD_disk_ioctl+0x234>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <SD_disk_ioctl+0xa4>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080014b3 	.word	0x080014b3
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080014a3 	.word	0x080014a3
 80013c4:	08001549 	.word	0x08001549
 80013c8:	08001549 	.word	0x08001549
 80013cc:	08001549 	.word	0x08001549
 80013d0:	08001549 	.word	0x08001549
 80013d4:	08001549 	.word	0x08001549
 80013d8:	08001549 	.word	0x08001549
 80013dc:	08001549 	.word	0x08001549
 80013e0:	08001549 	.word	0x08001549
 80013e4:	080014c5 	.word	0x080014c5
 80013e8:	080014e9 	.word	0x080014e9
 80013ec:	0800150d 	.word	0x0800150d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80013f0:	2100      	movs	r1, #0
 80013f2:	2049      	movs	r0, #73	; 0x49
 80013f4:	f7ff fd4e 	bl	8000e94 <SD_SendCmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 80a8 	bne.w	8001550 <SD_disk_ioctl+0x23c>
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	2110      	movs	r1, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fcba 	bl	8000d80 <SD_RxDataBlock>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 809e 	beq.w	8001550 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001414:	7b3b      	ldrb	r3, [r7, #12]
 8001416:	099b      	lsrs	r3, r3, #6
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10e      	bne.n	800143c <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800141e:	7d7b      	ldrb	r3, [r7, #21]
 8001420:	b29a      	uxth	r2, r3
 8001422:	7d3b      	ldrb	r3, [r7, #20]
 8001424:	b29b      	uxth	r3, r3
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	b29b      	uxth	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001432:	8bfb      	ldrh	r3, [r7, #30]
 8001434:	029a      	lsls	r2, r3, #10
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e02e      	b.n	800149a <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800143c:	7c7b      	ldrb	r3, [r7, #17]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	b2da      	uxtb	r2, r3
 8001444:	7dbb      	ldrb	r3, [r7, #22]
 8001446:	09db      	lsrs	r3, r3, #7
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b2da      	uxtb	r2, r3
 800144e:	7d7b      	ldrb	r3, [r7, #21]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f003 0306 	and.w	r3, r3, #6
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3302      	adds	r3, #2
 8001460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001464:	7d3b      	ldrb	r3, [r7, #20]
 8001466:	099b      	lsrs	r3, r3, #6
 8001468:	b2db      	uxtb	r3, r3
 800146a:	b29a      	uxth	r2, r3
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	b29b      	uxth	r3, r3
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	b29b      	uxth	r3, r3
 8001474:	4413      	add	r3, r2
 8001476:	b29a      	uxth	r2, r3
 8001478:	7cbb      	ldrb	r3, [r7, #18]
 800147a:	029b      	lsls	r3, r3, #10
 800147c:	b29b      	uxth	r3, r3
 800147e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001482:	b29b      	uxth	r3, r3
 8001484:	4413      	add	r3, r2
 8001486:	b29b      	uxth	r3, r3
 8001488:	3301      	adds	r3, #1
 800148a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800148c:	8bfa      	ldrh	r2, [r7, #30]
 800148e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001492:	3b09      	subs	r3, #9
 8001494:	409a      	lsls	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80014a0:	e056      	b.n	8001550 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b0:	e055      	b.n	800155e <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80014b2:	f7ff fbe5 	bl	8000c80 <SD_ReadyWait>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2bff      	cmp	r3, #255	; 0xff
 80014ba:	d14b      	bne.n	8001554 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014c2:	e047      	b.n	8001554 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014c4:	2100      	movs	r1, #0
 80014c6:	2049      	movs	r0, #73	; 0x49
 80014c8:	f7ff fce4 	bl	8000e94 <SD_SendCmd>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d142      	bne.n	8001558 <SD_disk_ioctl+0x244>
 80014d2:	2110      	movs	r1, #16
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f7ff fc53 	bl	8000d80 <SD_RxDataBlock>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d03b      	beq.n	8001558 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014e6:	e037      	b.n	8001558 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014e8:	2100      	movs	r1, #0
 80014ea:	204a      	movs	r0, #74	; 0x4a
 80014ec:	f7ff fcd2 	bl	8000e94 <SD_SendCmd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d132      	bne.n	800155c <SD_disk_ioctl+0x248>
 80014f6:	2110      	movs	r1, #16
 80014f8:	6a38      	ldr	r0, [r7, #32]
 80014fa:	f7ff fc41 	bl	8000d80 <SD_RxDataBlock>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02b      	beq.n	800155c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800150a:	e027      	b.n	800155c <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800150c:	2100      	movs	r1, #0
 800150e:	207a      	movs	r0, #122	; 0x7a
 8001510:	f7ff fcc0 	bl	8000e94 <SD_SendCmd>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001520:	e00b      	b.n	800153a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8001522:	6a3c      	ldr	r4, [r7, #32]
 8001524:	1c63      	adds	r3, r4, #1
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	f7ff fb7e 	bl	8000c28 <SPI_RxByte>
 800152c:	4603      	mov	r3, r0
 800152e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001534:	3301      	adds	r3, #1
 8001536:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800153a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800153e:	2b03      	cmp	r3, #3
 8001540:	d9ef      	bls.n	8001522 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001548:	2304      	movs	r3, #4
 800154a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800154e:	e006      	b.n	800155e <SD_disk_ioctl+0x24a>
      break;
 8001550:	bf00      	nop
 8001552:	e004      	b.n	800155e <SD_disk_ioctl+0x24a>
      break;
 8001554:	bf00      	nop
 8001556:	e002      	b.n	800155e <SD_disk_ioctl+0x24a>
      break;
 8001558:	bf00      	nop
 800155a:	e000      	b.n	800155e <SD_disk_ioctl+0x24a>
      break;
 800155c:	bf00      	nop
    }
    
    DESELECT();
 800155e:	f7ff fb3d 	bl	8000bdc <DESELECT>
    SPI_RxByte();
 8001562:	f7ff fb61 	bl	8000c28 <SPI_RxByte>
  }
  
  return res;
 8001566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800156a:	4618      	mov	r0, r3
 800156c:	372c      	adds	r7, #44	; 0x2c
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000

08001578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <MX_GPIO_Init+0xd4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a2d      	ldr	r2, [pc, #180]	; (800164c <MX_GPIO_Init+0xd4>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <MX_GPIO_Init+0xd4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <MX_GPIO_Init+0xd4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <MX_GPIO_Init+0xd4>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <MX_GPIO_Init+0xd4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_GPIO_Init+0xd4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a1f      	ldr	r2, [pc, #124]	; (800164c <MX_GPIO_Init+0xd4>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_GPIO_Init+0xd4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <MX_GPIO_Init+0xd4>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_GPIO_Init+0xd4>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_GPIO_Init+0xd4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0xd8>)
 8001606:	f000 ff5f 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_GPIO_Init+0xdc>)
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_GPIO_Init+0xe0>)
 8001620:	f000 fdbe 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xd8>)
 800163e:	f000 fdaf 	bl	80021a0 <HAL_GPIO_Init>

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400
 8001654:	10210000 	.word	0x10210000
 8001658:	40020800 	.word	0x40020800

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165e:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f000 fc44 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f954 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f7ff ff84 	bl	8001578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001670:	f000 fba2 	bl	8001db8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001674:	f002 fb52 	bl	8003d1c <MX_FATFS_Init>
  MX_SPI2_Init();
 8001678:	f000 f9f8 	bl	8001a6c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  /* Mount SD Card */
  	fresult = f_mount(&fs, "", 0);
 800167c:	2200      	movs	r2, #0
 800167e:	498e      	ldr	r1, [pc, #568]	; (80018b8 <main+0x25c>)
 8001680:	488e      	ldr	r0, [pc, #568]	; (80018bc <main+0x260>)
 8001682:	f004 fef1 	bl	8006468 <f_mount>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b8d      	ldr	r3, [pc, #564]	; (80018c0 <main+0x264>)
 800168c:	701a      	strb	r2, [r3, #0]
  	//else
  		//send_uart("SD CARD mounted successfully...\n");

  	/*************** Card capacity details ********************/
  	/* Check free space */
  	f_getfree("", &fre_clust, &pfs);
 800168e:	4a8d      	ldr	r2, [pc, #564]	; (80018c4 <main+0x268>)
 8001690:	498d      	ldr	r1, [pc, #564]	; (80018c8 <main+0x26c>)
 8001692:	4889      	ldr	r0, [pc, #548]	; (80018b8 <main+0x25c>)
 8001694:	f005 feb9 	bl	800740a <f_getfree>
  	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001698:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <main+0x268>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	3b02      	subs	r3, #2
 80016a0:	4a88      	ldr	r2, [pc, #544]	; (80018c4 <main+0x268>)
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	8952      	ldrh	r2, [r2, #10]
 80016a6:	fb02 f303 	mul.w	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f874 	bl	8000798 <__aeabi_ui2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b85      	ldr	r3, [pc, #532]	; (80018cc <main+0x270>)
 80016b6:	f7fe fe03 	bl	80002c0 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f8e3 	bl	800088c <__aeabi_d2uiz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a81      	ldr	r2, [pc, #516]	; (80018d0 <main+0x274>)
 80016ca:	6013      	str	r3, [r2, #0]
  	if (total < 32000000) {
 80016cc:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <main+0x274>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a80      	ldr	r2, [pc, #512]	; (80018d4 <main+0x278>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d228      	bcs.n	8001728 <main+0xcc>
  		sprintf(buffer, "SD CARD Total Size: \t%lu\n", total);
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <main+0x274>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	497e      	ldr	r1, [pc, #504]	; (80018d8 <main+0x27c>)
 80016de:	487f      	ldr	r0, [pc, #508]	; (80018dc <main+0x280>)
 80016e0:	f006 fca8 	bl	8008034 <siprintf>
  		//send_uart(buffer);
  		bufclear();
 80016e4:	f000 f9a0 	bl	8001a28 <bufclear>
  		free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <main+0x268>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	895b      	ldrh	r3, [r3, #10]
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <main+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fb03 f302 	mul.w	r3, r3, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f84d 	bl	8000798 <__aeabi_ui2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <main+0x270>)
 8001704:	f7fe fddc 	bl	80002c0 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff f8bc 	bl	800088c <__aeabi_d2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	4a72      	ldr	r2, [pc, #456]	; (80018e0 <main+0x284>)
 8001718:	6013      	str	r3, [r2, #0]
  		sprintf(buffer, "SD CARD Free Space: \t%lu\n", free_space);
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <main+0x284>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4970      	ldr	r1, [pc, #448]	; (80018e4 <main+0x288>)
 8001722:	486e      	ldr	r0, [pc, #440]	; (80018dc <main+0x280>)
 8001724:	f006 fc86 	bl	8008034 <siprintf>
  	}

  	/************* The following operation is using PUTS and GETS *********************/

  	/* Open file to write/ create a file if it doesn't exist */
  	strcpy(To_Open,"file1.txt");
 8001728:	4a6f      	ldr	r2, [pc, #444]	; (80018e8 <main+0x28c>)
 800172a:	4b70      	ldr	r3, [pc, #448]	; (80018ec <main+0x290>)
 800172c:	cb03      	ldmia	r3!, {r0, r1}
 800172e:	6010      	str	r0, [r2, #0]
 8001730:	6051      	str	r1, [r2, #4]
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	8113      	strh	r3, [r2, #8]
  	if( f_open(&fil, To_Open, FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK ) {
 8001736:	2213      	movs	r2, #19
 8001738:	496b      	ldr	r1, [pc, #428]	; (80018e8 <main+0x28c>)
 800173a:	486d      	ldr	r0, [pc, #436]	; (80018f0 <main+0x294>)
 800173c:	f004 feda 	bl	80064f4 <f_open>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d024      	beq.n	8001790 <main+0x134>
  		char error [1024];
  		strcpy(error,"ERROR: can't open ");
 8001746:	463b      	mov	r3, r7
 8001748:	4a6a      	ldr	r2, [pc, #424]	; (80018f4 <main+0x298>)
 800174a:	461c      	mov	r4, r3
 800174c:	4615      	mov	r5, r2
 800174e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	8022      	strh	r2, [r4, #0]
 8001758:	3402      	adds	r4, #2
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	7023      	strb	r3, [r4, #0]
  		strcat(error, To_Open);
 800175e:	463b      	mov	r3, r7
 8001760:	4961      	ldr	r1, [pc, #388]	; (80018e8 <main+0x28c>)
 8001762:	4618      	mov	r0, r3
 8001764:	f006 fcc9 	bl	80080fa <strcat>
  		strcat(error, "\n\n");
 8001768:	463b      	mov	r3, r7
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fd50 	bl	8000210 <strlen>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	463b      	mov	r3, r7
 8001776:	4413      	add	r3, r2
 8001778:	4a5f      	ldr	r2, [pc, #380]	; (80018f8 <main+0x29c>)
 800177a:	8811      	ldrh	r1, [r2, #0]
 800177c:	7892      	ldrb	r2, [r2, #2]
 800177e:	8019      	strh	r1, [r3, #0]
 8001780:	709a      	strb	r2, [r3, #2]
  		//send_uart(error);
  	}

  	/* Read string from the file */
  		while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001782:	e005      	b.n	8001790 <main+0x134>
  			/* SWV output */
  		//	send_uart(buffer);
  			fflush(stdout);
 8001784:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <main+0x2a0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4618      	mov	r0, r3
 800178c:	f006 fa60 	bl	8007c50 <fflush>
  		while (f_gets(buffer, sizeof(buffer), &fil)) {
 8001790:	4a57      	ldr	r2, [pc, #348]	; (80018f0 <main+0x294>)
 8001792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001796:	4851      	ldr	r0, [pc, #324]	; (80018dc <main+0x280>)
 8001798:	f005 ff97 	bl	80076ca <f_gets>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <main+0x128>
  		}

  	/* Writing text */
  	fresult = f_lseek(&fil, fil.fptr);
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <main+0x294>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4851      	ldr	r0, [pc, #324]	; (80018f0 <main+0x294>)
 80017aa:	f005 fc0a 	bl	8006fc2 <f_lseek>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <main+0x264>)
 80017b4:	701a      	strb	r2, [r3, #0]
  	fresult = f_puts("Hello World!\n", &fil);
 80017b6:	494e      	ldr	r1, [pc, #312]	; (80018f0 <main+0x294>)
 80017b8:	4851      	ldr	r0, [pc, #324]	; (8001900 <main+0x2a4>)
 80017ba:	f006 f83a 	bl	8007832 <f_puts>
 80017be:	4603      	mov	r3, r0
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b3f      	ldr	r3, [pc, #252]	; (80018c0 <main+0x264>)
 80017c4:	701a      	strb	r2, [r3, #0]

  	/* Close file */
  	f_close(&fil);
 80017c6:	484a      	ldr	r0, [pc, #296]	; (80018f0 <main+0x294>)
 80017c8:	f005 fbd1 	bl	8006f6e <f_close>

  	bufclear();
 80017cc:	f000 f92c 	bl	8001a28 <bufclear>

  	/**************** The following operation is using f_write and f_read **************************/

  	/* Create second file with read write access and open it */
  	fresult = f_open(&fil, "file2.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017d0:	2213      	movs	r2, #19
 80017d2:	494c      	ldr	r1, [pc, #304]	; (8001904 <main+0x2a8>)
 80017d4:	4846      	ldr	r0, [pc, #280]	; (80018f0 <main+0x294>)
 80017d6:	f004 fe8d 	bl	80064f4 <f_open>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <main+0x264>)
 80017e0:	701a      	strb	r2, [r3, #0]

  	/* Writing text */
  	strcpy(buffer, "This is File 2 and it says Hello from controllerstech\n");
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <main+0x280>)
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <main+0x2ac>)
 80017e6:	4614      	mov	r4, r2
 80017e8:	469c      	mov	ip, r3
 80017ea:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80017ee:	4665      	mov	r5, ip
 80017f0:	4626      	mov	r6, r4
 80017f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80017f4:	6028      	str	r0, [r5, #0]
 80017f6:	6069      	str	r1, [r5, #4]
 80017f8:	60aa      	str	r2, [r5, #8]
 80017fa:	60eb      	str	r3, [r5, #12]
 80017fc:	3410      	adds	r4, #16
 80017fe:	f10c 0c10 	add.w	ip, ip, #16
 8001802:	4574      	cmp	r4, lr
 8001804:	d1f3      	bne.n	80017ee <main+0x192>
 8001806:	4663      	mov	r3, ip
 8001808:	4622      	mov	r2, r4
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	6018      	str	r0, [r3, #0]
 800180e:	8891      	ldrh	r1, [r2, #4]
 8001810:	7992      	ldrb	r2, [r2, #6]
 8001812:	8099      	strh	r1, [r3, #4]
 8001814:	719a      	strb	r2, [r3, #6]
  	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001816:	4831      	ldr	r0, [pc, #196]	; (80018dc <main+0x280>)
 8001818:	f000 f8ee 	bl	80019f8 <bufsize>
 800181c:	4603      	mov	r3, r0
 800181e:	461a      	mov	r2, r3
 8001820:	4b3a      	ldr	r3, [pc, #232]	; (800190c <main+0x2b0>)
 8001822:	492e      	ldr	r1, [pc, #184]	; (80018dc <main+0x280>)
 8001824:	4832      	ldr	r0, [pc, #200]	; (80018f0 <main+0x294>)
 8001826:	f005 f990 	bl	8006b4a <f_write>
 800182a:	4603      	mov	r3, r0
 800182c:	461a      	mov	r2, r3
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <main+0x264>)
 8001830:	701a      	strb	r2, [r3, #0]

  	//send_uart("File2.txt created and data is written\n");

  	/* Close file */
  	f_close(&fil);
 8001832:	482f      	ldr	r0, [pc, #188]	; (80018f0 <main+0x294>)
 8001834:	f005 fb9b 	bl	8006f6e <f_close>

  	// clearing buffer to show that result obtained is from the file
  	bufclear();
 8001838:	f000 f8f6 	bl	8001a28 <bufclear>

  	/* Open second file to read */
  	fresult = f_open(&fil, "file2.txt", FA_READ);
 800183c:	2201      	movs	r2, #1
 800183e:	4931      	ldr	r1, [pc, #196]	; (8001904 <main+0x2a8>)
 8001840:	482b      	ldr	r0, [pc, #172]	; (80018f0 <main+0x294>)
 8001842:	f004 fe57 	bl	80064f4 <f_open>
 8001846:	4603      	mov	r3, r0
 8001848:	461a      	mov	r2, r3
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <main+0x264>)
 800184c:	701a      	strb	r2, [r3, #0]

  	/* Read data from the file
  	 * Please see the function details for the arguments */
  	while (f_gets(buffer, sizeof(buffer), &fil)) {
 800184e:	e005      	b.n	800185c <main+0x200>
  		/* SWV output */
  	//	send_uart(buffer);
  		fflush(stdout);
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <main+0x2a0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4618      	mov	r0, r3
 8001858:	f006 f9fa 	bl	8007c50 <fflush>
  	while (f_gets(buffer, sizeof(buffer), &fil)) {
 800185c:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <main+0x294>)
 800185e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001862:	481e      	ldr	r0, [pc, #120]	; (80018dc <main+0x280>)
 8001864:	f005 ff31 	bl	80076ca <f_gets>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <main+0x1f4>
  	}

  	/* Close file */
  	f_close(&fil);
 800186e:	4820      	ldr	r0, [pc, #128]	; (80018f0 <main+0x294>)
 8001870:	f005 fb7d 	bl	8006f6e <f_close>
  	bufclear();
 8001874:	f000 f8d8 	bl	8001a28 <bufclear>

  	/************************REMOVING FILES FROM THE DIRECTORY ****************************/
  	fresult = f_unlink("/file1.txt");
 8001878:	4825      	ldr	r0, [pc, #148]	; (8001910 <main+0x2b4>)
 800187a:	f005 fe7b 	bl	8007574 <f_unlink>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <main+0x264>)
 8001884:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)// send_uart("file1.txt removed successfully...\n");
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <main+0x264>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <main+0x244>

  	/* Unmount SDCARD */
  	fresult = f_mount(NULL, "", 1);
 800188e:	2201      	movs	r2, #1
 8001890:	4909      	ldr	r1, [pc, #36]	; (80018b8 <main+0x25c>)
 8001892:	2000      	movs	r0, #0
 8001894:	f004 fde8 	bl	8006468 <f_mount>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <main+0x264>)
 800189e:	701a      	strb	r2, [r3, #0]
  	if (fresult == FR_OK)
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <main+0x264>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d100      	bne.n	80018aa <main+0x24e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <main+0x24c>
 80018aa:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	f207 4704 	addw	r7, r7, #1028	; 0x404
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08008860 	.word	0x08008860
 80018bc:	200002ec 	.word	0x200002ec
 80018c0:	20001b34 	.word	0x20001b34
 80018c4:	20001b30 	.word	0x20001b30
 80018c8:	200002e8 	.word	0x200002e8
 80018cc:	3fe00000 	.word	0x3fe00000
 80018d0:	20001b38 	.word	0x20001b38
 80018d4:	01e84800 	.word	0x01e84800
 80018d8:	08008864 	.word	0x08008864
 80018dc:	2000172c 	.word	0x2000172c
 80018e0:	20001728 	.word	0x20001728
 80018e4:	08008880 	.word	0x08008880
 80018e8:	20001328 	.word	0x20001328
 80018ec:	0800889c 	.word	0x0800889c
 80018f0:	20001b3c 	.word	0x20001b3c
 80018f4:	080088a8 	.word	0x080088a8
 80018f8:	080088bc 	.word	0x080088bc
 80018fc:	20000024 	.word	0x20000024
 8001900:	080088c0 	.word	0x080088c0
 8001904:	080088d0 	.word	0x080088d0
 8001908:	080088dc 	.word	0x080088dc
 800190c:	20001b2c 	.word	0x20001b2c
 8001910:	08008914 	.word	0x08008914

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2234      	movs	r2, #52	; 0x34
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fac3 	bl	8007eae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <SystemClock_Config+0xdc>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <SystemClock_Config+0xdc>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <SystemClock_Config+0xdc>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <SystemClock_Config+0xe0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <SystemClock_Config+0xe0>)
 800195e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <SystemClock_Config+0xe0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001970:	2302      	movs	r3, #2
 8001972:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001978:	2310      	movs	r3, #16
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001980:	2300      	movs	r3, #0
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001984:	2308      	movs	r3, #8
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001988:	23b4      	movs	r3, #180	; 0xb4
 800198a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001990:	2302      	movs	r3, #2
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001994:	2302      	movs	r3, #2
 8001996:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4618      	mov	r0, r3
 800199e:	f001 f8c9 	bl	8002b34 <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019a8:	f000 f85a 	bl	8001a60 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019ac:	f000 fda6 	bl	80024fc <HAL_PWREx_EnableOverDrive>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019b6:	f000 f853 	bl	8001a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ba:	230f      	movs	r3, #15
 80019bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019be:	2302      	movs	r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2105      	movs	r1, #5
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fddf 	bl	800259c <HAL_RCC_ClockConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019e4:	f000 f83c 	bl	8001a60 <Error_Handler>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <bufsize>:

/* USER CODE BEGIN 4 */
/* to find the size of data in the buffer */
int bufsize(char *buf) {
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	int i = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8001a04:	e002      	b.n	8001a0c <bufsize+0x14>
		i++;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0')
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f6      	bne.n	8001a06 <bufsize+0xe>
	return i;
 8001a18:	68fb      	ldr	r3, [r7, #12]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <bufclear>:

/*Clear the buffer*/
void bufclear(void)  {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	e007      	b.n	8001a44 <bufclear+0x1c>
		buffer[i] = '\0';
 8001a34:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <bufclear+0x34>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++) {
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4a:	dbf3      	blt.n	8001a34 <bufclear+0xc>
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000172c 	.word	0x2000172c

08001a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a64:	b672      	cpsid	i
}
 8001a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <Error_Handler+0x8>
	...

08001a6c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <MX_SPI2_Init+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001ab8:	220a      	movs	r2, #10
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_SPI2_Init+0x64>)
 8001abe:	f001 fad7 	bl	8003070 <HAL_SPI_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ac8:	f7ff ffca 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20002b6c 	.word	0x20002b6c
 8001ad4:	40003800 	.word	0x40003800

08001ad8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <HAL_SPI_MspInit+0x84>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12c      	bne.n	8001b54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <HAL_SPI_MspInit+0x88>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <HAL_SPI_MspInit+0x88>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_SPI_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_SPI_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_SPI_MspInit+0x88>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_SPI_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b32:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b44:	2305      	movs	r3, #5
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_SPI_MspInit+0x8c>)
 8001b50:	f000 fb26 	bl	80021a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40003800 	.word	0x40003800
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020400 	.word	0x40020400

08001b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f000 fac6 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <SDTimer_Handler>:

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <SDTimer_Handler+0x40>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <SDTimer_Handler+0x1c>
    Timer1--;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <SDTimer_Handler+0x40>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <SDTimer_Handler+0x40>)
 8001bd2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <SDTimer_Handler+0x44>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <SDTimer_Handler+0x34>
    Timer2--;
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <SDTimer_Handler+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <SDTimer_Handler+0x44>)
 8001bea:	701a      	strb	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20002bc5 	.word	0x20002bc5
 8001bfc:	20002bc4 	.word	0x20002bc4

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <SysTick_Handler+0x30>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <SysTick_Handler+0x30>)
 8001c60:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <SysTick_Handler+0x30>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d904      	bls.n	8001c76 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SysTick_Handler+0x30>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8001c72:	f7ff ffa1 	bl	8001bb8 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c76:	f000 f98d 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200000a6 	.word	0x200000a6

08001c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
	}

return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
	}
	return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_lseek>:
{
	return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <_sbrk+0x5c>)
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <_sbrk+0x60>)
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <_sbrk+0x64>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <_sbrk+0x68>)
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d207      	bcs.n	8001d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d58:	f005 feb2 	bl	8007ac0 <__errno>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	e009      	b.n	8001d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <_sbrk+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <_sbrk+0x64>)
 8001d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20020000 	.word	0x20020000
 8001d88:	00000400 	.word	0x00000400
 8001d8c:	200000a8 	.word	0x200000a8
 8001d90:	20004c90 	.word	0x20004c90

08001d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <SystemInit+0x20>)
 8001d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9e:	4a05      	ldr	r2, [pc, #20]	; (8001db4 <SystemInit+0x20>)
 8001da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <MX_USART2_UART_Init+0x50>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001df0:	f001 fd7e 	bl	80038f0 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dfa:	f7ff fe31 	bl	8001a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20002bc8 	.word	0x20002bc8
 8001e08:	40004400 	.word	0x40004400

08001e0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e66:	230c      	movs	r3, #12
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e76:	2307      	movs	r3, #7
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e82:	f000 f98d 	bl	80021a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ec6:	f7ff ff65 	bl	8001d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eca:	f005 ffc9 	bl	8007e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ece:	f7ff fbc5 	bl	800165c <main>
  bx  lr    
 8001ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001ee0:	08008e68 	.word	0x08008e68
  ldr r2, =_sbss
 8001ee4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001ee8:	20004c90 	.word	0x20004c90

08001eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_Init+0x40>)
 8001efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_Init+0x40>)
 8001f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x40>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 f90d 	bl	8002138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fe20 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f917 	bl	8002186 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 f8ed 	bl	800214e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000008 	.word	0x20000008

08001f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_IncTick+0x20>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <HAL_IncTick+0x24>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2000000c 	.word	0x2000000c
 8001fb8:	20002c0c 	.word	0x20002c0c

08001fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc0:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_GetTick+0x14>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20002c0c 	.word	0x20002c0c

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0a      	blt.n	8002062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	490c      	ldr	r1, [pc, #48]	; (8002084 <__NVIC_SetPriority+0x4c>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	440b      	add	r3, r1
 800205c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002060:	e00a      	b.n	8002078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <__NVIC_SetPriority+0x50>)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	3b04      	subs	r3, #4
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	440b      	add	r3, r1
 8002076:	761a      	strb	r2, [r3, #24]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f1c3 0307 	rsb	r3, r3, #7
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	bf28      	it	cs
 80020aa:	2304      	movcs	r3, #4
 80020ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3304      	adds	r3, #4
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d902      	bls.n	80020bc <NVIC_EncodePriority+0x30>
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3b03      	subs	r3, #3
 80020ba:	e000      	b.n	80020be <NVIC_EncodePriority+0x32>
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	401a      	ands	r2, r3
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	f04f 31ff 	mov.w	r1, #4294967295
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	43d9      	mvns	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	4313      	orrs	r3, r2
         );
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002104:	d301      	bcc.n	800210a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002106:	2301      	movs	r3, #1
 8002108:	e00f      	b.n	800212a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <SysTick_Config+0x40>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002112:	210f      	movs	r1, #15
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f7ff ff8e 	bl	8002038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <SysTick_Config+0x40>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <SysTick_Config+0x40>)
 8002124:	2207      	movs	r2, #7
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff47 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	4603      	mov	r3, r0
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002160:	f7ff ff5c 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff8e 	bl	800208c <NVIC_EncodePriority>
 8002170:	4602      	mov	r2, r0
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff5d 	bl	8002038 <__NVIC_SetPriority>
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffb0 	bl	80020f4 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e165      	b.n	8002488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8154 	bne.w	8002482 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80ae 	beq.w	8002482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_GPIO_Init+0x300>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <HAL_GPIO_Init+0x300>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <HAL_GPIO_Init+0x300>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d025      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01f      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d019      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4c      	ldr	r2, [pc, #304]	; (80024b4 <HAL_GPIO_Init+0x314>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_GPIO_Init+0x318>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00d      	beq.n	80023aa <HAL_GPIO_Init+0x20a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4a      	ldr	r2, [pc, #296]	; (80024bc <HAL_GPIO_Init+0x31c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x206>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a49      	ldr	r2, [pc, #292]	; (80024c0 <HAL_GPIO_Init+0x320>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_GPIO_Init+0x202>
 800239e:	2306      	movs	r3, #6
 80023a0:	e00c      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e00a      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x304>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_GPIO_Init+0x324>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fe:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002428:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f ae96 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_PWREx_EnableOverDrive+0x90>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <HAL_PWREx_EnableOverDrive+0x90>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_PWREx_EnableOverDrive+0x90>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002522:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <HAL_PWREx_EnableOverDrive+0x94>)
 8002524:	2201      	movs	r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002528:	f7ff fd48 	bl	8001fbc <HAL_GetTick>
 800252c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800252e:	e009      	b.n	8002544 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002530:	f7ff fd44 	bl	8001fbc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253e:	d901      	bls.n	8002544 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e01f      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d1ee      	bne.n	8002530 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7ff fd30 	bl	8001fbc <HAL_GetTick>
 800255c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800255e:	e009      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002560:	f7ff fd2c 	bl	8001fbc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256e:	d901      	bls.n	8002574 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e007      	b.n	8002584 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_PWREx_EnableOverDrive+0x98>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002580:	d1ee      	bne.n	8002560 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	420e0040 	.word	0x420e0040
 8002594:	40007000 	.word	0x40007000
 8002598:	420e0044 	.word	0x420e0044

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0cc      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d90c      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d044      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e067      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b37      	ldr	r3, [pc, #220]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4934      	ldr	r1, [pc, #208]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7ff fc96 	bl	8001fbc <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff fc92 	bl	8001fbc <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e04f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b25      	ldr	r3, [pc, #148]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d20c      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b22      	ldr	r3, [pc, #136]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f855 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	; (800275c <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	; (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fbf6 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	08008968 	.word	0x08008968
 8002760:	20000004 	.word	0x20000004
 8002764:	20000008 	.word	0x20000008

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	; (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08008978 	.word	0x08008978

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08008978 	.word	0x08008978

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d4:	b088      	sub	sp, #32
 80027d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ec:	4bce      	ldr	r3, [pc, #824]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	f200 818d 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x344>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_RCC_GetSysClockFreq+0x30>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002835 	.word	0x08002835
 8002804:	08002b15 	.word	0x08002b15
 8002808:	08002b15 	.word	0x08002b15
 800280c:	08002b15 	.word	0x08002b15
 8002810:	0800283b 	.word	0x0800283b
 8002814:	08002b15 	.word	0x08002b15
 8002818:	08002b15 	.word	0x08002b15
 800281c:	08002b15 	.word	0x08002b15
 8002820:	08002841 	.word	0x08002841
 8002824:	08002b15 	.word	0x08002b15
 8002828:	08002b15 	.word	0x08002b15
 800282c:	08002b15 	.word	0x08002b15
 8002830:	080029b5 	.word	0x080029b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4bbd      	ldr	r3, [pc, #756]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002836:	61bb      	str	r3, [r7, #24]
       break;
 8002838:	e16f      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800283a:	4bbd      	ldr	r3, [pc, #756]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x360>)
 800283c:	61bb      	str	r3, [r7, #24]
      break;
 800283e:	e16c      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002840:	4bb9      	ldr	r3, [pc, #740]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002848:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800284a:	4bb7      	ldr	r3, [pc, #732]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d053      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002856:	4bb4      	ldr	r3, [pc, #720]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	099b      	lsrs	r3, r3, #6
 800285c:	461a      	mov	r2, r3
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002866:	f04f 0100 	mov.w	r1, #0
 800286a:	ea02 0400 	and.w	r4, r2, r0
 800286e:	603c      	str	r4, [r7, #0]
 8002870:	400b      	ands	r3, r1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	014b      	lsls	r3, r1, #5
 8002886:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800288a:	0142      	lsls	r2, r0, #5
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	4623      	mov	r3, r4
 8002892:	1ac0      	subs	r0, r0, r3
 8002894:	462b      	mov	r3, r5
 8002896:	eb61 0103 	sbc.w	r1, r1, r3
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	018b      	lsls	r3, r1, #6
 80028a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028a8:	0182      	lsls	r2, r0, #6
 80028aa:	1a12      	subs	r2, r2, r0
 80028ac:	eb63 0301 	sbc.w	r3, r3, r1
 80028b0:	f04f 0000 	mov.w	r0, #0
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	00d9      	lsls	r1, r3, #3
 80028ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028be:	00d0      	lsls	r0, r2, #3
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4621      	mov	r1, r4
 80028c6:	1852      	adds	r2, r2, r1
 80028c8:	4629      	mov	r1, r5
 80028ca:	eb43 0101 	adc.w	r1, r3, r1
 80028ce:	460b      	mov	r3, r1
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	0259      	lsls	r1, r3, #9
 80028da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028de:	0250      	lsls	r0, r2, #9
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	f7fd ffec 	bl	80008cc <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	e04c      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fe:	4b8a      	ldr	r3, [pc, #552]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	461a      	mov	r2, r3
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	ea02 0a00 	and.w	sl, r2, r0
 8002916:	ea03 0b01 	and.w	fp, r3, r1
 800291a:	4650      	mov	r0, sl
 800291c:	4659      	mov	r1, fp
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	014b      	lsls	r3, r1, #5
 8002928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800292c:	0142      	lsls	r2, r0, #5
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	ebb0 000a 	subs.w	r0, r0, sl
 8002936:	eb61 010b 	sbc.w	r1, r1, fp
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	018b      	lsls	r3, r1, #6
 8002944:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002948:	0182      	lsls	r2, r0, #6
 800294a:	1a12      	subs	r2, r2, r0
 800294c:	eb63 0301 	sbc.w	r3, r3, r1
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	00d9      	lsls	r1, r3, #3
 800295a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800295e:	00d0      	lsls	r0, r2, #3
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	eb12 020a 	adds.w	r2, r2, sl
 8002968:	eb43 030b 	adc.w	r3, r3, fp
 800296c:	f04f 0000 	mov.w	r0, #0
 8002970:	f04f 0100 	mov.w	r1, #0
 8002974:	0299      	lsls	r1, r3, #10
 8002976:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800297a:	0290      	lsls	r0, r2, #10
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	461a      	mov	r2, r3
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f7fd ff9e 	bl	80008cc <__aeabi_uldivmod>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4613      	mov	r3, r2
 8002996:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002998:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0c1b      	lsrs	r3, r3, #16
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	61bb      	str	r3, [r7, #24]
      break;
 80029b2:	e0b2      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029be:	4b5a      	ldr	r3, [pc, #360]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d04d      	beq.n	8002a66 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	461a      	mov	r2, r3
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	ea02 0800 	and.w	r8, r2, r0
 80029e2:	ea03 0901 	and.w	r9, r3, r1
 80029e6:	4640      	mov	r0, r8
 80029e8:	4649      	mov	r1, r9
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029f8:	0142      	lsls	r2, r0, #5
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	ebb0 0008 	subs.w	r0, r0, r8
 8002a02:	eb61 0109 	sbc.w	r1, r1, r9
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	018b      	lsls	r3, r1, #6
 8002a10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a14:	0182      	lsls	r2, r0, #6
 8002a16:	1a12      	subs	r2, r2, r0
 8002a18:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	00d9      	lsls	r1, r3, #3
 8002a26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a2a:	00d0      	lsls	r0, r2, #3
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	eb12 0208 	adds.w	r2, r2, r8
 8002a34:	eb43 0309 	adc.w	r3, r3, r9
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0259      	lsls	r1, r3, #9
 8002a42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a46:	0250      	lsls	r0, r2, #9
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f7fd ff38 	bl	80008cc <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	e04a      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	ea02 0400 	and.w	r4, r2, r0
 8002a7e:	ea03 0501 	and.w	r5, r3, r1
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	014b      	lsls	r3, r1, #5
 8002a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a94:	0142      	lsls	r2, r0, #5
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	1b00      	subs	r0, r0, r4
 8002a9c:	eb61 0105 	sbc.w	r1, r1, r5
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	018b      	lsls	r3, r1, #6
 8002aaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002aae:	0182      	lsls	r2, r0, #6
 8002ab0:	1a12      	subs	r2, r2, r0
 8002ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ab6:	f04f 0000 	mov.w	r0, #0
 8002aba:	f04f 0100 	mov.w	r1, #0
 8002abe:	00d9      	lsls	r1, r3, #3
 8002ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac4:	00d0      	lsls	r0, r2, #3
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	1912      	adds	r2, r2, r4
 8002acc:	eb45 0303 	adc.w	r3, r5, r3
 8002ad0:	f04f 0000 	mov.w	r0, #0
 8002ad4:	f04f 0100 	mov.w	r1, #0
 8002ad8:	0299      	lsls	r1, r3, #10
 8002ada:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ade:	0290      	lsls	r0, r2, #10
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	f7fd feec 	bl	80008cc <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0f1b      	lsrs	r3, r3, #28
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	61bb      	str	r3, [r7, #24]
      break;
 8002b12:	e002      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b16:	61bb      	str	r3, [r7, #24]
      break;
 8002b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1a:	69bb      	ldr	r3, [r7, #24]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3720      	adds	r7, #32
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200

08002b34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e28d      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8083 	beq.w	8002c5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b54:	4b94      	ldr	r3, [pc, #592]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b60:	4b91      	ldr	r3, [pc, #580]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b6c:	4b8e      	ldr	r3, [pc, #568]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b78:	d00c      	beq.n	8002b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7a:	4b8b      	ldr	r3, [pc, #556]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d112      	bne.n	8002bac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	4b88      	ldr	r3, [pc, #544]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b92:	d10b      	bne.n	8002bac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b94:	4b84      	ldr	r3, [pc, #528]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x124>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d157      	bne.n	8002c58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e25a      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x90>
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e01d      	b.n	8002c00 <HAL_RCC_OscConfig+0xcc>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0xb4>
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a72      	ldr	r2, [pc, #456]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0xcc>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a6e      	ldr	r2, [pc, #440]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6b      	ldr	r2, [pc, #428]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d013      	beq.n	8002c30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7ff f9d8 	bl	8001fbc <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c10:	f7ff f9d4 	bl	8001fbc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e21f      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c22:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0xdc>
 8002c2e:	e014      	b.n	8002c5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f9c4 	bl	8001fbc <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c38:	f7ff f9c0 	bl	8001fbc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b64      	cmp	r3, #100	; 0x64
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e20b      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x104>
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d06f      	beq.n	8002d46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c66:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d017      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c72:	4b4d      	ldr	r3, [pc, #308]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00b      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8a:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c96:	4b44      	ldr	r3, [pc, #272]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d116      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	4b41      	ldr	r3, [pc, #260]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_RCC_OscConfig+0x186>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1d3      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4937      	ldr	r1, [pc, #220]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cce:	e03a      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCC_OscConfig+0x278>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7ff f96d 	bl	8001fbc <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7ff f969 	bl	8001fbc <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e1b4      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4925      	ldr	r1, [pc, #148]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]
 8002d18:	e015      	b.n	8002d46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <HAL_RCC_OscConfig+0x278>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff f94c 	bl	8001fbc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d28:	f7ff f948 	bl	8001fbc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e193      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d036      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7ff f92c 	bl	8001fbc <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7ff f928 	bl	8001fbc <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e173      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x234>
 8002d86:	e01b      	b.n	8002dc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7ff f915 	bl	8001fbc <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	e00e      	b.n	8002db4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d96:	f7ff f911 	bl	8001fbc <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d907      	bls.n	8002db4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e15c      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
 8002da8:	40023800 	.word	0x40023800
 8002dac:	42470000 	.word	0x42470000
 8002db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1ea      	bne.n	8002d96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8097 	beq.w	8002efc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dd2:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	4b7f      	ldr	r3, [pc, #508]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a7e      	ldr	r2, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40
 8002dee:	4b7c      	ldr	r3, [pc, #496]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b79      	ldr	r3, [pc, #484]	; (8002fe4 <HAL_RCC_OscConfig+0x4b0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d118      	bne.n	8002e3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0a:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCC_OscConfig+0x4b0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	; (8002fe4 <HAL_RCC_OscConfig+0x4b0>)
 8002e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e16:	f7ff f8d1 	bl	8001fbc <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1e:	f7ff f8cd 	bl	8001fbc <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e118      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <HAL_RCC_OscConfig+0x4b0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0f0      	beq.n	8002e1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x31e>
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e50:	e01c      	b.n	8002e8c <HAL_RCC_OscConfig+0x358>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x340>
 8002e5a:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6713      	str	r3, [r2, #112]	; 0x70
 8002e66:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a5d      	ldr	r2, [pc, #372]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0x358>
 8002e74:	4b5a      	ldr	r3, [pc, #360]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a59      	ldr	r2, [pc, #356]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a56      	ldr	r2, [pc, #344]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002e86:	f023 0304 	bic.w	r3, r3, #4
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d015      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7ff f892 	bl	8001fbc <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7ff f88e 	bl	8001fbc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e0d7      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ee      	beq.n	8002e9c <HAL_RCC_OscConfig+0x368>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7ff f87c 	bl	8001fbc <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7ff f878 	bl	8001fbc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e0c1      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	4b40      	ldr	r3, [pc, #256]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1ee      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	4a3a      	ldr	r2, [pc, #232]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80ad 	beq.w	8003060 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d060      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d145      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <HAL_RCC_OscConfig+0x4b4>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff f84c 	bl	8001fbc <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f28:	f7ff f848 	bl	8001fbc <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e093      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	491b      	ldr	r1, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x4b4>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7e:	f7ff f81d 	bl	8001fbc <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7ff f819 	bl	8001fbc <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e064      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x452>
 8002fa4:	e05c      	b.n	8003060 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x4b4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7ff f806 	bl	8001fbc <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7ff f802 	bl	8001fbc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04d      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x4ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x480>
 8002fd2:	e045      	b.n	8003060 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e040      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <HAL_RCC_OscConfig+0x538>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d030      	beq.n	800305c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d129      	bne.n	800305c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d122      	bne.n	800305c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003024:	4293      	cmp	r3, r2
 8003026:	d119      	bne.n	800305c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d10f      	bne.n	800305c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07b      	b.n	800317a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003092:	d009      	beq.n	80030a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
 800309a:	e005      	b.n	80030a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fd08 	bl	8001ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	ea42 0103 	orr.w	r1, r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0104 	and.w	r1, r3, #4
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0210 	and.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003168:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b088      	sub	sp, #32
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_SPI_Transmit+0x22>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e126      	b.n	80033f2 <HAL_SPI_Transmit+0x270>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031ac:	f7fe ff06 	bl	8001fbc <HAL_GetTick>
 80031b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031c6:	e10b      	b.n	80033e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_SPI_Transmit+0x52>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d8:	e102      	b.n	80033e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2203      	movs	r2, #3
 80031de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	d10f      	bne.n	8003242 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003240:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d007      	beq.n	8003260 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d14b      	bne.n	8003302 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Transmit+0xf6>
 8003272:	8afb      	ldrh	r3, [r7, #22]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d13e      	bne.n	80032f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	1c9a      	adds	r2, r3, #2
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29a      	uxth	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800329c:	e02b      	b.n	80032f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d112      	bne.n	80032d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80032d0:	e011      	b.n	80032f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d2:	f7fe fe73 	bl	8001fbc <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d803      	bhi.n	80032ea <HAL_SPI_Transmit+0x168>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d102      	bne.n	80032f0 <HAL_SPI_Transmit+0x16e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d102      	bne.n	80032f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032f4:	e074      	b.n	80033e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ce      	bne.n	800329e <HAL_SPI_Transmit+0x11c>
 8003300:	e04c      	b.n	800339c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Transmit+0x18e>
 800330a:	8afb      	ldrh	r3, [r7, #22]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d140      	bne.n	8003392 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	330c      	adds	r3, #12
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003336:	e02c      	b.n	8003392 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d113      	bne.n	800336e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	; 0x36
 800336c:	e011      	b.n	8003392 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336e:	f7fe fe25 	bl	8001fbc <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d803      	bhi.n	8003386 <HAL_SPI_Transmit+0x204>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d102      	bne.n	800338c <HAL_SPI_Transmit+0x20a>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003390:	e026      	b.n	80033e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1cd      	bne.n	8003338 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	6839      	ldr	r1, [r7, #0]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fa63 	bl	800386c <SPI_EndRxTxTransaction>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e000      	b.n	80033e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b08c      	sub	sp, #48	; 0x30
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003408:	2301      	movs	r3, #1
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_SPI_TransmitReceive+0x26>
 800341c:	2302      	movs	r3, #2
 800341e:	e18a      	b.n	8003736 <HAL_SPI_TransmitReceive+0x33c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003428:	f7fe fdc8 	bl	8001fbc <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003446:	2b01      	cmp	r3, #1
 8003448:	d00f      	beq.n	800346a <HAL_SPI_TransmitReceive+0x70>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003450:	d107      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x68>
 800345a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800345e:	2b04      	cmp	r3, #4
 8003460:	d003      	beq.n	800346a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003468:	e15b      	b.n	8003722 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_SPI_TransmitReceive+0x82>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_SPI_TransmitReceive+0x82>
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003482:	e14e      	b.n	8003722 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b04      	cmp	r3, #4
 800348e:	d003      	beq.n	8003498 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2205      	movs	r2, #5
 8003494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	887a      	ldrh	r2, [r7, #2]
 80034ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	887a      	ldrh	r2, [r7, #2]
 80034ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d007      	beq.n	80034ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f4:	d178      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <HAL_SPI_TransmitReceive+0x10a>
 80034fe:	8b7b      	ldrh	r3, [r7, #26]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d166      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	1c9a      	adds	r2, r3, #2
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003528:	e053      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b02      	cmp	r3, #2
 8003536:	d11b      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x176>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x176>
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d113      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	1c9a      	adds	r2, r3, #2
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d119      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x1b8>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d014      	beq.n	80035b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	b292      	uxth	r2, r2
 8003594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035ae:	2301      	movs	r3, #1
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80035b2:	f7fe fd03 	bl	8001fbc <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035be:	429a      	cmp	r2, r3
 80035c0:	d807      	bhi.n	80035d2 <HAL_SPI_TransmitReceive+0x1d8>
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c8:	d003      	beq.n	80035d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035d0:	e0a7      	b.n	8003722 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1a6      	bne.n	800352a <HAL_SPI_TransmitReceive+0x130>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1a1      	bne.n	800352a <HAL_SPI_TransmitReceive+0x130>
 80035e6:	e07c      	b.n	80036e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0x1fc>
 80035f0:	8b7b      	ldrh	r3, [r7, #26]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d16b      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800361c:	e057      	b.n	80036ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d11c      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x26c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d017      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x26c>
 8003636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003638:	2b01      	cmp	r3, #1
 800363a:	d114      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d119      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x2ae>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d014      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036a4:	2301      	movs	r3, #1
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036a8:	f7fe fc88 	bl	8001fbc <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d803      	bhi.n	80036c0 <HAL_SPI_TransmitReceive+0x2c6>
 80036b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x2cc>
 80036c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80036cc:	e029      	b.n	8003722 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1a2      	bne.n	800361e <HAL_SPI_TransmitReceive+0x224>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d19d      	bne.n	800361e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f8c0 	bl	800386c <SPI_EndRxTxTransaction>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d006      	beq.n	8003700 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80036fe:	e010      	b.n	8003722 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	e000      	b.n	8003722 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003720:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003736:	4618      	mov	r0, r3
 8003738:	3730      	adds	r7, #48	; 0x30
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800374c:	b2db      	uxtb	r3, r3
}
 800374e:	4618      	mov	r0, r3
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800376c:	f7fe fc26 	bl	8001fbc <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	4413      	add	r3, r2
 800377a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800377c:	f7fe fc1e 	bl	8001fbc <HAL_GetTick>
 8003780:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003782:	4b39      	ldr	r3, [pc, #228]	; (8003868 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	015b      	lsls	r3, r3, #5
 8003788:	0d1b      	lsrs	r3, r3, #20
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003792:	e054      	b.n	800383e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d050      	beq.n	800383e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800379c:	f7fe fc0e 	bl	8001fbc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	69fa      	ldr	r2, [r7, #28]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d902      	bls.n	80037b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d13d      	bne.n	800382e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ca:	d111      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d4:	d004      	beq.n	80037e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037de:	d107      	bne.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d10f      	bne.n	800381a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e017      	b.n	800385e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3b01      	subs	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	429a      	cmp	r2, r3
 800385a:	d19b      	bne.n	8003794 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000004 	.word	0x20000004

0800386c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <SPI_EndRxTxTransaction+0x7c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <SPI_EndRxTxTransaction+0x80>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0d5b      	lsrs	r3, r3, #21
 8003884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003888:	fb02 f303 	mul.w	r3, r2, r3
 800388c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003896:	d112      	bne.n	80038be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff ff5a 	bl	800375c <SPI_WaitFlagStateUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d016      	beq.n	80038dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f043 0220 	orr.w	r2, r3, #32
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00f      	b.n	80038de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d0f2      	beq.n	80038be <SPI_EndRxTxTransaction+0x52>
 80038d8:	e000      	b.n	80038dc <SPI_EndRxTxTransaction+0x70>
        break;
 80038da:	bf00      	nop
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000004 	.word	0x20000004
 80038ec:	165e9f81 	.word	0x165e9f81

080038f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e03f      	b.n	8003982 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe fa78 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f829 	bl	800398c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800398c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003990:	b09f      	sub	sp, #124	; 0x7c
 8003992:	af00      	add	r7, sp, #0
 8003994:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	68d9      	ldr	r1, [r3, #12]
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	ea40 0301 	orr.w	r3, r0, r1
 80039ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	431a      	orrs	r2, r3
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039d0:	f021 010c 	bic.w	r1, r1, #12
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039da:	430b      	orrs	r3, r1
 80039dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ea:	6999      	ldr	r1, [r3, #24]
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	ea40 0301 	orr.w	r3, r0, r1
 80039f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4bc5      	ldr	r3, [pc, #788]	; (8003d10 <UART_SetConfig+0x384>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d004      	beq.n	8003a0a <UART_SetConfig+0x7e>
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4bc3      	ldr	r3, [pc, #780]	; (8003d14 <UART_SetConfig+0x388>)
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d103      	bne.n	8003a12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a0a:	f7fe fecd 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 8003a0e:	6778      	str	r0, [r7, #116]	; 0x74
 8003a10:	e002      	b.n	8003a18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a12:	f7fe feb5 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8003a16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a20:	f040 80b6 	bne.w	8003b90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a26:	461c      	mov	r4, r3
 8003a28:	f04f 0500 	mov.w	r5, #0
 8003a2c:	4622      	mov	r2, r4
 8003a2e:	462b      	mov	r3, r5
 8003a30:	1891      	adds	r1, r2, r2
 8003a32:	6439      	str	r1, [r7, #64]	; 0x40
 8003a34:	415b      	adcs	r3, r3
 8003a36:	647b      	str	r3, [r7, #68]	; 0x44
 8003a38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a3c:	1912      	adds	r2, r2, r4
 8003a3e:	eb45 0303 	adc.w	r3, r5, r3
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f04f 0100 	mov.w	r1, #0
 8003a4a:	00d9      	lsls	r1, r3, #3
 8003a4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a50:	00d0      	lsls	r0, r2, #3
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	1911      	adds	r1, r2, r4
 8003a58:	6639      	str	r1, [r7, #96]	; 0x60
 8003a5a:	416b      	adcs	r3, r5
 8003a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a78:	f7fc ff28 	bl	80008cc <__aeabi_uldivmod>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4ba5      	ldr	r3, [pc, #660]	; (8003d18 <UART_SetConfig+0x38c>)
 8003a82:	fba3 2302 	umull	r2, r3, r3, r2
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	011e      	lsls	r6, r3, #4
 8003a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8c:	461c      	mov	r4, r3
 8003a8e:	f04f 0500 	mov.w	r5, #0
 8003a92:	4622      	mov	r2, r4
 8003a94:	462b      	mov	r3, r5
 8003a96:	1891      	adds	r1, r2, r2
 8003a98:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9a:	415b      	adcs	r3, r3
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003aa2:	1912      	adds	r2, r2, r4
 8003aa4:	eb45 0303 	adc.w	r3, r5, r3
 8003aa8:	f04f 0000 	mov.w	r0, #0
 8003aac:	f04f 0100 	mov.w	r1, #0
 8003ab0:	00d9      	lsls	r1, r3, #3
 8003ab2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab6:	00d0      	lsls	r0, r2, #3
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	1911      	adds	r1, r2, r4
 8003abe:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ac0:	416b      	adcs	r3, r5
 8003ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ad6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ada:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ade:	f7fc fef5 	bl	80008cc <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4b8c      	ldr	r3, [pc, #560]	; (8003d18 <UART_SetConfig+0x38c>)
 8003ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	2164      	movs	r1, #100	; 0x64
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	3332      	adds	r3, #50	; 0x32
 8003afa:	4a87      	ldr	r2, [pc, #540]	; (8003d18 <UART_SetConfig+0x38c>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b08:	441e      	add	r6, r3
 8003b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	1894      	adds	r4, r2, r2
 8003b18:	623c      	str	r4, [r7, #32]
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b22:	1812      	adds	r2, r2, r0
 8003b24:	eb41 0303 	adc.w	r3, r1, r3
 8003b28:	f04f 0400 	mov.w	r4, #0
 8003b2c:	f04f 0500 	mov.w	r5, #0
 8003b30:	00dd      	lsls	r5, r3, #3
 8003b32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b36:	00d4      	lsls	r4, r2, #3
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	1814      	adds	r4, r2, r0
 8003b3e:	653c      	str	r4, [r7, #80]	; 0x50
 8003b40:	414b      	adcs	r3, r1
 8003b42:	657b      	str	r3, [r7, #84]	; 0x54
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	1891      	adds	r1, r2, r2
 8003b50:	61b9      	str	r1, [r7, #24]
 8003b52:	415b      	adcs	r3, r3
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b5e:	f7fc feb5 	bl	80008cc <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4b6c      	ldr	r3, [pc, #432]	; (8003d18 <UART_SetConfig+0x38c>)
 8003b68:	fba3 1302 	umull	r1, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	3332      	adds	r3, #50	; 0x32
 8003b7a:	4a67      	ldr	r2, [pc, #412]	; (8003d18 <UART_SetConfig+0x38c>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f003 0207 	and.w	r2, r3, #7
 8003b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4432      	add	r2, r6
 8003b8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b8e:	e0b9      	b.n	8003d04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b92:	461c      	mov	r4, r3
 8003b94:	f04f 0500 	mov.w	r5, #0
 8003b98:	4622      	mov	r2, r4
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	6139      	str	r1, [r7, #16]
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ba8:	1912      	adds	r2, r2, r4
 8003baa:	eb45 0303 	adc.w	r3, r5, r3
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	00d9      	lsls	r1, r3, #3
 8003bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bbc:	00d0      	lsls	r0, r2, #3
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	eb12 0804 	adds.w	r8, r2, r4
 8003bc6:	eb43 0905 	adc.w	r9, r3, r5
 8003bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f04f 0100 	mov.w	r1, #0
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	008b      	lsls	r3, r1, #2
 8003bde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003be2:	0082      	lsls	r2, r0, #2
 8003be4:	4640      	mov	r0, r8
 8003be6:	4649      	mov	r1, r9
 8003be8:	f7fc fe70 	bl	80008cc <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4b49      	ldr	r3, [pc, #292]	; (8003d18 <UART_SetConfig+0x38c>)
 8003bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	011e      	lsls	r6, r3, #4
 8003bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	1894      	adds	r4, r2, r2
 8003c08:	60bc      	str	r4, [r7, #8]
 8003c0a:	415b      	adcs	r3, r3
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c12:	1812      	adds	r2, r2, r0
 8003c14:	eb41 0303 	adc.w	r3, r1, r3
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	f04f 0500 	mov.w	r5, #0
 8003c20:	00dd      	lsls	r5, r3, #3
 8003c22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c26:	00d4      	lsls	r4, r2, #3
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	1814      	adds	r4, r2, r0
 8003c2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c30:	414b      	adcs	r3, r1
 8003c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	008b      	lsls	r3, r1, #2
 8003c48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c4c:	0082      	lsls	r2, r0, #2
 8003c4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c52:	f7fc fe3b 	bl	80008cc <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4b2f      	ldr	r3, [pc, #188]	; (8003d18 <UART_SetConfig+0x38c>)
 8003c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	2164      	movs	r1, #100	; 0x64
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	3332      	adds	r3, #50	; 0x32
 8003c6e:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <UART_SetConfig+0x38c>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7a:	441e      	add	r6, r3
 8003c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	1894      	adds	r4, r2, r2
 8003c8a:	603c      	str	r4, [r7, #0]
 8003c8c:	415b      	adcs	r3, r3
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c94:	1812      	adds	r2, r2, r0
 8003c96:	eb41 0303 	adc.w	r3, r1, r3
 8003c9a:	f04f 0400 	mov.w	r4, #0
 8003c9e:	f04f 0500 	mov.w	r5, #0
 8003ca2:	00dd      	lsls	r5, r3, #3
 8003ca4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ca8:	00d4      	lsls	r4, r2, #3
 8003caa:	4622      	mov	r2, r4
 8003cac:	462b      	mov	r3, r5
 8003cae:	eb12 0a00 	adds.w	sl, r2, r0
 8003cb2:	eb43 0b01 	adc.w	fp, r3, r1
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	008b      	lsls	r3, r1, #2
 8003cca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cce:	0082      	lsls	r2, r0, #2
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	4659      	mov	r1, fp
 8003cd4:	f7fc fdfa 	bl	80008cc <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <UART_SetConfig+0x38c>)
 8003cde:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	2164      	movs	r1, #100	; 0x64
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	3332      	adds	r3, #50	; 0x32
 8003cf0:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <UART_SetConfig+0x38c>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	f003 020f 	and.w	r2, r3, #15
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4432      	add	r2, r6
 8003d02:	609a      	str	r2, [r3, #8]
}
 8003d04:	bf00      	nop
 8003d06:	377c      	adds	r7, #124	; 0x7c
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0e:	bf00      	nop
 8003d10:	40011000 	.word	0x40011000
 8003d14:	40011400 	.word	0x40011400
 8003d18:	51eb851f 	.word	0x51eb851f

08003d1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d20:	4904      	ldr	r1, [pc, #16]	; (8003d34 <MX_FATFS_Init+0x18>)
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_FATFS_Init+0x1c>)
 8003d24:	f003 fdf6 	bl	8007914 <FATFS_LinkDriver>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <MX_FATFS_Init+0x20>)
 8003d2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20002c10 	.word	0x20002c10
 8003d38:	20000010 	.word	0x20000010
 8003d3c:	20002c14 	.word	0x20002c14

08003d40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	 return SD_disk_initialize (pdrv);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd f8eb 	bl	8000f38 <SD_disk_initialize>
 8003d62:	4603      	mov	r3, r0
 8003d64:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	4603      	mov	r3, r0
 8003d76:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fd f9c6 	bl	800110c <SD_disk_status>
 8003d80:	4603      	mov	r3, r0
 8003d82:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4603      	mov	r3, r0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	 return SD_disk_read(pdrv, buff, sector, count);
 8003d9c:	7bf8      	ldrb	r0, [r7, #15]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	f7fd f9c8 	bl	8001138 <SD_disk_read>
 8003da8:	4603      	mov	r3, r0
 8003daa:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003dc4:	7bf8      	ldrb	r0, [r7, #15]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	f7fd fa1e 	bl	800120c <SD_disk_write>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	603a      	str	r2, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
 8003de8:	460b      	mov	r3, r1
 8003dea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	79b9      	ldrb	r1, [r7, #6]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd fa8e 	bl	8001314 <SD_disk_ioctl>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <disk_status+0x30>)
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	79fa      	ldrb	r2, [r7, #7]
 8003e1c:	4905      	ldr	r1, [pc, #20]	; (8003e34 <disk_status+0x30>)
 8003e1e:	440a      	add	r2, r1
 8003e20:	7a12      	ldrb	r2, [r2, #8]
 8003e22:	4610      	mov	r0, r2
 8003e24:	4798      	blx	r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	200002d4 	.word	0x200002d4

08003e38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	4a0d      	ldr	r2, [pc, #52]	; (8003e80 <disk_initialize+0x48>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d111      	bne.n	8003e74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <disk_initialize+0x48>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <disk_initialize+0x48>)
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	79fa      	ldrb	r2, [r7, #7]
 8003e66:	4906      	ldr	r1, [pc, #24]	; (8003e80 <disk_initialize+0x48>)
 8003e68:	440a      	add	r2, r1
 8003e6a:	7a12      	ldrb	r2, [r2, #8]
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200002d4 	.word	0x200002d4

08003e84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <disk_read+0x3c>)
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	689c      	ldr	r4, [r3, #8]
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <disk_read+0x3c>)
 8003ea4:	4413      	add	r3, r2
 8003ea6:	7a18      	ldrb	r0, [r3, #8]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	47a0      	blx	r4
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	200002d4 	.word	0x200002d4

08003ec4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	4a0a      	ldr	r2, [pc, #40]	; (8003f00 <disk_write+0x3c>)
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	68dc      	ldr	r4, [r3, #12]
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <disk_write+0x3c>)
 8003ee4:	4413      	add	r3, r2
 8003ee6:	7a18      	ldrb	r0, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	47a0      	blx	r4
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	bf00      	nop
 8003f00:	200002d4 	.word	0x200002d4

08003f04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	603a      	str	r2, [r7, #0]
 8003f0e:	71fb      	strb	r3, [r7, #7]
 8003f10:	460b      	mov	r3, r1
 8003f12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <disk_ioctl+0x38>)
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	79fa      	ldrb	r2, [r7, #7]
 8003f22:	4906      	ldr	r1, [pc, #24]	; (8003f3c <disk_ioctl+0x38>)
 8003f24:	440a      	add	r2, r1
 8003f26:	7a10      	ldrb	r0, [r2, #8]
 8003f28:	79b9      	ldrb	r1, [r7, #6]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	4798      	blx	r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200002d4 	.word	0x200002d4

08003f40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f50:	89fb      	ldrh	r3, [r7, #14]
 8003f52:	021b      	lsls	r3, r3, #8
 8003f54:	b21a      	sxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	b21b      	sxth	r3, r3
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	b21b      	sxth	r3, r3
 8003f60:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f62:	89fb      	ldrh	r3, [r7, #14]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3303      	adds	r3, #3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	3202      	adds	r2, #2
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	3201      	adds	r2, #1
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	7812      	ldrb	r2, [r2, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	887a      	ldrh	r2, [r7, #2]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	887a      	ldrh	r2, [r7, #2]
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	0a1b      	lsrs	r3, r3, #8
 800402a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	607a      	str	r2, [r7, #4]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	1c53      	adds	r3, r2, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	6179      	str	r1, [r7, #20]
 800406a:	7812      	ldrb	r2, [r2, #0]
 800406c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3b01      	subs	r3, #1
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f1      	bne.n	800405e <mem_cpy+0x1a>
	}
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004086:	b480      	push	{r7}
 8004088:	b087      	sub	sp, #28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	617a      	str	r2, [r7, #20]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f3      	bne.n	8004096 <mem_set+0x10>
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	61fa      	str	r2, [r7, #28]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	4619      	mov	r1, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	61ba      	str	r2, [r7, #24]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	1acb      	subs	r3, r1, r3
 80040e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <mem_cmp+0x40>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0eb      	beq.n	80040d4 <mem_cmp+0x18>

	return r;
 80040fc:	697b      	ldr	r3, [r7, #20]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	; 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004114:	e002      	b.n	800411c <chk_chr+0x12>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3301      	adds	r3, #1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <chk_chr+0x26>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	4293      	cmp	r3, r2
 800412e:	d1f2      	bne.n	8004116 <chk_chr+0xc>
	return *str;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	781b      	ldrb	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800414a:	2300      	movs	r3, #0
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e029      	b.n	80041a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <chk_lock+0xb4>)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	4413      	add	r3, r2
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01d      	beq.n	800419e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004162:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <chk_lock+0xb4>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	4413      	add	r3, r2
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d116      	bne.n	80041a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004174:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <chk_lock+0xb4>)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	4413      	add	r3, r2
 800417c:	3304      	adds	r3, #4
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004184:	429a      	cmp	r2, r3
 8004186:	d10c      	bne.n	80041a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004188:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <chk_lock+0xb4>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4413      	add	r3, r2
 8004190:	3308      	adds	r3, #8
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004198:	429a      	cmp	r2, r3
 800419a:	d102      	bne.n	80041a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800419c:	e007      	b.n	80041ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800419e:	2301      	movs	r3, #1
 80041a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d9d2      	bls.n	8004154 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d109      	bne.n	80041c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <chk_lock+0x80>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d101      	bne.n	80041c4 <chk_lock+0x84>
 80041c0:	2300      	movs	r3, #0
 80041c2:	e010      	b.n	80041e6 <chk_lock+0xa6>
 80041c4:	2312      	movs	r3, #18
 80041c6:	e00e      	b.n	80041e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <chk_lock+0xa0>
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <chk_lock+0xb4>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	4413      	add	r3, r2
 80041d6:	330c      	adds	r3, #12
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041de:	d101      	bne.n	80041e4 <chk_lock+0xa4>
 80041e0:	2310      	movs	r3, #16
 80041e2:	e000      	b.n	80041e6 <chk_lock+0xa6>
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	200000b4 	.word	0x200000b4

080041f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	e002      	b.n	800420a <enq_lock+0x12>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3301      	adds	r3, #1
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d806      	bhi.n	800421e <enq_lock+0x26>
 8004210:	4a09      	ldr	r2, [pc, #36]	; (8004238 <enq_lock+0x40>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	4413      	add	r3, r2
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f2      	bne.n	8004204 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b02      	cmp	r3, #2
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	200000b4 	.word	0x200000b4

0800423c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e01f      	b.n	800428c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800424c:	4a41      	ldr	r2, [pc, #260]	; (8004354 <inc_lock+0x118>)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d113      	bne.n	8004286 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800425e:	4a3d      	ldr	r2, [pc, #244]	; (8004354 <inc_lock+0x118>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	4413      	add	r3, r2
 8004266:	3304      	adds	r3, #4
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800426e:	429a      	cmp	r2, r3
 8004270:	d109      	bne.n	8004286 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004272:	4a38      	ldr	r2, [pc, #224]	; (8004354 <inc_lock+0x118>)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	3308      	adds	r3, #8
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004282:	429a      	cmp	r2, r3
 8004284:	d006      	beq.n	8004294 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3301      	adds	r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d9dc      	bls.n	800424c <inc_lock+0x10>
 8004292:	e000      	b.n	8004296 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004294:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d132      	bne.n	8004302 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e002      	b.n	80042a8 <inc_lock+0x6c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d806      	bhi.n	80042bc <inc_lock+0x80>
 80042ae:	4a29      	ldr	r2, [pc, #164]	; (8004354 <inc_lock+0x118>)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	4413      	add	r3, r2
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f2      	bne.n	80042a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d101      	bne.n	80042c6 <inc_lock+0x8a>
 80042c2:	2300      	movs	r3, #0
 80042c4:	e040      	b.n	8004348 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4922      	ldr	r1, [pc, #136]	; (8004354 <inc_lock+0x118>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	440b      	add	r3, r1
 80042d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	491e      	ldr	r1, [pc, #120]	; (8004354 <inc_lock+0x118>)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	440b      	add	r3, r1
 80042e0:	3304      	adds	r3, #4
 80042e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	491a      	ldr	r1, [pc, #104]	; (8004354 <inc_lock+0x118>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	440b      	add	r3, r1
 80042f0:	3308      	adds	r3, #8
 80042f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80042f4:	4a17      	ldr	r2, [pc, #92]	; (8004354 <inc_lock+0x118>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	330c      	adds	r3, #12
 80042fe:	2200      	movs	r2, #0
 8004300:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <inc_lock+0xe0>
 8004308:	4a12      	ldr	r2, [pc, #72]	; (8004354 <inc_lock+0x118>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	4413      	add	r3, r2
 8004310:	330c      	adds	r3, #12
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <inc_lock+0xe0>
 8004318:	2300      	movs	r3, #0
 800431a:	e015      	b.n	8004348 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <inc_lock+0xf8>
 8004322:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <inc_lock+0x118>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	330c      	adds	r3, #12
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	e001      	b.n	8004338 <inc_lock+0xfc>
 8004334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004338:	4906      	ldr	r1, [pc, #24]	; (8004354 <inc_lock+0x118>)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	440b      	add	r3, r1
 8004340:	330c      	adds	r3, #12
 8004342:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3301      	adds	r3, #1
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	200000b4 	.word	0x200000b4

08004358 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d825      	bhi.n	80043b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800436c:	4a17      	ldr	r2, [pc, #92]	; (80043cc <dec_lock+0x74>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	4413      	add	r3, r2
 8004374:	330c      	adds	r3, #12
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800437a:	89fb      	ldrh	r3, [r7, #14]
 800437c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004380:	d101      	bne.n	8004386 <dec_lock+0x2e>
 8004382:	2300      	movs	r3, #0
 8004384:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <dec_lock+0x3a>
 800438c:	89fb      	ldrh	r3, [r7, #14]
 800438e:	3b01      	subs	r3, #1
 8004390:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004392:	4a0e      	ldr	r2, [pc, #56]	; (80043cc <dec_lock+0x74>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	4413      	add	r3, r2
 800439a:	330c      	adds	r3, #12
 800439c:	89fa      	ldrh	r2, [r7, #14]
 800439e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043a0:	89fb      	ldrh	r3, [r7, #14]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <dec_lock+0x5a>
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <dec_lock+0x74>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	4413      	add	r3, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	737b      	strb	r3, [r7, #13]
 80043b6:	e001      	b.n	80043bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043b8:	2302      	movs	r3, #2
 80043ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	200000b4 	.word	0x200000b4

080043d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e010      	b.n	8004400 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80043de:	4a0d      	ldr	r2, [pc, #52]	; (8004414 <clear_lock+0x44>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	4413      	add	r3, r2
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d105      	bne.n	80043fa <clear_lock+0x2a>
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <clear_lock+0x44>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d9eb      	bls.n	80043de <clear_lock+0xe>
	}
}
 8004406:	bf00      	nop
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	200000b4 	.word	0x200000b4

08004418 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	78db      	ldrb	r3, [r3, #3]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d034      	beq.n	8004496 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7858      	ldrb	r0, [r3, #1]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800443c:	2301      	movs	r3, #1
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f7ff fd40 	bl	8003ec4 <disk_write>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <sync_window+0x38>
			res = FR_DISK_ERR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
 800444e:	e022      	b.n	8004496 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	1ad2      	subs	r2, r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	429a      	cmp	r2, r3
 8004464:	d217      	bcs.n	8004496 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	789b      	ldrb	r3, [r3, #2]
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e010      	b.n	8004490 <sync_window+0x78>
					wsect += fs->fsize;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	7858      	ldrb	r0, [r3, #1]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004482:	2301      	movs	r3, #1
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	f7ff fd1d 	bl	8003ec4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3b01      	subs	r3, #1
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d8eb      	bhi.n	800446e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d01b      	beq.n	80044f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7ff ffad 	bl	8004418 <sync_window>
 80044be:	4603      	mov	r3, r0
 80044c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d113      	bne.n	80044f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	7858      	ldrb	r0, [r3, #1]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80044d2:	2301      	movs	r3, #1
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	f7ff fcd5 	bl	8003e84 <disk_read>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff87 	bl	8004418 <sync_window>
 800450a:	4603      	mov	r3, r0
 800450c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d159      	bne.n	80045c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d149      	bne.n	80045b0 <sync_fs+0xb4>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	791b      	ldrb	r3, [r3, #4]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d145      	bne.n	80045b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	899b      	ldrh	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	2100      	movs	r1, #0
 8004532:	f7ff fda8 	bl	8004086 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3338      	adds	r3, #56	; 0x38
 800453a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800453e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fd37 	bl	8003fb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3338      	adds	r3, #56	; 0x38
 800454c:	4921      	ldr	r1, [pc, #132]	; (80045d4 <sync_fs+0xd8>)
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fd4c 	bl	8003fec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3338      	adds	r3, #56	; 0x38
 8004558:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800455c:	491e      	ldr	r1, [pc, #120]	; (80045d8 <sync_fs+0xdc>)
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fd44 	bl	8003fec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3338      	adds	r3, #56	; 0x38
 8004568:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7ff fd3a 	bl	8003fec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3338      	adds	r3, #56	; 0x38
 800457c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7ff fd30 	bl	8003fec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7858      	ldrb	r0, [r3, #1]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a4:	2301      	movs	r3, #1
 80045a6:	f7ff fc8d 	bl	8003ec4 <disk_write>
			fs->fsi_flag = 0;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff fca3 	bl	8003f04 <disk_ioctl>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <sync_fs+0xcc>
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	41615252 	.word	0x41615252
 80045d8:	61417272 	.word	0x61417272

080045dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	3b02      	subs	r3, #2
 80045ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	3b02      	subs	r3, #2
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d301      	bcc.n	80045fc <clust2sect+0x20>
 80045f8:	2300      	movs	r3, #0
 80045fa:	e008      	b.n	800460e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	895b      	ldrh	r3, [r3, #10]
 8004600:	461a      	mov	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	fb03 f202 	mul.w	r2, r3, r2
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4413      	add	r3, r2
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d904      	bls.n	800463a <get_fat+0x20>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <get_fat+0x26>
		val = 1;	/* Internal error */
 800463a:	2301      	movs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e0bb      	b.n	80047b8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004640:	f04f 33ff 	mov.w	r3, #4294967295
 8004644:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b03      	cmp	r3, #3
 800464c:	f000 8083 	beq.w	8004756 <get_fat+0x13c>
 8004650:	2b03      	cmp	r3, #3
 8004652:	f300 80a7 	bgt.w	80047a4 <get_fat+0x18a>
 8004656:	2b01      	cmp	r3, #1
 8004658:	d002      	beq.n	8004660 <get_fat+0x46>
 800465a:	2b02      	cmp	r3, #2
 800465c:	d056      	beq.n	800470c <get_fat+0xf2>
 800465e:	e0a1      	b.n	80047a4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	899b      	ldrh	r3, [r3, #12]
 8004676:	4619      	mov	r1, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	fbb3 f3f1 	udiv	r3, r3, r1
 800467e:	4413      	add	r3, r2
 8004680:	4619      	mov	r1, r3
 8004682:	6938      	ldr	r0, [r7, #16]
 8004684:	f7ff ff0c 	bl	80044a0 <move_window>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	f040 808d 	bne.w	80047aa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	60fa      	str	r2, [r7, #12]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	8992      	ldrh	r2, [r2, #12]
 800469a:	fbb3 f1f2 	udiv	r1, r3, r2
 800469e:	fb02 f201 	mul.w	r2, r2, r1
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	899b      	ldrh	r3, [r3, #12]
 80046b6:	4619      	mov	r1, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80046be:	4413      	add	r3, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	6938      	ldr	r0, [r7, #16]
 80046c4:	f7ff feec 	bl	80044a0 <move_window>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d16f      	bne.n	80047ae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	899b      	ldrh	r3, [r3, #12]
 80046d2:	461a      	mov	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80046da:	fb02 f201 	mul.w	r2, r2, r1
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	461a      	mov	r2, r3
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <get_fat+0xe8>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	e002      	b.n	8004708 <get_fat+0xee>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	617b      	str	r3, [r7, #20]
			break;
 800470a:	e055      	b.n	80047b8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	899b      	ldrh	r3, [r3, #12]
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	b29b      	uxth	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004720:	4413      	add	r3, r2
 8004722:	4619      	mov	r1, r3
 8004724:	6938      	ldr	r0, [r7, #16]
 8004726:	f7ff febb 	bl	80044a0 <move_window>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d140      	bne.n	80047b2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	8992      	ldrh	r2, [r2, #12]
 800473e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004742:	fb02 f200 	mul.w	r2, r2, r0
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	440b      	add	r3, r1
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff fbf8 	bl	8003f40 <ld_word>
 8004750:	4603      	mov	r3, r0
 8004752:	617b      	str	r3, [r7, #20]
			break;
 8004754:	e030      	b.n	80047b8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	899b      	ldrh	r3, [r3, #12]
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	b29b      	uxth	r3, r3
 8004762:	4619      	mov	r1, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	fbb3 f3f1 	udiv	r3, r3, r1
 800476a:	4413      	add	r3, r2
 800476c:	4619      	mov	r1, r3
 800476e:	6938      	ldr	r0, [r7, #16]
 8004770:	f7ff fe96 	bl	80044a0 <move_window>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11d      	bne.n	80047b6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	8992      	ldrh	r2, [r2, #12]
 8004788:	fbb3 f0f2 	udiv	r0, r3, r2
 800478c:	fb02 f200 	mul.w	r2, r2, r0
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	440b      	add	r3, r1
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff fbeb 	bl	8003f70 <ld_dword>
 800479a:	4603      	mov	r3, r0
 800479c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047a0:	617b      	str	r3, [r7, #20]
			break;
 80047a2:	e009      	b.n	80047b8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e006      	b.n	80047b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047aa:	bf00      	nop
 80047ac:	e004      	b.n	80047b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047ae:	bf00      	nop
 80047b0:	e002      	b.n	80047b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047b2:	bf00      	nop
 80047b4:	e000      	b.n	80047b8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047b6:	bf00      	nop
		}
	}

	return val;
 80047b8:	697b      	ldr	r3, [r7, #20]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80047c2:	b590      	push	{r4, r7, lr}
 80047c4:	b089      	sub	sp, #36	; 0x24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047ce:	2302      	movs	r3, #2
 80047d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f240 8102 	bls.w	80049de <put_fat+0x21c>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	f080 80fc 	bcs.w	80049de <put_fat+0x21c>
		switch (fs->fs_type) {
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	f000 80b6 	beq.w	800495c <put_fat+0x19a>
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	f300 80fd 	bgt.w	80049f0 <put_fat+0x22e>
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d003      	beq.n	8004802 <put_fat+0x40>
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	f000 8083 	beq.w	8004906 <put_fat+0x144>
 8004800:	e0f6      	b.n	80049f0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4413      	add	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	899b      	ldrh	r3, [r3, #12]
 8004818:	4619      	mov	r1, r3
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004820:	4413      	add	r3, r2
 8004822:	4619      	mov	r1, r3
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f7ff fe3b 	bl	80044a0 <move_window>
 800482a:	4603      	mov	r3, r0
 800482c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f040 80d6 	bne.w	80049e2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	61ba      	str	r2, [r7, #24]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	8992      	ldrh	r2, [r2, #12]
 8004846:	fbb3 f0f2 	udiv	r0, r3, r2
 800484a:	fb02 f200 	mul.w	r2, r2, r0
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	440b      	add	r3, r1
 8004852:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <put_fat+0xb8>
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b25b      	sxtb	r3, r3
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	b25a      	sxtb	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	b25b      	sxtb	r3, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	b25b      	sxtb	r3, r3
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e001      	b.n	800487e <put_fat+0xbc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	899b      	ldrh	r3, [r3, #12]
 8004890:	4619      	mov	r1, r3
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	fbb3 f3f1 	udiv	r3, r3, r1
 8004898:	4413      	add	r3, r2
 800489a:	4619      	mov	r1, r3
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff fdff 	bl	80044a0 <move_window>
 80048a2:	4603      	mov	r3, r0
 80048a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048a6:	7ffb      	ldrb	r3, [r7, #31]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f040 809c 	bne.w	80049e6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	899b      	ldrh	r3, [r3, #12]
 80048b8:	461a      	mov	r2, r3
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80048c0:	fb02 f200 	mul.w	r2, r2, r0
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	440b      	add	r3, r1
 80048c8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <put_fat+0x11a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	091b      	lsrs	r3, r3, #4
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e00e      	b.n	80048fa <put_fat+0x138>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b25b      	sxtb	r3, r3
 80048e2:	f023 030f 	bic.w	r3, r3, #15
 80048e6:	b25a      	sxtb	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	4313      	orrs	r3, r2
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	70da      	strb	r2, [r3, #3]
			break;
 8004904:	e074      	b.n	80049f0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	899b      	ldrh	r3, [r3, #12]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	b29b      	uxth	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	fbb3 f3f1 	udiv	r3, r3, r1
 800491a:	4413      	add	r3, r2
 800491c:	4619      	mov	r1, r3
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fdbe 	bl	80044a0 <move_window>
 8004924:	4603      	mov	r3, r0
 8004926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004928:	7ffb      	ldrb	r3, [r7, #31]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d15d      	bne.n	80049ea <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	8992      	ldrh	r2, [r2, #12]
 800493c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004940:	fb02 f200 	mul.w	r2, r2, r0
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	440b      	add	r3, r1
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	b292      	uxth	r2, r2
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fb31 	bl	8003fb6 <st_word>
			fs->wflag = 1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2201      	movs	r2, #1
 8004958:	70da      	strb	r2, [r3, #3]
			break;
 800495a:	e049      	b.n	80049f0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	899b      	ldrh	r3, [r3, #12]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	b29b      	uxth	r3, r3
 8004968:	4619      	mov	r1, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004970:	4413      	add	r3, r2
 8004972:	4619      	mov	r1, r3
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff fd93 	bl	80044a0 <move_window>
 800497a:	4603      	mov	r3, r0
 800497c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800497e:	7ffb      	ldrb	r3, [r7, #31]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d134      	bne.n	80049ee <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	8992      	ldrh	r2, [r2, #12]
 8004998:	fbb3 f0f2 	udiv	r0, r3, r2
 800499c:	fb02 f200 	mul.w	r2, r2, r0
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fae3 	bl	8003f70 <ld_dword>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049b0:	4323      	orrs	r3, r4
 80049b2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	8992      	ldrh	r2, [r2, #12]
 80049c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80049c6:	fb02 f200 	mul.w	r2, r2, r0
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	440b      	add	r3, r1
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fb0b 	bl	8003fec <st_dword>
			fs->wflag = 1;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	70da      	strb	r2, [r3, #3]
			break;
 80049dc:	e008      	b.n	80049f0 <put_fat+0x22e>
		}
	}
 80049de:	bf00      	nop
 80049e0:	e006      	b.n	80049f0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049e2:	bf00      	nop
 80049e4:	e004      	b.n	80049f0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049e6:	bf00      	nop
 80049e8:	e002      	b.n	80049f0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049ea:	bf00      	nop
 80049ec:	e000      	b.n	80049f0 <put_fat+0x22e>
			if (res != FR_OK) break;
 80049ee:	bf00      	nop
	return res;
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3724      	adds	r7, #36	; 0x24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd90      	pop	{r4, r7, pc}

080049fa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b088      	sub	sp, #32
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d904      	bls.n	8004a20 <remove_chain+0x26>
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d301      	bcc.n	8004a24 <remove_chain+0x2a>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e04b      	b.n	8004abc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	69b8      	ldr	r0, [r7, #24]
 8004a32:	f7ff fec6 	bl	80047c2 <put_fat>
 8004a36:	4603      	mov	r3, r0
 8004a38:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a3a:	7ffb      	ldrb	r3, [r7, #31]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <remove_chain+0x4a>
 8004a40:	7ffb      	ldrb	r3, [r7, #31]
 8004a42:	e03b      	b.n	8004abc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fde7 	bl	800461a <get_fat>
 8004a4c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d031      	beq.n	8004ab8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <remove_chain+0x64>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e02e      	b.n	8004abc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	d101      	bne.n	8004a6a <remove_chain+0x70>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e028      	b.n	8004abc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	69b8      	ldr	r0, [r7, #24]
 8004a70:	f7ff fea7 	bl	80047c2 <put_fat>
 8004a74:	4603      	mov	r3, r0
 8004a76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a78:	7ffb      	ldrb	r3, [r7, #31]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <remove_chain+0x88>
 8004a7e:	7ffb      	ldrb	r3, [r7, #31]
 8004a80:	e01c      	b.n	8004abc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	3b02      	subs	r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d20b      	bcs.n	8004aa8 <remove_chain+0xae>
			fs->free_clst++;
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	791b      	ldrb	r3, [r3, #4]
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3c6      	bcc.n	8004a44 <remove_chain+0x4a>
 8004ab6:	e000      	b.n	8004aba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ab8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <create_chain+0x2c>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d31b      	bcc.n	8004b28 <create_chain+0x64>
 8004af0:	2301      	movs	r3, #1
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e018      	b.n	8004b28 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fd8e 	bl	800461a <get_fat>
 8004afe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d801      	bhi.n	8004b0a <create_chain+0x46>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e070      	b.n	8004bec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d101      	bne.n	8004b16 <create_chain+0x52>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	e06a      	b.n	8004bec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d201      	bcs.n	8004b24 <create_chain+0x60>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	e063      	b.n	8004bec <create_chain+0x128>
		scl = clst;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d307      	bcc.n	8004b4c <create_chain+0x88>
				ncl = 2;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b40:	69fa      	ldr	r2, [r7, #28]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d901      	bls.n	8004b4c <create_chain+0x88>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e04f      	b.n	8004bec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b4c:	69f9      	ldr	r1, [r7, #28]
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff fd63 	bl	800461a <get_fat>
 8004b54:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00e      	beq.n	8004b7a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d003      	beq.n	8004b6a <create_chain+0xa6>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d101      	bne.n	8004b6e <create_chain+0xaa>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	e03e      	b.n	8004bec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d1da      	bne.n	8004b2c <create_chain+0x68>
 8004b76:	2300      	movs	r3, #0
 8004b78:	e038      	b.n	8004bec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b7a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b80:	69f9      	ldr	r1, [r7, #28]
 8004b82:	6938      	ldr	r0, [r7, #16]
 8004b84:	f7ff fe1d 	bl	80047c2 <put_fat>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <create_chain+0xe2>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d006      	beq.n	8004ba6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	6839      	ldr	r1, [r7, #0]
 8004b9c:	6938      	ldr	r0, [r7, #16]
 8004b9e:	f7ff fe10 	bl	80047c2 <put_fat>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d116      	bne.n	8004bda <create_chain+0x116>
		fs->last_clst = ncl;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	3b02      	subs	r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d804      	bhi.n	8004bca <create_chain+0x106>
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	1e5a      	subs	r2, r3, #1
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	791b      	ldrb	r3, [r3, #4]
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	711a      	strb	r2, [r3, #4]
 8004bd8:	e007      	b.n	8004bea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d102      	bne.n	8004be6 <create_chain+0x122>
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	e000      	b.n	8004be8 <create_chain+0x124>
 8004be6:	2301      	movs	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004bea:	69fb      	ldr	r3, [r7, #28]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	3304      	adds	r3, #4
 8004c0a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	899b      	ldrh	r3, [r3, #12]
 8004c10:	461a      	mov	r2, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	8952      	ldrh	r2, [r2, #10]
 8004c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	613a      	str	r2, [r7, #16]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <clmt_clust+0x42>
 8004c32:	2300      	movs	r3, #0
 8004c34:	e010      	b.n	8004c58 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d307      	bcc.n	8004c4e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c4c:	e7e9      	b.n	8004c22 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c7a:	d204      	bcs.n	8004c86 <dir_sdi+0x22>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c86:	2302      	movs	r3, #2
 8004c88:	e071      	b.n	8004d6e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d106      	bne.n	8004caa <dir_sdi+0x46>
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d902      	bls.n	8004caa <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10c      	bne.n	8004cca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	8912      	ldrh	r2, [r2, #8]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d301      	bcc.n	8004cc0 <dir_sdi+0x5c>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e056      	b.n	8004d6e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	61da      	str	r2, [r3, #28]
 8004cc8:	e02d      	b.n	8004d26 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	895b      	ldrh	r3, [r3, #10]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	899b      	ldrh	r3, [r3, #12]
 8004cd4:	fb03 f302 	mul.w	r3, r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cda:	e019      	b.n	8004d10 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6979      	ldr	r1, [r7, #20]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fc9a 	bl	800461a <get_fat>
 8004ce6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d101      	bne.n	8004cf4 <dir_sdi+0x90>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e03c      	b.n	8004d6e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d904      	bls.n	8004d04 <dir_sdi+0xa0>
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d301      	bcc.n	8004d08 <dir_sdi+0xa4>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e032      	b.n	8004d6e <dir_sdi+0x10a>
			ofs -= csz;
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d2e1      	bcs.n	8004cdc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d18:	6979      	ldr	r1, [r7, #20]
 8004d1a:	6938      	ldr	r0, [r7, #16]
 8004d1c:	f7ff fc5e 	bl	80045dc <clust2sect>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <dir_sdi+0xd4>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e01a      	b.n	8004d6e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	899b      	ldrh	r3, [r3, #12]
 8004d40:	4619      	mov	r1, r3
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d48:	441a      	add	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	899b      	ldrh	r3, [r3, #12]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d60:	fb02 f200 	mul.w	r2, r2, r0
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	18ca      	adds	r2, r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	3320      	adds	r3, #32
 8004d8c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <dir_next+0x28>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d9c:	d301      	bcc.n	8004da2 <dir_next+0x2c>
 8004d9e:	2304      	movs	r3, #4
 8004da0:	e0bb      	b.n	8004f1a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	899b      	ldrh	r3, [r3, #12]
 8004da6:	461a      	mov	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dae:	fb02 f201 	mul.w	r2, r2, r1
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 809d 	bne.w	8004ef4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	8912      	ldrh	r2, [r2, #8]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	f0c0 808d 	bcc.w	8004ef4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	61da      	str	r2, [r3, #28]
 8004de0:	2304      	movs	r3, #4
 8004de2:	e09a      	b.n	8004f1a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	899b      	ldrh	r3, [r3, #12]
 8004de8:	461a      	mov	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	8952      	ldrh	r2, [r2, #10]
 8004df4:	3a01      	subs	r2, #1
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d17b      	bne.n	8004ef4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7ff fc08 	bl	800461a <get_fat>
 8004e0a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d801      	bhi.n	8004e16 <dir_next+0xa0>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e081      	b.n	8004f1a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d101      	bne.n	8004e22 <dir_next+0xac>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07b      	b.n	8004f1a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d359      	bcc.n	8004ee0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	61da      	str	r2, [r3, #28]
 8004e38:	2304      	movs	r3, #4
 8004e3a:	e06e      	b.n	8004f1a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7ff fe3d 	bl	8004ac4 <create_chain>
 8004e4a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <dir_next+0xe0>
 8004e52:	2307      	movs	r3, #7
 8004e54:	e061      	b.n	8004f1a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <dir_next+0xea>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	e05c      	b.n	8004f1a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d101      	bne.n	8004e6c <dir_next+0xf6>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e056      	b.n	8004f1a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7ff fad3 	bl	8004418 <sync_window>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <dir_next+0x106>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e04e      	b.n	8004f1a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	899b      	ldrh	r3, [r3, #12]
 8004e86:	461a      	mov	r2, r3
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f7ff f8fc 	bl	8004086 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fba1 	bl	80045dc <clust2sect>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea0:	e012      	b.n	8004ec8 <dir_next+0x152>
						fs->wflag = 1;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f7ff fab5 	bl	8004418 <sync_window>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <dir_next+0x142>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e030      	b.n	8004f1a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d3e6      	bcc.n	8004ea2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004ee6:	6979      	ldr	r1, [r7, #20]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff fb77 	bl	80045dc <clust2sect>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	899b      	ldrh	r3, [r3, #12]
 8004f04:	461a      	mov	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f0c:	fb02 f200 	mul.w	r2, r2, r0
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	18ca      	adds	r2, r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f32:	2100      	movs	r1, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff fe95 	bl	8004c64 <dir_sdi>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12b      	bne.n	8004f9c <dir_alloc+0x7a>
		n = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff faa6 	bl	80044a0 <move_window>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d11d      	bne.n	8004f9a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2be5      	cmp	r3, #229	; 0xe5
 8004f66:	d004      	beq.n	8004f72 <dir_alloc+0x50>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d107      	bne.n	8004f82 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	3301      	adds	r3, #1
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d102      	bne.n	8004f86 <dir_alloc+0x64>
 8004f80:	e00c      	b.n	8004f9c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f86:	2101      	movs	r1, #1
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fef4 	bl	8004d76 <dir_next>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0d7      	beq.n	8004f48 <dir_alloc+0x26>
 8004f98:	e000      	b.n	8004f9c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004f9a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f9c:	7dfb      	ldrb	r3, [r7, #23]
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d101      	bne.n	8004fa6 <dir_alloc+0x84>
 8004fa2:	2307      	movs	r3, #7
 8004fa4:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	331a      	adds	r3, #26
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fe ffbe 	bl	8003f40 <ld_word>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d109      	bne.n	8004fe4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe ffb3 	bl	8003f40 <ld_word>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	041b      	lsls	r3, r3, #16
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	331a      	adds	r3, #26
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	b292      	uxth	r2, r2
 8005002:	4611      	mov	r1, r2
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe ffd6 	bl	8003fb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b03      	cmp	r3, #3
 8005010:	d109      	bne.n	8005026 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f103 0214 	add.w	r2, r3, #20
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	0c1b      	lsrs	r3, r3, #16
 800501c:	b29b      	uxth	r3, r3
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7fe ffc8 	bl	8003fb6 <st_word>
	}
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	331a      	adds	r3, #26
 800503e:	4618      	mov	r0, r3
 8005040:	f7fe ff7e 	bl	8003f40 <ld_word>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <cmp_lfn+0x1e>
 800504a:	2300      	movs	r3, #0
 800504c:	e059      	b.n	8005102 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005056:	1e5a      	subs	r2, r3, #1
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005064:	2301      	movs	r3, #1
 8005066:	81fb      	strh	r3, [r7, #14]
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	e033      	b.n	80050d6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <cmp_lfn+0xdc>)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4413      	add	r3, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe ff5f 	bl	8003f40 <ld_word>
 8005082:	4603      	mov	r3, r0
 8005084:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005086:	89fb      	ldrh	r3, [r7, #14]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01a      	beq.n	80050c2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2bfe      	cmp	r3, #254	; 0xfe
 8005090:	d812      	bhi.n	80050b8 <cmp_lfn+0x88>
 8005092:	89bb      	ldrh	r3, [r7, #12]
 8005094:	4618      	mov	r0, r3
 8005096:	f002 fc89 	bl	80079ac <ff_wtoupper>
 800509a:	4603      	mov	r3, r0
 800509c:	461c      	mov	r4, r3
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	617a      	str	r2, [r7, #20]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f002 fc7d 	bl	80079ac <ff_wtoupper>
 80050b2:	4603      	mov	r3, r0
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d001      	beq.n	80050bc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80050b8:	2300      	movs	r3, #0
 80050ba:	e022      	b.n	8005102 <cmp_lfn+0xd2>
			}
			wc = uc;
 80050bc:	89bb      	ldrh	r3, [r7, #12]
 80050be:	81fb      	strh	r3, [r7, #14]
 80050c0:	e006      	b.n	80050d0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80050c2:	89bb      	ldrh	r3, [r7, #12]
 80050c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d001      	beq.n	80050d0 <cmp_lfn+0xa0>
 80050cc:	2300      	movs	r3, #0
 80050ce:	e018      	b.n	8005102 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3301      	adds	r3, #1
 80050d4:	613b      	str	r3, [r7, #16]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d9c8      	bls.n	800506e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <cmp_lfn+0xd0>
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <cmp_lfn+0xd0>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <cmp_lfn+0xd0>
 80050fc:	2300      	movs	r3, #0
 80050fe:	e000      	b.n	8005102 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005100:	2301      	movs	r3, #1
}
 8005102:	4618      	mov	r0, r3
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bd90      	pop	{r4, r7, pc}
 800510a:	bf00      	nop
 800510c:	08008a00 	.word	0x08008a00

08005110 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	331a      	adds	r3, #26
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe ff0e 	bl	8003f40 <ld_word>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <pick_lfn+0x1e>
 800512a:	2300      	movs	r3, #0
 800512c:	e04d      	b.n	80051ca <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	1e5a      	subs	r2, r3, #1
 8005138:	4613      	mov	r3, r2
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	4413      	add	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005144:	2301      	movs	r3, #1
 8005146:	81fb      	strh	r3, [r7, #14]
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e028      	b.n	80051a0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800514e:	4a21      	ldr	r2, [pc, #132]	; (80051d4 <pick_lfn+0xc4>)
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4413      	add	r3, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe feef 	bl	8003f40 <ld_word>
 8005162:	4603      	mov	r3, r0
 8005164:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005166:	89fb      	ldrh	r3, [r7, #14]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00f      	beq.n	800518c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2bfe      	cmp	r3, #254	; 0xfe
 8005170:	d901      	bls.n	8005176 <pick_lfn+0x66>
 8005172:	2300      	movs	r3, #0
 8005174:	e029      	b.n	80051ca <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005176:	89bb      	ldrh	r3, [r7, #12]
 8005178:	81fb      	strh	r3, [r7, #14]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	617a      	str	r2, [r7, #20]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	89fa      	ldrh	r2, [r7, #14]
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e006      	b.n	800519a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800518c:	89bb      	ldrh	r3, [r7, #12]
 800518e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005192:	4293      	cmp	r3, r2
 8005194:	d001      	beq.n	800519a <pick_lfn+0x8a>
 8005196:	2300      	movs	r3, #0
 8005198:	e017      	b.n	80051ca <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3301      	adds	r3, #1
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d9d3      	bls.n	800514e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2bfe      	cmp	r3, #254	; 0xfe
 80051b6:	d901      	bls.n	80051bc <pick_lfn+0xac>
 80051b8:	2300      	movs	r3, #0
 80051ba:	e006      	b.n	80051ca <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	2200      	movs	r2, #0
 80051c6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80051c8:	2301      	movs	r3, #1
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	08008a00 	.word	0x08008a00

080051d8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	460b      	mov	r3, r1
 80051e8:	71fb      	strb	r3, [r7, #7]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	330d      	adds	r3, #13
 80051f2:	79ba      	ldrb	r2, [r7, #6]
 80051f4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	330b      	adds	r3, #11
 80051fa:	220f      	movs	r2, #15
 80051fc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	330c      	adds	r3, #12
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	331a      	adds	r3, #26
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f7fe fed2 	bl	8003fb6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	1e5a      	subs	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	82fb      	strh	r3, [r7, #22]
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800522a:	8afb      	ldrh	r3, [r7, #22]
 800522c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <put_lfn+0x6c>
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	61fa      	str	r2, [r7, #28]
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005244:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <put_lfn+0xcc>)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4413      	add	r3, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	8afa      	ldrh	r2, [r7, #22]
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fead 	bl	8003fb6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <put_lfn+0x90>
 8005262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005266:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	3301      	adds	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	d9da      	bls.n	800522a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005274:	8afb      	ldrh	r3, [r7, #22]
 8005276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800527a:	4293      	cmp	r3, r2
 800527c:	d006      	beq.n	800528c <put_lfn+0xb4>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <put_lfn+0xbc>
 800528c:	79fb      	ldrb	r3, [r7, #7]
 800528e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005292:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	79fa      	ldrb	r2, [r7, #7]
 8005298:	701a      	strb	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	3720      	adds	r7, #32
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	08008a00 	.word	0x08008a00

080052a8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08c      	sub	sp, #48	; 0x30
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80052b6:	220b      	movs	r2, #11
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7fe fec2 	bl	8004044 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d92b      	bls.n	800531e <gen_numname+0x76>
		sr = seq;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80052ca:	e022      	b.n	8005312 <gen_numname+0x6a>
			wc = *lfn++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052da:	e017      	b.n	800530c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005a      	lsls	r2, r3, #1
 80052e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80052ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052ec:	085b      	lsrs	r3, r3, #1
 80052ee:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <gen_numname+0x5e>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005300:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005304:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	3301      	adds	r3, #1
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	2b0f      	cmp	r3, #15
 8005310:	d9e4      	bls.n	80052dc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1d8      	bne.n	80052cc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800531e:	2307      	movs	r3, #7
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3330      	adds	r3, #48	; 0x30
 800532e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005336:	2b39      	cmp	r3, #57	; 0x39
 8005338:	d904      	bls.n	8005344 <gen_numname+0x9c>
 800533a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800533e:	3307      	adds	r3, #7
 8005340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	1e5a      	subs	r2, r3, #1
 8005348:	62ba      	str	r2, [r7, #40]	; 0x28
 800534a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800534e:	4413      	add	r3, r2
 8005350:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005354:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1de      	bne.n	8005322 <gen_numname+0x7a>
	ns[i] = '~';
 8005364:	f107 0214 	add.w	r2, r7, #20
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	4413      	add	r3, r2
 800536c:	227e      	movs	r2, #126	; 0x7e
 800536e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005370:	2300      	movs	r3, #0
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
 8005374:	e002      	b.n	800537c <gen_numname+0xd4>
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	3301      	adds	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
 800537c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	429a      	cmp	r2, r3
 8005382:	d205      	bcs.n	8005390 <gen_numname+0xe8>
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	4413      	add	r3, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b20      	cmp	r3, #32
 800538e:	d1f2      	bne.n	8005376 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2b07      	cmp	r3, #7
 8005394:	d808      	bhi.n	80053a8 <gen_numname+0x100>
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	62ba      	str	r2, [r7, #40]	; 0x28
 800539c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80053a0:	4413      	add	r3, r2
 80053a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80053a6:	e000      	b.n	80053aa <gen_numname+0x102>
 80053a8:	2120      	movs	r1, #32
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	627a      	str	r2, [r7, #36]	; 0x24
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4413      	add	r3, r2
 80053b4:	460a      	mov	r2, r1
 80053b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2b07      	cmp	r3, #7
 80053bc:	d9e8      	bls.n	8005390 <gen_numname+0xe8>
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	3730      	adds	r7, #48	; 0x30
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80053d4:	230b      	movs	r3, #11
 80053d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	0852      	lsrs	r2, r2, #1
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	4313      	orrs	r3, r2
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	6079      	str	r1, [r7, #4]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	60bb      	str	r3, [r7, #8]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1ed      	bne.n	80053d8 <sum_sfn+0x10>
	return sum;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b086      	sub	sp, #24
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005414:	2304      	movs	r3, #4
 8005416:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800541e:	23ff      	movs	r3, #255	; 0xff
 8005420:	757b      	strb	r3, [r7, #21]
 8005422:	23ff      	movs	r3, #255	; 0xff
 8005424:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8005426:	e081      	b.n	800552c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	4619      	mov	r1, r3
 800542e:	6938      	ldr	r0, [r7, #16]
 8005430:	f7ff f836 	bl	80044a0 <move_window>
 8005434:	4603      	mov	r3, r0
 8005436:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d17c      	bne.n	8005538 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8005446:	7dbb      	ldrb	r3, [r7, #22]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800544c:	2304      	movs	r3, #4
 800544e:	75fb      	strb	r3, [r7, #23]
 8005450:	e077      	b.n	8005542 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	330b      	adds	r3, #11
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7bfa      	ldrb	r2, [r7, #15]
 8005464:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005466:	7dbb      	ldrb	r3, [r7, #22]
 8005468:	2be5      	cmp	r3, #229	; 0xe5
 800546a:	d00e      	beq.n	800548a <dir_read+0x80>
 800546c:	7dbb      	ldrb	r3, [r7, #22]
 800546e:	2b2e      	cmp	r3, #46	; 0x2e
 8005470:	d00b      	beq.n	800548a <dir_read+0x80>
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	f023 0320 	bic.w	r3, r3, #32
 8005478:	2b08      	cmp	r3, #8
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	4293      	cmp	r3, r2
 8005488:	d002      	beq.n	8005490 <dir_read+0x86>
				ord = 0xFF;
 800548a:	23ff      	movs	r3, #255	; 0xff
 800548c:	757b      	strb	r3, [r7, #21]
 800548e:	e044      	b.n	800551a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d12f      	bne.n	80054f6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005496:	7dbb      	ldrb	r3, [r7, #22]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00d      	beq.n	80054bc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	7b5b      	ldrb	r3, [r3, #13]
 80054a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80054a8:	7dbb      	ldrb	r3, [r7, #22]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	75bb      	strb	r3, [r7, #22]
 80054b0:	7dbb      	ldrb	r3, [r7, #22]
 80054b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80054bc:	7dba      	ldrb	r2, [r7, #22]
 80054be:	7d7b      	ldrb	r3, [r7, #21]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d115      	bne.n	80054f0 <dir_read+0xe6>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	330d      	adds	r3, #13
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	7d3a      	ldrb	r2, [r7, #20]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d10e      	bne.n	80054f0 <dir_read+0xe6>
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	4619      	mov	r1, r3
 80054dc:	4610      	mov	r0, r2
 80054de:	f7ff fe17 	bl	8005110 <pick_lfn>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <dir_read+0xe6>
 80054e8:	7d7b      	ldrb	r3, [r7, #21]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e000      	b.n	80054f2 <dir_read+0xe8>
 80054f0:	23ff      	movs	r3, #255	; 0xff
 80054f2:	757b      	strb	r3, [r7, #21]
 80054f4:	e011      	b.n	800551a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80054f6:	7d7b      	ldrb	r3, [r7, #21]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <dir_read+0x106>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	4618      	mov	r0, r3
 8005502:	f7ff ff61 	bl	80053c8 <sum_sfn>
 8005506:	4603      	mov	r3, r0
 8005508:	461a      	mov	r2, r3
 800550a:	7d3b      	ldrb	r3, [r7, #20]
 800550c:	4293      	cmp	r3, r2
 800550e:	d015      	beq.n	800553c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f04f 32ff 	mov.w	r2, #4294967295
 8005516:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8005518:	e010      	b.n	800553c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800551a:	2100      	movs	r1, #0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff fc2a 	bl	8004d76 <dir_next>
 8005522:	4603      	mov	r3, r0
 8005524:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <dir_read+0x136>
	while (dp->sect) {
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af79 	bne.w	8005428 <dir_read+0x1e>
 8005536:	e004      	b.n	8005542 <dir_read+0x138>
		if (res != FR_OK) break;
 8005538:	bf00      	nop
 800553a:	e002      	b.n	8005542 <dir_read+0x138>
					break;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <dir_read+0x138>
		if (res != FR_OK) break;
 8005540:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <dir_read+0x144>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	61da      	str	r2, [r3, #28]
	return res;
 800554e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fb7b 	bl	8004c64 <dir_sdi>
 800556e:	4603      	mov	r3, r0
 8005570:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <dir_find+0x24>
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	e0a9      	b.n	80056d0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800557c:	23ff      	movs	r3, #255	; 0xff
 800557e:	753b      	strb	r3, [r7, #20]
 8005580:	7d3b      	ldrb	r3, [r7, #20]
 8005582:	757b      	strb	r3, [r7, #21]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4619      	mov	r1, r3
 8005592:	6938      	ldr	r0, [r7, #16]
 8005594:	f7fe ff84 	bl	80044a0 <move_window>
 8005598:	4603      	mov	r3, r0
 800559a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f040 8090 	bne.w	80056c4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80055ac:	7dbb      	ldrb	r3, [r7, #22]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <dir_find+0x60>
 80055b2:	2304      	movs	r3, #4
 80055b4:	75fb      	strb	r3, [r7, #23]
 80055b6:	e08a      	b.n	80056ce <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	330b      	adds	r3, #11
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055c4:	73fb      	strb	r3, [r7, #15]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80055cc:	7dbb      	ldrb	r3, [r7, #22]
 80055ce:	2be5      	cmp	r3, #229	; 0xe5
 80055d0:	d007      	beq.n	80055e2 <dir_find+0x8a>
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <dir_find+0x98>
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d006      	beq.n	80055f0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80055e2:	23ff      	movs	r3, #255	; 0xff
 80055e4:	757b      	strb	r3, [r7, #21]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
 80055ee:	e05e      	b.n	80056ae <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b0f      	cmp	r3, #15
 80055f4:	d136      	bne.n	8005664 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d154      	bne.n	80056ae <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005604:	7dbb      	ldrb	r3, [r7, #22]
 8005606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	7b5b      	ldrb	r3, [r3, #13]
 8005614:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005616:	7dbb      	ldrb	r3, [r7, #22]
 8005618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561c:	75bb      	strb	r3, [r7, #22]
 800561e:	7dbb      	ldrb	r3, [r7, #22]
 8005620:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800562a:	7dba      	ldrb	r2, [r7, #22]
 800562c:	7d7b      	ldrb	r3, [r7, #21]
 800562e:	429a      	cmp	r2, r3
 8005630:	d115      	bne.n	800565e <dir_find+0x106>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	330d      	adds	r3, #13
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	7d3a      	ldrb	r2, [r7, #20]
 800563c:	429a      	cmp	r2, r3
 800563e:	d10e      	bne.n	800565e <dir_find+0x106>
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7ff fcf0 	bl	8005030 <cmp_lfn>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <dir_find+0x106>
 8005656:	7d7b      	ldrb	r3, [r7, #21]
 8005658:	3b01      	subs	r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	e000      	b.n	8005660 <dir_find+0x108>
 800565e:	23ff      	movs	r3, #255	; 0xff
 8005660:	757b      	strb	r3, [r7, #21]
 8005662:	e024      	b.n	80056ae <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005664:	7d7b      	ldrb	r3, [r7, #21]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <dir_find+0x126>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff feaa 	bl	80053c8 <sum_sfn>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	7d3b      	ldrb	r3, [r7, #20]
 800567a:	4293      	cmp	r3, r2
 800567c:	d024      	beq.n	80056c8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <dir_find+0x14a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a18      	ldr	r0, [r3, #32]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3324      	adds	r3, #36	; 0x24
 8005694:	220b      	movs	r2, #11
 8005696:	4619      	mov	r1, r3
 8005698:	f7fe fd10 	bl	80040bc <mem_cmp>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d014      	beq.n	80056cc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80056a2:	23ff      	movs	r3, #255	; 0xff
 80056a4:	757b      	strb	r3, [r7, #21]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80056ae:	2100      	movs	r1, #0
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fb60 	bl	8004d76 <dir_next>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f43f af65 	beq.w	800558c <dir_find+0x34>
 80056c2:	e004      	b.n	80056ce <dir_find+0x176>
		if (res != FR_OK) break;
 80056c4:	bf00      	nop
 80056c6:	e002      	b.n	80056ce <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80056c8:	bf00      	nop
 80056ca:	e000      	b.n	80056ce <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80056cc:	bf00      	nop

	return res;
 80056ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08c      	sub	sp, #48	; 0x30
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <dir_register+0x20>
 80056f4:	2306      	movs	r3, #6
 80056f6:	e0e0      	b.n	80058ba <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80056f8:	2300      	movs	r3, #0
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	e002      	b.n	8005704 <dir_register+0x2c>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	3301      	adds	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	4413      	add	r3, r2
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f4      	bne.n	80056fe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	220c      	movs	r2, #12
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fc8f 	bl	8004044 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d032      	beq.n	8005796 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2240      	movs	r2, #64	; 0x40
 8005734:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005738:	2301      	movs	r3, #1
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
 800573c:	e016      	b.n	800576c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	f107 010c 	add.w	r1, r7, #12
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	f7ff fdab 	bl	80052a8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff00 	bl	8005558 <dir_find>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800575e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d106      	bne.n	8005774 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	3301      	adds	r3, #1
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	2b63      	cmp	r3, #99	; 0x63
 8005770:	d9e5      	bls.n	800573e <dir_register+0x66>
 8005772:	e000      	b.n	8005776 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005774:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d101      	bne.n	8005780 <dir_register+0xa8>
 800577c:	2307      	movs	r3, #7
 800577e:	e09c      	b.n	80058ba <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005784:	2b04      	cmp	r3, #4
 8005786:	d002      	beq.n	800578e <dir_register+0xb6>
 8005788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800578c:	e095      	b.n	80058ba <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800578e:	7dfa      	ldrb	r2, [r7, #23]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005796:	7dfb      	ldrb	r3, [r7, #23]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <dir_register+0xd8>
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	330c      	adds	r3, #12
 80057a4:	4a47      	ldr	r2, [pc, #284]	; (80058c4 <dir_register+0x1ec>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	089b      	lsrs	r3, r3, #2
 80057ac:	3301      	adds	r3, #1
 80057ae:	e000      	b.n	80057b2 <dir_register+0xda>
 80057b0:	2301      	movs	r3, #1
 80057b2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fbb3 	bl	8004f22 <dir_alloc>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80057c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d148      	bne.n	800585c <dir_register+0x184>
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d042      	beq.n	800585c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	015b      	lsls	r3, r3, #5
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fa3e 	bl	8004c64 <dir_sdi>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80057ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d132      	bne.n	800585c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3324      	adds	r3, #36	; 0x24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fde4 	bl	80053c8 <sum_sfn>
 8005800:	4603      	mov	r3, r0
 8005802:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	4619      	mov	r1, r3
 800580a:	69f8      	ldr	r0, [r7, #28]
 800580c:	f7fe fe48 	bl	80044a0 <move_window>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800581a:	2b00      	cmp	r3, #0
 800581c:	d11d      	bne.n	800585a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	6918      	ldr	r0, [r3, #16]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a19      	ldr	r1, [r3, #32]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	b2da      	uxtb	r2, r3
 800582a:	7efb      	ldrb	r3, [r7, #27]
 800582c:	f7ff fcd4 	bl	80051d8 <put_lfn>
				fs->wflag = 1;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	2201      	movs	r2, #1
 8005834:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005836:	2100      	movs	r1, #0
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff fa9c 	bl	8004d76 <dir_next>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <dir_register+0x184>
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	3b01      	subs	r3, #1
 8005850:	623b      	str	r3, [r7, #32]
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1d5      	bne.n	8005804 <dir_register+0x12c>
 8005858:	e000      	b.n	800585c <dir_register+0x184>
				if (res != FR_OK) break;
 800585a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800585c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005860:	2b00      	cmp	r3, #0
 8005862:	d128      	bne.n	80058b6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	4619      	mov	r1, r3
 800586a:	69f8      	ldr	r0, [r7, #28]
 800586c:	f7fe fe18 	bl	80044a0 <move_window>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11b      	bne.n	80058b6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	2220      	movs	r2, #32
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe fbfd 	bl	8004086 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a18      	ldr	r0, [r3, #32]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	220b      	movs	r2, #11
 8005896:	4619      	mov	r1, r3
 8005898:	f7fe fbd4 	bl	8004044 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	330c      	adds	r3, #12
 80058a8:	f002 0218 	and.w	r2, r2, #24
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2201      	movs	r2, #1
 80058b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80058b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3730      	adds	r7, #48	; 0x30
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	4ec4ec4f 	.word	0x4ec4ec4f

080058c8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d007      	beq.n	80058f6 <dir_remove+0x2e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff f9b9 	bl	8004c64 <dir_sdi>
 80058f2:	4603      	mov	r3, r0
 80058f4:	e000      	b.n	80058f8 <dir_remove+0x30>
 80058f6:	2300      	movs	r3, #0
 80058f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d128      	bne.n	8005952 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4619      	mov	r1, r3
 8005906:	6938      	ldr	r0, [r7, #16]
 8005908:	f7fe fdca 	bl	80044a0 <move_window>
 800590c:	4603      	mov	r3, r0
 800590e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d115      	bne.n	8005942 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	22e5      	movs	r2, #229	; 0xe5
 800591c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2201      	movs	r2, #1
 8005922:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90b      	bls.n	8005946 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800592e:	2100      	movs	r1, #0
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fa20 	bl	8004d76 <dir_next>
 8005936:	4603      	mov	r3, r0
 8005938:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0df      	beq.n	8005900 <dir_remove+0x38>
 8005940:	e002      	b.n	8005948 <dir_remove+0x80>
			if (res != FR_OK) break;
 8005942:	bf00      	nop
 8005944:	e000      	b.n	8005948 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8005946:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d101      	bne.n	8005952 <dir_remove+0x8a>
 800594e:	2302      	movs	r3, #2
 8005950:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8005952:	7dfb      	ldrb	r3, [r7, #23]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	61ba      	str	r2, [r7, #24]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4413      	add	r3, r2
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800598a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800598c:	2b1f      	cmp	r3, #31
 800598e:	d940      	bls.n	8005a12 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005992:	2b2f      	cmp	r3, #47	; 0x2f
 8005994:	d006      	beq.n	80059a4 <create_name+0x48>
 8005996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005998:	2b5c      	cmp	r3, #92	; 0x5c
 800599a:	d110      	bne.n	80059be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800599c:	e002      	b.n	80059a4 <create_name+0x48>
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	3301      	adds	r3, #1
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	4413      	add	r3, r2
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b2f      	cmp	r3, #47	; 0x2f
 80059ae:	d0f6      	beq.n	800599e <create_name+0x42>
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4413      	add	r3, r2
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b5c      	cmp	r3, #92	; 0x5c
 80059ba:	d0f0      	beq.n	800599e <create_name+0x42>
			break;
 80059bc:	e02a      	b.n	8005a14 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2bfe      	cmp	r3, #254	; 0xfe
 80059c2:	d901      	bls.n	80059c8 <create_name+0x6c>
 80059c4:	2306      	movs	r3, #6
 80059c6:	e177      	b.n	8005cb8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80059c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80059ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d0:	2101      	movs	r1, #1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 ffae 	bl	8007934 <ff_convert>
 80059d8:	4603      	mov	r3, r0
 80059da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80059dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <create_name+0x8a>
 80059e2:	2306      	movs	r3, #6
 80059e4:	e168      	b.n	8005cb8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80059e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ea:	d809      	bhi.n	8005a00 <create_name+0xa4>
 80059ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ee:	4619      	mov	r1, r3
 80059f0:	48b3      	ldr	r0, [pc, #716]	; (8005cc0 <create_name+0x364>)
 80059f2:	f7fe fb8a 	bl	800410a <chk_chr>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <create_name+0xa4>
 80059fc:	2306      	movs	r3, #6
 80059fe:	e15b      	b.n	8005cb8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	617a      	str	r2, [r7, #20]
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005a10:	e7b4      	b.n	800597c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005a12:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	441a      	add	r2, r3
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a20:	2b1f      	cmp	r3, #31
 8005a22:	d801      	bhi.n	8005a28 <create_name+0xcc>
 8005a24:	2304      	movs	r3, #4
 8005a26:	e000      	b.n	8005a2a <create_name+0xce>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005a2e:	e011      	b.n	8005a54 <create_name+0xf8>
		w = lfn[di - 1];
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005a36:	3b01      	subs	r3, #1
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d002      	beq.n	8005a4e <create_name+0xf2>
 8005a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a4c:	d106      	bne.n	8005a5c <create_name+0x100>
		di--;
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1ea      	bne.n	8005a30 <create_name+0xd4>
 8005a5a:	e000      	b.n	8005a5e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005a5c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <create_name+0x118>
 8005a70:	2306      	movs	r3, #6
 8005a72:	e121      	b.n	8005cb8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3324      	adds	r3, #36	; 0x24
 8005a78:	220b      	movs	r2, #11
 8005a7a:	2120      	movs	r1, #32
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fb02 	bl	8004086 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e002      	b.n	8005a8e <create_name+0x132>
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d0f5      	beq.n	8005a88 <create_name+0x12c>
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa8:	d0ee      	beq.n	8005a88 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d009      	beq.n	8005ac4 <create_name+0x168>
 8005ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ab4:	f043 0303 	orr.w	r3, r3, #3
 8005ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005abc:	e002      	b.n	8005ac4 <create_name+0x168>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <create_name+0x182>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	2b2e      	cmp	r3, #46	; 0x2e
 8005adc:	d1ef      	bne.n	8005abe <create_name+0x162>

	i = b = 0; ni = 8;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	623b      	str	r3, [r7, #32]
 8005ae8:	2308      	movs	r3, #8
 8005aea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	61ba      	str	r2, [r7, #24]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8090 	beq.w	8005c24 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d006      	beq.n	8005b18 <create_name+0x1bc>
 8005b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b0e:	d10a      	bne.n	8005b26 <create_name+0x1ca>
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d006      	beq.n	8005b26 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b1c:	f043 0303 	orr.w	r3, r3, #3
 8005b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b24:	e07d      	b.n	8005c22 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d203      	bcs.n	8005b36 <create_name+0x1da>
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d123      	bne.n	8005b7e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2b0b      	cmp	r3, #11
 8005b3a:	d106      	bne.n	8005b4a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b40:	f043 0303 	orr.w	r3, r3, #3
 8005b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b48:	e06f      	b.n	8005c2a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d005      	beq.n	8005b5e <create_name+0x202>
 8005b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b56:	f043 0303 	orr.w	r3, r3, #3
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d860      	bhi.n	8005c28 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	230b      	movs	r3, #11
 8005b70:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b7c:	e051      	b.n	8005c22 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b80:	2b7f      	cmp	r3, #127	; 0x7f
 8005b82:	d914      	bls.n	8005bae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005b84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fed3 	bl	8007934 <ff_convert>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <create_name+0x246>
 8005b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b9a:	3b80      	subs	r3, #128	; 0x80
 8005b9c:	4a49      	ldr	r2, [pc, #292]	; (8005cc4 <create_name+0x368>)
 8005b9e:	5cd3      	ldrb	r3, [r2, r3]
 8005ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ba6:	f043 0302 	orr.w	r3, r3, #2
 8005baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <create_name+0x268>
 8005bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4843      	ldr	r0, [pc, #268]	; (8005cc8 <create_name+0x36c>)
 8005bba:	f7fe faa6 	bl	800410a <chk_chr>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005bc4:	235f      	movs	r3, #95	; 0x5f
 8005bc6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bcc:	f043 0303 	orr.w	r3, r3, #3
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005bd4:	e01b      	b.n	8005c0e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d909      	bls.n	8005bf0 <create_name+0x294>
 8005bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bde:	2b5a      	cmp	r3, #90	; 0x5a
 8005be0:	d806      	bhi.n	8005bf0 <create_name+0x294>
					b |= 2;
 8005be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005be6:	f043 0302 	orr.w	r3, r3, #2
 8005bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005bee:	e00e      	b.n	8005c0e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bf2:	2b60      	cmp	r3, #96	; 0x60
 8005bf4:	d90b      	bls.n	8005c0e <create_name+0x2b2>
 8005bf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bf8:	2b7a      	cmp	r3, #122	; 0x7a
 8005bfa:	d808      	bhi.n	8005c0e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005bfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c0a:	3b20      	subs	r3, #32
 8005c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	623a      	str	r2, [r7, #32]
 8005c14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c16:	b2d1      	uxtb	r1, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	460a      	mov	r2, r1
 8005c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005c22:	e763      	b.n	8005aec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005c24:	bf00      	nop
 8005c26:	e000      	b.n	8005c2a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8005c28:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c30:	2be5      	cmp	r3, #229	; 0xe5
 8005c32:	d103      	bne.n	8005c3c <create_name+0x2e0>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2205      	movs	r2, #5
 8005c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d104      	bne.n	8005c4c <create_name+0x2f0>
 8005c42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d005      	beq.n	8005c64 <create_name+0x308>
 8005c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d105      	bne.n	8005c70 <create_name+0x314>
 8005c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c68:	f043 0302 	orr.w	r3, r3, #2
 8005c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d117      	bne.n	8005cac <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005c7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <create_name+0x338>
 8005c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005c94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c98:	f003 030c 	and.w	r3, r3, #12
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d105      	bne.n	8005cac <create_name+0x350>
 8005ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ca4:	f043 0308 	orr.w	r3, r3, #8
 8005ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005cb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005cb6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	; 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	08008920 	.word	0x08008920
 8005cc4:	08008980 	.word	0x08008980
 8005cc8:	0800892c 	.word	0x0800892c

08005ccc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ce0:	e002      	b.n	8005ce8 <follow_path+0x1c>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	603b      	str	r3, [r7, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b2f      	cmp	r3, #47	; 0x2f
 8005cee:	d0f8      	beq.n	8005ce2 <follow_path+0x16>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b5c      	cmp	r3, #92	; 0x5c
 8005cf6:	d0f4      	beq.n	8005ce2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b1f      	cmp	r3, #31
 8005d04:	d80a      	bhi.n	8005d1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fe ffa7 	bl	8004c64 <dir_sdi>
 8005d16:	4603      	mov	r3, r0
 8005d18:	75fb      	strb	r3, [r7, #23]
 8005d1a:	e048      	b.n	8005dae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	4619      	mov	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7ff fe1b 	bl	800595c <create_name>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d139      	bne.n	8005da4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fc11 	bl	8005558 <dir_find>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d12c      	bne.n	8005da8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d127      	bne.n	8005da8 <follow_path+0xdc>
 8005d58:	2305      	movs	r3, #5
 8005d5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005d5c:	e024      	b.n	8005da8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005d5e:	7afb      	ldrb	r3, [r7, #11]
 8005d60:	f003 0304 	and.w	r3, r3, #4
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d121      	bne.n	8005dac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	799b      	ldrb	r3, [r3, #6]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d102      	bne.n	8005d7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005d74:	2305      	movs	r3, #5
 8005d76:	75fb      	strb	r3, [r7, #23]
 8005d78:	e019      	b.n	8005dae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	8992      	ldrh	r2, [r2, #12]
 8005d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d8c:	fb02 f200 	mul.w	r2, r2, r0
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	440b      	add	r3, r1
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff f90a 	bl	8004fb0 <ld_clust>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005da2:	e7bb      	b.n	8005d1c <follow_path+0x50>
			if (res != FR_OK) break;
 8005da4:	bf00      	nop
 8005da6:	e002      	b.n	8005dae <follow_path+0xe2>
				break;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005dac:	bf00      	nop
			}
		}
	}

	return res;
 8005dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d031      	beq.n	8005e32 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	617b      	str	r3, [r7, #20]
 8005dd4:	e002      	b.n	8005ddc <get_ldnumber+0x24>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b1f      	cmp	r3, #31
 8005de2:	d903      	bls.n	8005dec <get_ldnumber+0x34>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b3a      	cmp	r3, #58	; 0x3a
 8005dea:	d1f4      	bne.n	8005dd6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b3a      	cmp	r3, #58	; 0x3a
 8005df2:	d11c      	bne.n	8005e2e <get_ldnumber+0x76>
			tp = *path;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	60fa      	str	r2, [r7, #12]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	3b30      	subs	r3, #48	; 0x30
 8005e04:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b09      	cmp	r3, #9
 8005e0a:	d80e      	bhi.n	8005e2a <get_ldnumber+0x72>
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d10a      	bne.n	8005e2a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <get_ldnumber+0x72>
					vol = (int)i;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	3301      	adds	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	e002      	b.n	8005e34 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005e2e:	2300      	movs	r3, #0
 8005e30:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005e32:	693b      	ldr	r3, [r7, #16]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	70da      	strb	r2, [r3, #3]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f04f 32ff 	mov.w	r2, #4294967295
 8005e56:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fe fb20 	bl	80044a0 <move_window>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <check_fs+0x2a>
 8005e66:	2304      	movs	r3, #4
 8005e68:	e038      	b.n	8005edc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3338      	adds	r3, #56	; 0x38
 8005e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe f864 	bl	8003f40 <ld_word>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <check_fs+0x48>
 8005e84:	2303      	movs	r3, #3
 8005e86:	e029      	b.n	8005edc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e8e:	2be9      	cmp	r3, #233	; 0xe9
 8005e90:	d009      	beq.n	8005ea6 <check_fs+0x66>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e98:	2beb      	cmp	r3, #235	; 0xeb
 8005e9a:	d11e      	bne.n	8005eda <check_fs+0x9a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ea2:	2b90      	cmp	r3, #144	; 0x90
 8005ea4:	d119      	bne.n	8005eda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	3338      	adds	r3, #56	; 0x38
 8005eaa:	3336      	adds	r3, #54	; 0x36
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fe f85f 	bl	8003f70 <ld_dword>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <check_fs+0xa4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d101      	bne.n	8005ec2 <check_fs+0x82>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e00c      	b.n	8005edc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3338      	adds	r3, #56	; 0x38
 8005ec6:	3352      	adds	r3, #82	; 0x52
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe f851 	bl	8003f70 <ld_dword>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a05      	ldr	r2, [pc, #20]	; (8005ee8 <check_fs+0xa8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <check_fs+0x9a>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005eda:	2302      	movs	r3, #2
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	00544146 	.word	0x00544146
 8005ee8:	33544146 	.word	0x33544146

08005eec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b096      	sub	sp, #88	; 0x58
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff ff59 	bl	8005db8 <get_ldnumber>
 8005f06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da01      	bge.n	8005f12 <find_volume+0x26>
 8005f0e:	230b      	movs	r3, #11
 8005f10:	e268      	b.n	80063e4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005f12:	4ab0      	ldr	r2, [pc, #704]	; (80061d4 <find_volume+0x2e8>)
 8005f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <find_volume+0x3a>
 8005f22:	230c      	movs	r3, #12
 8005f24:	e25e      	b.n	80063e4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	f023 0301 	bic.w	r3, r3, #1
 8005f32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01a      	beq.n	8005f72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fd ff5f 	bl	8003e04 <disk_status>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d007      	beq.n	8005f6e <find_volume+0x82>
 8005f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e23a      	b.n	80063e4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e238      	b.n	80063e4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fd ff57 	bl	8003e38 <disk_initialize>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005f90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e221      	b.n	80063e4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <find_volume+0xca>
 8005fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005faa:	f003 0304 	and.w	r3, r3, #4
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005fb2:	230a      	movs	r3, #10
 8005fb4:	e216      	b.n	80063e4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	7858      	ldrb	r0, [r3, #1]
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2102      	movs	r1, #2
 8005fc2:	f7fd ff9f 	bl	8003f04 <disk_ioctl>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <find_volume+0xe4>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e209      	b.n	80063e4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd2:	899b      	ldrh	r3, [r3, #12]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d80d      	bhi.n	8005ff6 <find_volume+0x10a>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	899b      	ldrh	r3, [r3, #12]
 8005fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe2:	d308      	bcc.n	8005ff6 <find_volume+0x10a>
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	899b      	ldrh	r3, [r3, #12]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	899b      	ldrh	r3, [r3, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <find_volume+0x10e>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e1f4      	b.n	80063e4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005ffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006002:	f7ff ff1d 	bl	8005e40 <check_fs>
 8006006:	4603      	mov	r3, r0
 8006008:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800600c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006010:	2b02      	cmp	r3, #2
 8006012:	d14b      	bne.n	80060ac <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006014:	2300      	movs	r3, #0
 8006016:	643b      	str	r3, [r7, #64]	; 0x40
 8006018:	e01f      	b.n	800605a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006028:	4413      	add	r3, r2
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	3304      	adds	r3, #4
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d006      	beq.n	8006044 <find_volume+0x158>
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	3308      	adds	r3, #8
 800603a:	4618      	mov	r0, r3
 800603c:	f7fd ff98 	bl	8003f70 <ld_dword>
 8006040:	4602      	mov	r2, r0
 8006042:	e000      	b.n	8006046 <find_volume+0x15a>
 8006044:	2200      	movs	r2, #0
 8006046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800604e:	440b      	add	r3, r1
 8006050:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006056:	3301      	adds	r3, #1
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
 800605a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605c:	2b03      	cmp	r3, #3
 800605e:	d9dc      	bls.n	800601a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006060:	2300      	movs	r3, #0
 8006062:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <find_volume+0x184>
 800606a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606c:	3b01      	subs	r3, #1
 800606e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006078:	4413      	add	r3, r2
 800607a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800607e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <find_volume+0x1a6>
 8006086:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800608a:	f7ff fed9 	bl	8005e40 <check_fs>
 800608e:	4603      	mov	r3, r0
 8006090:	e000      	b.n	8006094 <find_volume+0x1a8>
 8006092:	2303      	movs	r3, #3
 8006094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800609c:	2b01      	cmp	r3, #1
 800609e:	d905      	bls.n	80060ac <find_volume+0x1c0>
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	3301      	adds	r3, #1
 80060a4:	643b      	str	r3, [r7, #64]	; 0x40
 80060a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d9e1      	bls.n	8006070 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80060ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d101      	bne.n	80060b8 <find_volume+0x1cc>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e195      	b.n	80063e4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80060b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d901      	bls.n	80060c4 <find_volume+0x1d8>
 80060c0:	230d      	movs	r3, #13
 80060c2:	e18f      	b.n	80063e4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80060c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c6:	3338      	adds	r3, #56	; 0x38
 80060c8:	330b      	adds	r3, #11
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fd ff38 	bl	8003f40 <ld_word>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	899b      	ldrh	r3, [r3, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <find_volume+0x1f4>
 80060dc:	230d      	movs	r3, #13
 80060de:	e181      	b.n	80063e4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	3338      	adds	r3, #56	; 0x38
 80060e4:	3316      	adds	r3, #22
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fd ff2a 	bl	8003f40 <ld_word>
 80060ec:	4603      	mov	r3, r0
 80060ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80060f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <find_volume+0x218>
 80060f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f8:	3338      	adds	r3, #56	; 0x38
 80060fa:	3324      	adds	r3, #36	; 0x24
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fd ff37 	bl	8003f70 <ld_dword>
 8006102:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006108:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006112:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	789b      	ldrb	r3, [r3, #2]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d005      	beq.n	8006128 <find_volume+0x23c>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	789b      	ldrb	r3, [r3, #2]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d001      	beq.n	8006128 <find_volume+0x23c>
 8006124:	230d      	movs	r3, #13
 8006126:	e15d      	b.n	80063e4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	789b      	ldrb	r3, [r3, #2]
 800612c:	461a      	mov	r2, r3
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	fb02 f303 	mul.w	r3, r2, r3
 8006134:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800613c:	b29a      	uxth	r2, r3
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	895b      	ldrh	r3, [r3, #10]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <find_volume+0x270>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	895b      	ldrh	r3, [r3, #10]
 800614e:	461a      	mov	r2, r3
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	895b      	ldrh	r3, [r3, #10]
 8006154:	3b01      	subs	r3, #1
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <find_volume+0x274>
 800615c:	230d      	movs	r3, #13
 800615e:	e141      	b.n	80063e4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	3311      	adds	r3, #17
 8006166:	4618      	mov	r0, r3
 8006168:	f7fd feea 	bl	8003f40 <ld_word>
 800616c:	4603      	mov	r3, r0
 800616e:	461a      	mov	r2, r3
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006176:	891b      	ldrh	r3, [r3, #8]
 8006178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800617a:	8992      	ldrh	r2, [r2, #12]
 800617c:	0952      	lsrs	r2, r2, #5
 800617e:	b292      	uxth	r2, r2
 8006180:	fbb3 f1f2 	udiv	r1, r3, r2
 8006184:	fb02 f201 	mul.w	r2, r2, r1
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <find_volume+0x2a8>
 8006190:	230d      	movs	r3, #13
 8006192:	e127      	b.n	80063e4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	3338      	adds	r3, #56	; 0x38
 8006198:	3313      	adds	r3, #19
 800619a:	4618      	mov	r0, r3
 800619c:	f7fd fed0 	bl	8003f40 <ld_word>
 80061a0:	4603      	mov	r3, r0
 80061a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80061a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <find_volume+0x2cc>
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	3338      	adds	r3, #56	; 0x38
 80061ae:	3320      	adds	r3, #32
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fd fedd 	bl	8003f70 <ld_dword>
 80061b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	3338      	adds	r3, #56	; 0x38
 80061bc:	330e      	adds	r3, #14
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fd febe 	bl	8003f40 <ld_word>
 80061c4:	4603      	mov	r3, r0
 80061c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80061c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <find_volume+0x2ec>
 80061ce:	230d      	movs	r3, #13
 80061d0:	e108      	b.n	80063e4 <find_volume+0x4f8>
 80061d2:	bf00      	nop
 80061d4:	200000ac 	.word	0x200000ac

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80061d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061dc:	4413      	add	r3, r2
 80061de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e0:	8911      	ldrh	r1, [r2, #8]
 80061e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e4:	8992      	ldrh	r2, [r2, #12]
 80061e6:	0952      	lsrs	r2, r2, #5
 80061e8:	b292      	uxth	r2, r2
 80061ea:	fbb1 f2f2 	udiv	r2, r1, r2
 80061ee:	b292      	uxth	r2, r2
 80061f0:	4413      	add	r3, r2
 80061f2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80061f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d201      	bcs.n	8006200 <find_volume+0x314>
 80061fc:	230d      	movs	r3, #13
 80061fe:	e0f1      	b.n	80063e4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006208:	8952      	ldrh	r2, [r2, #10]
 800620a:	fbb3 f3f2 	udiv	r3, r3, r2
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <find_volume+0x32e>
 8006216:	230d      	movs	r3, #13
 8006218:	e0e4      	b.n	80063e4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800621a:	2303      	movs	r3, #3
 800621c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006226:	4293      	cmp	r3, r2
 8006228:	d802      	bhi.n	8006230 <find_volume+0x344>
 800622a:	2302      	movs	r3, #2
 800622c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006236:	4293      	cmp	r3, r2
 8006238:	d802      	bhi.n	8006240 <find_volume+0x354>
 800623a:	2301      	movs	r3, #1
 800623c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	1c9a      	adds	r2, r3, #2
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800624c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800624e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006252:	441a      	add	r2, r3
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006258:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	441a      	add	r2, r3
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006266:	2b03      	cmp	r3, #3
 8006268:	d11e      	bne.n	80062a8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	3338      	adds	r3, #56	; 0x38
 800626e:	332a      	adds	r3, #42	; 0x2a
 8006270:	4618      	mov	r0, r3
 8006272:	f7fd fe65 	bl	8003f40 <ld_word>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <find_volume+0x394>
 800627c:	230d      	movs	r3, #13
 800627e:	e0b1      	b.n	80063e4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006282:	891b      	ldrh	r3, [r3, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <find_volume+0x3a0>
 8006288:	230d      	movs	r3, #13
 800628a:	e0ab      	b.n	80063e4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	3338      	adds	r3, #56	; 0x38
 8006290:	332c      	adds	r3, #44	; 0x2c
 8006292:	4618      	mov	r0, r3
 8006294:	f7fd fe6c 	bl	8003f70 <ld_dword>
 8006298:	4602      	mov	r2, r0
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	647b      	str	r3, [r7, #68]	; 0x44
 80062a6:	e01f      	b.n	80062e8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80062a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062aa:	891b      	ldrh	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <find_volume+0x3c8>
 80062b0:	230d      	movs	r3, #13
 80062b2:	e097      	b.n	80063e4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ba:	441a      	add	r2, r3
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80062c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d103      	bne.n	80062d0 <find_volume+0x3e4>
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	e00a      	b.n	80062e6 <find_volume+0x3fa>
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	4613      	mov	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	4413      	add	r3, r2
 80062da:	085a      	lsrs	r2, r3, #1
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80062e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	899b      	ldrh	r3, [r3, #12]
 80062f0:	4619      	mov	r1, r3
 80062f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f4:	440b      	add	r3, r1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062fa:	8989      	ldrh	r1, [r1, #12]
 80062fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006300:	429a      	cmp	r2, r3
 8006302:	d201      	bcs.n	8006308 <find_volume+0x41c>
 8006304:	230d      	movs	r3, #13
 8006306:	e06d      	b.n	80063e4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	f04f 32ff 	mov.w	r2, #4294967295
 800630e:	619a      	str	r2, [r3, #24]
 8006310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006316:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800631e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006322:	2b03      	cmp	r3, #3
 8006324:	d149      	bne.n	80063ba <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	3338      	adds	r3, #56	; 0x38
 800632a:	3330      	adds	r3, #48	; 0x30
 800632c:	4618      	mov	r0, r3
 800632e:	f7fd fe07 	bl	8003f40 <ld_word>
 8006332:	4603      	mov	r3, r0
 8006334:	2b01      	cmp	r3, #1
 8006336:	d140      	bne.n	80063ba <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633a:	3301      	adds	r3, #1
 800633c:	4619      	mov	r1, r3
 800633e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006340:	f7fe f8ae 	bl	80044a0 <move_window>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d137      	bne.n	80063ba <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	2200      	movs	r2, #0
 800634e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	3338      	adds	r3, #56	; 0x38
 8006354:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006358:	4618      	mov	r0, r3
 800635a:	f7fd fdf1 	bl	8003f40 <ld_word>
 800635e:	4603      	mov	r3, r0
 8006360:	461a      	mov	r2, r3
 8006362:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006366:	429a      	cmp	r2, r3
 8006368:	d127      	bne.n	80063ba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	3338      	adds	r3, #56	; 0x38
 800636e:	4618      	mov	r0, r3
 8006370:	f7fd fdfe 	bl	8003f70 <ld_dword>
 8006374:	4603      	mov	r3, r0
 8006376:	4a1d      	ldr	r2, [pc, #116]	; (80063ec <find_volume+0x500>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d11e      	bne.n	80063ba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800637c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637e:	3338      	adds	r3, #56	; 0x38
 8006380:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006384:	4618      	mov	r0, r3
 8006386:	f7fd fdf3 	bl	8003f70 <ld_dword>
 800638a:	4603      	mov	r3, r0
 800638c:	4a18      	ldr	r2, [pc, #96]	; (80063f0 <find_volume+0x504>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d113      	bne.n	80063ba <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	3338      	adds	r3, #56	; 0x38
 8006396:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800639a:	4618      	mov	r0, r3
 800639c:	f7fd fde8 	bl	8003f70 <ld_dword>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	3338      	adds	r3, #56	; 0x38
 80063aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd fdde 	bl	8003f70 <ld_dword>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80063c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80063c2:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <find_volume+0x508>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <find_volume+0x508>)
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <find_volume+0x508>)
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d4:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	4a07      	ldr	r2, [pc, #28]	; (80063f8 <find_volume+0x50c>)
 80063da:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80063dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063de:	f7fd fff7 	bl	80043d0 <clear_lock>
#endif
	return FR_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3758      	adds	r7, #88	; 0x58
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	41615252 	.word	0x41615252
 80063f0:	61417272 	.word	0x61417272
 80063f4:	200000b0 	.word	0x200000b0
 80063f8:	200000d4 	.word	0x200000d4

080063fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006406:	2309      	movs	r3, #9
 8006408:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01c      	beq.n	800644a <validate+0x4e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d018      	beq.n	800644a <validate+0x4e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <validate+0x4e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	889a      	ldrh	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	88db      	ldrh	r3, [r3, #6]
 800642c:	429a      	cmp	r2, r3
 800642e:	d10c      	bne.n	800644a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd fce4 	bl	8003e04 <disk_status>
 800643c:	4603      	mov	r3, r0
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <validate+0x4e>
			res = FR_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <validate+0x5a>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	e000      	b.n	8006458 <validate+0x5c>
 8006456:	2300      	movs	r3, #0
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	6013      	str	r3, [r2, #0]
	return res;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800647a:	f107 0310 	add.w	r3, r7, #16
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fc9a 	bl	8005db8 <get_ldnumber>
 8006484:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	2b00      	cmp	r3, #0
 800648a:	da01      	bge.n	8006490 <f_mount+0x28>
 800648c:	230b      	movs	r3, #11
 800648e:	e02b      	b.n	80064e8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006490:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <f_mount+0x88>)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80064a0:	69b8      	ldr	r0, [r7, #24]
 80064a2:	f7fd ff95 	bl	80043d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2200      	movs	r2, #0
 80064aa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	490d      	ldr	r1, [pc, #52]	; (80064f0 <f_mount+0x88>)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <f_mount+0x66>
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d001      	beq.n	80064d2 <f_mount+0x6a>
 80064ce:	2300      	movs	r3, #0
 80064d0:	e00a      	b.n	80064e8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80064d2:	f107 010c 	add.w	r1, r7, #12
 80064d6:	f107 0308 	add.w	r3, r7, #8
 80064da:	2200      	movs	r2, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fd05 	bl	8005eec <find_volume>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200000ac 	.word	0x200000ac

080064f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b09a      	sub	sp, #104	; 0x68
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <f_open+0x18>
 8006508:	2309      	movs	r3, #9
 800650a:	e1bb      	b.n	8006884 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006512:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	f107 0114 	add.w	r1, r7, #20
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fce4 	bl	8005eec <find_volume>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800652a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 819f 	bne.w	8006872 <f_open+0x37e>
		dj.obj.fs = fs;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	f107 0318 	add.w	r3, r7, #24
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fbc3 	bl	8005ccc <follow_path>
 8006546:	4603      	mov	r3, r0
 8006548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800654c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11a      	bne.n	800658a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006554:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006558:	b25b      	sxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	da03      	bge.n	8006566 <f_open+0x72>
				res = FR_INVALID_NAME;
 800655e:	2306      	movs	r3, #6
 8006560:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006564:	e011      	b.n	800658a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006566:	79fb      	ldrb	r3, [r7, #7]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	f107 0318 	add.w	r3, r7, #24
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fd fdde 	bl	8004140 <chk_lock>
 8006584:	4603      	mov	r3, r0
 8006586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	f003 031c 	and.w	r3, r3, #28
 8006590:	2b00      	cmp	r3, #0
 8006592:	d07f      	beq.n	8006694 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006594:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800659c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d10e      	bne.n	80065c2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80065a4:	f7fd fe28 	bl	80041f8 <enq_lock>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d006      	beq.n	80065bc <f_open+0xc8>
 80065ae:	f107 0318 	add.w	r3, r7, #24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff f890 	bl	80056d8 <dir_register>
 80065b8:	4603      	mov	r3, r0
 80065ba:	e000      	b.n	80065be <f_open+0xca>
 80065bc:	2312      	movs	r3, #18
 80065be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	f043 0308 	orr.w	r3, r3, #8
 80065c8:	71fb      	strb	r3, [r7, #7]
 80065ca:	e010      	b.n	80065ee <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80065cc:	7fbb      	ldrb	r3, [r7, #30]
 80065ce:	f003 0311 	and.w	r3, r3, #17
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <f_open+0xea>
					res = FR_DENIED;
 80065d6:	2307      	movs	r3, #7
 80065d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80065dc:	e007      	b.n	80065ee <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80065de:	79fb      	ldrb	r3, [r7, #7]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <f_open+0xfa>
 80065e8:	2308      	movs	r3, #8
 80065ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80065ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d168      	bne.n	80066c8 <f_open+0x1d4>
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d063      	beq.n	80066c8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006600:	f7fd fb9e 	bl	8003d40 <get_fattime>
 8006604:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	330e      	adds	r3, #14
 800660a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd fced 	bl	8003fec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	3316      	adds	r3, #22
 8006616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006618:	4618      	mov	r0, r3
 800661a:	f7fd fce7 	bl	8003fec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	330b      	adds	r3, #11
 8006622:	2220      	movs	r2, #32
 8006624:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fcbf 	bl	8004fb0 <ld_clust>
 8006632:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006638:	2200      	movs	r2, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fcd7 	bl	8004fee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	331c      	adds	r3, #28
 8006644:	2100      	movs	r1, #0
 8006646:	4618      	mov	r0, r3
 8006648:	f7fd fcd0 	bl	8003fec <st_dword>
					fs->wflag = 1;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2201      	movs	r2, #1
 8006650:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	2b00      	cmp	r3, #0
 8006656:	d037      	beq.n	80066c8 <f_open+0x1d4>
						dw = fs->winsect;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800665e:	f107 0318 	add.w	r3, r7, #24
 8006662:	2200      	movs	r2, #0
 8006664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe f9c7 	bl	80049fa <remove_chain>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006676:	2b00      	cmp	r3, #0
 8006678:	d126      	bne.n	80066c8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd ff0e 	bl	80044a0 <move_window>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800668e:	3a01      	subs	r2, #1
 8006690:	615a      	str	r2, [r3, #20]
 8006692:	e019      	b.n	80066c8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006694:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006698:	2b00      	cmp	r3, #0
 800669a:	d115      	bne.n	80066c8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800669c:	7fbb      	ldrb	r3, [r7, #30]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <f_open+0x1ba>
					res = FR_NO_FILE;
 80066a6:	2304      	movs	r3, #4
 80066a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80066ac:	e00c      	b.n	80066c8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80066ae:	79fb      	ldrb	r3, [r7, #7]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <f_open+0x1d4>
 80066b8:	7fbb      	ldrb	r3, [r7, #30]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <f_open+0x1d4>
						res = FR_DENIED;
 80066c2:	2307      	movs	r3, #7
 80066c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80066c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d128      	bne.n	8006722 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d003      	beq.n	80066e2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80066ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bf14      	ite	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	2300      	moveq	r3, #0
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	f107 0318 	add.w	r3, r7, #24
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f7fd fd97 	bl	800423c <inc_lock>
 800670e:	4602      	mov	r2, r0
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <f_open+0x22e>
 800671c:	2302      	movs	r3, #2
 800671e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006722:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006726:	2b00      	cmp	r3, #0
 8006728:	f040 80a3 	bne.w	8006872 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f7fe fc3c 	bl	8004fb0 <ld_clust>
 8006738:	4602      	mov	r2, r0
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	331c      	adds	r3, #28
 8006742:	4618      	mov	r0, r3
 8006744:	f7fd fc14 	bl	8003f70 <ld_dword>
 8006748:	4602      	mov	r2, r0
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	88da      	ldrh	r2, [r3, #6]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	79fa      	ldrb	r2, [r7, #7]
 8006766:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3330      	adds	r3, #48	; 0x30
 800677e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f7fd fc7e 	bl	8004086 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d06e      	beq.n	8006872 <f_open+0x37e>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d06a      	beq.n	8006872 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	895b      	ldrh	r3, [r3, #10]
 80067a8:	461a      	mov	r2, r3
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	899b      	ldrh	r3, [r3, #12]
 80067ae:	fb03 f302 	mul.w	r3, r3, r2
 80067b2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c0:	e016      	b.n	80067f0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fd ff27 	bl	800461a <get_fat>
 80067cc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80067ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d802      	bhi.n	80067da <f_open+0x2e6>
 80067d4:	2302      	movs	r3, #2
 80067d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80067da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d102      	bne.n	80067e8 <f_open+0x2f4>
 80067e2:	2301      	movs	r3, #1
 80067e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80067e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d103      	bne.n	8006800 <f_open+0x30c>
 80067f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d8e0      	bhi.n	80067c2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006804:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800680a:	2b00      	cmp	r3, #0
 800680c:	d131      	bne.n	8006872 <f_open+0x37e>
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	899b      	ldrh	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006816:	fbb3 f1f2 	udiv	r1, r3, r2
 800681a:	fb02 f201 	mul.w	r2, r2, r1
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d026      	beq.n	8006872 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006828:	4618      	mov	r0, r3
 800682a:	f7fd fed7 	bl	80045dc <clust2sect>
 800682e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d103      	bne.n	800683e <f_open+0x34a>
						res = FR_INT_ERR;
 8006836:	2302      	movs	r3, #2
 8006838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800683c:	e019      	b.n	8006872 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	899b      	ldrh	r3, [r3, #12]
 8006842:	461a      	mov	r2, r3
 8006844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006846:	fbb3 f2f2 	udiv	r2, r3, r2
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	7858      	ldrb	r0, [r3, #1]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	2301      	movs	r3, #1
 8006862:	f7fd fb0f 	bl	8003e84 <disk_read>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <f_open+0x37e>
 800686c:	2301      	movs	r3, #1
 800686e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006872:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <f_open+0x38c>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006880:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006884:	4618      	mov	r0, r3
 8006886:	3768      	adds	r7, #104	; 0x68
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f107 0214 	add.w	r2, r7, #20
 80068aa:	4611      	mov	r1, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fda5 	bl	80063fc <validate>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <f_read+0x44>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	7d5b      	ldrb	r3, [r3, #21]
 80068c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80068c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <f_read+0x4a>
 80068d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80068d4:	e135      	b.n	8006b42 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	7d1b      	ldrb	r3, [r3, #20]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <f_read+0x5a>
 80068e2:	2307      	movs	r3, #7
 80068e4:	e12d      	b.n	8006b42 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	f240 811e 	bls.w	8006b38 <f_read+0x2ac>
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006900:	e11a      	b.n	8006b38 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	8992      	ldrh	r2, [r2, #12]
 800690a:	fbb3 f1f2 	udiv	r1, r3, r2
 800690e:	fb02 f201 	mul.w	r2, r2, r1
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 80d5 	bne.w	8006ac4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	8992      	ldrh	r2, [r2, #12]
 8006922:	fbb3 f3f2 	udiv	r3, r3, r2
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	8952      	ldrh	r2, [r2, #10]
 800692a:	3a01      	subs	r2, #1
 800692c:	4013      	ands	r3, r2
 800692e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d12f      	bne.n	8006996 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	633b      	str	r3, [r7, #48]	; 0x30
 8006944:	e013      	b.n	800696e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	4619      	mov	r1, r3
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f7fe f94d 	bl	8004bf4 <clmt_clust>
 800695a:	6338      	str	r0, [r7, #48]	; 0x30
 800695c:	e007      	b.n	800696e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	4619      	mov	r1, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f7fd fe57 	bl	800461a <get_fat>
 800696c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	2b01      	cmp	r3, #1
 8006972:	d804      	bhi.n	800697e <f_read+0xf2>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2202      	movs	r2, #2
 8006978:	755a      	strb	r2, [r3, #21]
 800697a:	2302      	movs	r3, #2
 800697c:	e0e1      	b.n	8006b42 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d104      	bne.n	8006990 <f_read+0x104>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	755a      	strb	r2, [r3, #21]
 800698c:	2301      	movs	r3, #1
 800698e:	e0d8      	b.n	8006b42 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006994:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	4619      	mov	r1, r3
 800699e:	4610      	mov	r0, r2
 80069a0:	f7fd fe1c 	bl	80045dc <clust2sect>
 80069a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d104      	bne.n	80069b6 <f_read+0x12a>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2202      	movs	r2, #2
 80069b0:	755a      	strb	r2, [r3, #21]
 80069b2:	2302      	movs	r3, #2
 80069b4:	e0c5      	b.n	8006b42 <f_read+0x2b6>
			sect += csect;
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	899b      	ldrh	r3, [r3, #12]
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d041      	beq.n	8006a56 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	4413      	add	r3, r2
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	8952      	ldrh	r2, [r2, #10]
 80069dc:	4293      	cmp	r3, r2
 80069de:	d905      	bls.n	80069ec <f_read+0x160>
					cc = fs->csize - csect;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	895b      	ldrh	r3, [r3, #10]
 80069e4:	461a      	mov	r2, r3
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	7858      	ldrb	r0, [r3, #1]
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069f6:	f7fd fa45 	bl	8003e84 <disk_read>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <f_read+0x17e>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	755a      	strb	r2, [r3, #21]
 8006a06:	2301      	movs	r3, #1
 8006a08:	e09b      	b.n	8006b42 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	7d1b      	ldrb	r3, [r3, #20]
 8006a0e:	b25b      	sxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	da18      	bge.n	8006a46 <f_read+0x1ba>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d911      	bls.n	8006a46 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1a      	ldr	r2, [r3, #32]
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	8992      	ldrh	r2, [r2, #12]
 8006a2e:	fb02 f303 	mul.w	r3, r2, r3
 8006a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a34:	18d0      	adds	r0, r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	899b      	ldrh	r3, [r3, #12]
 8006a40:	461a      	mov	r2, r3
 8006a42:	f7fd faff 	bl	8004044 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	899b      	ldrh	r3, [r3, #12]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	fb02 f303 	mul.w	r3, r2, r3
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006a54:	e05c      	b.n	8006b10 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d02e      	beq.n	8006abe <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	7d1b      	ldrb	r3, [r3, #20]
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	da18      	bge.n	8006a9c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	7858      	ldrb	r0, [r3, #1]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a1a      	ldr	r2, [r3, #32]
 8006a78:	2301      	movs	r3, #1
 8006a7a:	f7fd fa23 	bl	8003ec4 <disk_write>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d004      	beq.n	8006a8e <f_read+0x202>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	755a      	strb	r2, [r3, #21]
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e059      	b.n	8006b42 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	7d1b      	ldrb	r3, [r3, #20]
 8006a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	7858      	ldrb	r0, [r3, #1]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	f7fd f9eb 	bl	8003e84 <disk_read>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d004      	beq.n	8006abe <f_read+0x232>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	755a      	strb	r2, [r3, #21]
 8006aba:	2301      	movs	r3, #1
 8006abc:	e041      	b.n	8006b42 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	899b      	ldrh	r3, [r3, #12]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	8992      	ldrh	r2, [r2, #12]
 8006ad2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad6:	fb02 f201 	mul.w	r2, r2, r1
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	1ac3      	subs	r3, r0, r3
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d901      	bls.n	8006aec <f_read+0x260>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	8992      	ldrh	r2, [r2, #12]
 8006afa:	fbb3 f0f2 	udiv	r0, r3, r2
 8006afe:	fb02 f200 	mul.w	r2, r2, r0
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	440b      	add	r3, r1
 8006b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b0c:	f7fd fa9a 	bl	8004044 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	4413      	add	r3, r2
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	441a      	add	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	619a      	str	r2, [r3, #24]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	441a      	add	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f aee1 	bne.w	8006902 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3738      	adds	r7, #56	; 0x38
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b08c      	sub	sp, #48	; 0x30
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
 8006b56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f107 0210 	add.w	r2, r7, #16
 8006b68:	4611      	mov	r1, r2
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff fc46 	bl	80063fc <validate>
 8006b70:	4603      	mov	r3, r0
 8006b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d107      	bne.n	8006b8e <f_write+0x44>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	7d5b      	ldrb	r3, [r3, #21]
 8006b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <f_write+0x4a>
 8006b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006b92:	e16a      	b.n	8006e6a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	7d1b      	ldrb	r3, [r3, #20]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <f_write+0x5a>
 8006ba0:	2307      	movs	r3, #7
 8006ba2:	e162      	b.n	8006e6a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	441a      	add	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	f080 814c 	bcs.w	8006e4e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006bbe:	e146      	b.n	8006e4e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	8992      	ldrh	r2, [r2, #12]
 8006bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bcc:	fb02 f201 	mul.w	r2, r2, r1
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 80f1 	bne.w	8006dba <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	8992      	ldrh	r2, [r2, #12]
 8006be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	8952      	ldrh	r2, [r2, #10]
 8006be8:	3a01      	subs	r2, #1
 8006bea:	4013      	ands	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d143      	bne.n	8006c7c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10c      	bne.n	8006c16 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11a      	bne.n	8006c3e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fd ff59 	bl	8004ac4 <create_chain>
 8006c12:	62b8      	str	r0, [r7, #40]	; 0x28
 8006c14:	e013      	b.n	8006c3e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	4619      	mov	r1, r3
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7fd ffe5 	bl	8004bf4 <clmt_clust>
 8006c2a:	62b8      	str	r0, [r7, #40]	; 0x28
 8006c2c:	e007      	b.n	8006c3e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7fd ff44 	bl	8004ac4 <create_chain>
 8006c3c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8109 	beq.w	8006e58 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d104      	bne.n	8006c56 <f_write+0x10c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	755a      	strb	r2, [r3, #21]
 8006c52:	2302      	movs	r3, #2
 8006c54:	e109      	b.n	8006e6a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5c:	d104      	bne.n	8006c68 <f_write+0x11e>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	755a      	strb	r2, [r3, #21]
 8006c64:	2301      	movs	r3, #1
 8006c66:	e100      	b.n	8006e6a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c6c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <f_write+0x132>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c7a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	7d1b      	ldrb	r3, [r3, #20]
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da18      	bge.n	8006cb8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	7858      	ldrb	r0, [r3, #1]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1a      	ldr	r2, [r3, #32]
 8006c94:	2301      	movs	r3, #1
 8006c96:	f7fd f915 	bl	8003ec4 <disk_write>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <f_write+0x160>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	755a      	strb	r2, [r3, #21]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0df      	b.n	8006e6a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	7d1b      	ldrb	r3, [r3, #20]
 8006cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fd fc8b 	bl	80045dc <clust2sect>
 8006cc6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <f_write+0x18e>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	755a      	strb	r2, [r3, #21]
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e0c8      	b.n	8006e6a <f_write+0x320>
			sect += csect;
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	4413      	add	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	899b      	ldrh	r3, [r3, #12]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d043      	beq.n	8006d7c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	8952      	ldrh	r2, [r2, #10]
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d905      	bls.n	8006d0e <f_write+0x1c4>
					cc = fs->csize - csect;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	895b      	ldrh	r3, [r3, #10]
 8006d06:	461a      	mov	r2, r3
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	7858      	ldrb	r0, [r3, #1]
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	69f9      	ldr	r1, [r7, #28]
 8006d18:	f7fd f8d4 	bl	8003ec4 <disk_write>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <f_write+0x1e2>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	755a      	strb	r2, [r3, #21]
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e09e      	b.n	8006e6a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1a      	ldr	r2, [r3, #32]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	6a3a      	ldr	r2, [r7, #32]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d918      	bls.n	8006d6c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a1a      	ldr	r2, [r3, #32]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	8992      	ldrh	r2, [r2, #12]
 8006d4c:	fb02 f303 	mul.w	r3, r2, r3
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	18d1      	adds	r1, r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	899b      	ldrh	r3, [r3, #12]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f7fd f973 	bl	8004044 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	7d1b      	ldrb	r3, [r3, #20]
 8006d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	899b      	ldrh	r3, [r3, #12]
 8006d70:	461a      	mov	r2, r3
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006d7a:	e04b      	b.n	8006e14 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d016      	beq.n	8006db4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d210      	bcs.n	8006db4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	7858      	ldrb	r0, [r3, #1]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	f7fd f870 	bl	8003e84 <disk_read>
 8006da4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d004      	beq.n	8006db4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	755a      	strb	r2, [r3, #21]
 8006db0:	2301      	movs	r3, #1
 8006db2:	e05a      	b.n	8006e6a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	899b      	ldrh	r3, [r3, #12]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	8992      	ldrh	r2, [r2, #12]
 8006dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dcc:	fb02 f201 	mul.w	r2, r2, r1
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	1ac3      	subs	r3, r0, r3
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d901      	bls.n	8006de2 <f_write+0x298>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	8992      	ldrh	r2, [r2, #12]
 8006df0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006df4:	fb02 f200 	mul.w	r2, r2, r0
 8006df8:	1a9b      	subs	r3, r3, r2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dfe:	69f9      	ldr	r1, [r7, #28]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fd f91f 	bl	8004044 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	7d1b      	ldrb	r3, [r3, #20]
 8006e0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	4413      	add	r3, r2
 8006e1a:	61fb      	str	r3, [r7, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	441a      	add	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	619a      	str	r2, [r3, #24]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bf38      	it	cc
 8006e34:	461a      	movcc	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	441a      	add	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f aeb5 	bne.w	8006bc0 <f_write+0x76>
 8006e56:	e000      	b.n	8006e5a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006e58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	7d1b      	ldrb	r3, [r3, #20]
 8006e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3730      	adds	r7, #48	; 0x30
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b086      	sub	sp, #24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f107 0208 	add.w	r2, r7, #8
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7ff faba 	bl	80063fc <validate>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d168      	bne.n	8006f64 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7d1b      	ldrb	r3, [r3, #20]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d062      	beq.n	8006f64 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7d1b      	ldrb	r3, [r3, #20]
 8006ea2:	b25b      	sxtb	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	da15      	bge.n	8006ed4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	7858      	ldrb	r0, [r3, #1]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1a      	ldr	r2, [r3, #32]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f7fd f804 	bl	8003ec4 <disk_write>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <f_sync+0x54>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e04f      	b.n	8006f66 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7d1b      	ldrb	r3, [r3, #20]
 8006eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006ed4:	f7fc ff34 	bl	8003d40 <get_fattime>
 8006ed8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f7fd fadc 	bl	80044a0 <move_window>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d138      	bne.n	8006f64 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	330b      	adds	r3, #11
 8006efc:	781a      	ldrb	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	330b      	adds	r3, #11
 8006f02:	f042 0220 	orr.w	r2, r2, #32
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	461a      	mov	r2, r3
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	f7fe f86a 	bl	8004fee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f103 021c 	add.w	r2, r3, #28
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f7fd f860 	bl	8003fec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3316      	adds	r3, #22
 8006f30:	6939      	ldr	r1, [r7, #16]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7fd f85a 	bl	8003fec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3312      	adds	r3, #18
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fd f839 	bl	8003fb6 <st_word>
					fs->wflag = 1;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2201      	movs	r2, #1
 8006f48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd fad5 	bl	80044fc <sync_fs>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	7d1b      	ldrb	r3, [r3, #20]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff ff7b 	bl	8006e72 <f_sync>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d118      	bne.n	8006fb8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f107 0208 	add.w	r2, r7, #8
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7ff fa34 	bl	80063fc <validate>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10c      	bne.n	8006fb8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7fd f9d8 	bl	8004358 <dec_lock>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b090      	sub	sp, #64	; 0x40
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f107 0208 	add.w	r2, r7, #8
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff fa11 	bl	80063fc <validate>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006fe0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d103      	bne.n	8006ff0 <f_lseek+0x2e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7d5b      	ldrb	r3, [r3, #21]
 8006fec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <f_lseek+0x3c>
 8006ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ffc:	e201      	b.n	8007402 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80d9 	beq.w	80071ba <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d15a      	bne.n	80070c6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	627a      	str	r2, [r7, #36]	; 0x24
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	2302      	movs	r3, #2
 8007022:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	2b00      	cmp	r3, #0
 800702e:	d03a      	beq.n	80070a6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	2300      	movs	r3, #0
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	3302      	adds	r3, #2
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	60fb      	str	r3, [r7, #12]
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	3301      	adds	r3, #1
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800704c:	4618      	mov	r0, r3
 800704e:	f7fd fae4 	bl	800461a <get_fat>
 8007052:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	2b01      	cmp	r3, #1
 8007058:	d804      	bhi.n	8007064 <f_lseek+0xa2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2202      	movs	r2, #2
 800705e:	755a      	strb	r2, [r3, #21]
 8007060:	2302      	movs	r3, #2
 8007062:	e1ce      	b.n	8007402 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706a:	d104      	bne.n	8007076 <f_lseek+0xb4>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	755a      	strb	r2, [r3, #21]
 8007072:	2301      	movs	r3, #1
 8007074:	e1c5      	b.n	8007402 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707c:	429a      	cmp	r2, r3
 800707e:	d0de      	beq.n	800703e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	429a      	cmp	r2, r3
 8007086:	d809      	bhi.n	800709c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	1d1a      	adds	r2, r3, #4
 800708c:	627a      	str	r2, [r7, #36]	; 0x24
 800708e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	1d1a      	adds	r2, r3, #4
 8007096:	627a      	str	r2, [r7, #36]	; 0x24
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d3c4      	bcc.n	8007030 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ac:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80070ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d803      	bhi.n	80070be <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e19f      	b.n	80073fe <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80070be:	2311      	movs	r3, #17
 80070c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80070c4:	e19b      	b.n	80073fe <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d902      	bls.n	80070d6 <f_lseek+0x114>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 818d 	beq.w	80073fe <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fd fd82 	bl	8004bf4 <clmt_clust>
 80070f0:	4602      	mov	r2, r0
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7fd fa6c 	bl	80045dc <clust2sect>
 8007104:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <f_lseek+0x154>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	755a      	strb	r2, [r3, #21]
 8007112:	2302      	movs	r3, #2
 8007114:	e175      	b.n	8007402 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	3b01      	subs	r3, #1
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	8992      	ldrh	r2, [r2, #12]
 800711e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	8952      	ldrh	r2, [r2, #10]
 8007126:	3a01      	subs	r2, #1
 8007128:	4013      	ands	r3, r2
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	4413      	add	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	8992      	ldrh	r2, [r2, #12]
 8007138:	fbb3 f1f2 	udiv	r1, r3, r2
 800713c:	fb02 f201 	mul.w	r2, r2, r1
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 815b 	beq.w	80073fe <f_lseek+0x43c>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	429a      	cmp	r2, r3
 8007150:	f000 8155 	beq.w	80073fe <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	7d1b      	ldrb	r3, [r3, #20]
 8007158:	b25b      	sxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	da18      	bge.n	8007190 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	7858      	ldrb	r0, [r3, #1]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a1a      	ldr	r2, [r3, #32]
 800716c:	2301      	movs	r3, #1
 800716e:	f7fc fea9 	bl	8003ec4 <disk_write>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <f_lseek+0x1c0>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	755a      	strb	r2, [r3, #21]
 800717e:	2301      	movs	r3, #1
 8007180:	e13f      	b.n	8007402 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7d1b      	ldrb	r3, [r3, #20]
 8007186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800718a:	b2da      	uxtb	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	7858      	ldrb	r0, [r3, #1]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800719a:	2301      	movs	r3, #1
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	f7fc fe71 	bl	8003e84 <disk_read>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <f_lseek+0x1f0>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	755a      	strb	r2, [r3, #21]
 80071ae:	2301      	movs	r3, #1
 80071b0:	e127      	b.n	8007402 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	621a      	str	r2, [r3, #32]
 80071b8:	e121      	b.n	80073fe <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d908      	bls.n	80071d6 <f_lseek+0x214>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7d1b      	ldrb	r3, [r3, #20]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d102      	bne.n	80071d6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	637b      	str	r3, [r7, #52]	; 0x34
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80b5 	beq.w	8007358 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	895b      	ldrh	r3, [r3, #10]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	899b      	ldrh	r3, [r3, #12]
 80071f8:	fb03 f302 	mul.w	r3, r3, r2
 80071fc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01b      	beq.n	800723c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	1e5a      	subs	r2, r3, #1
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	fbb2 f2f3 	udiv	r2, r2, r3
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	1e59      	subs	r1, r3, #1
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007218:	429a      	cmp	r2, r3
 800721a:	d30f      	bcc.n	800723c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	1e5a      	subs	r2, r3, #1
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	425b      	negs	r3, r3
 8007224:	401a      	ands	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	63bb      	str	r3, [r7, #56]	; 0x38
 800723a:	e022      	b.n	8007282 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d119      	bne.n	800727c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2100      	movs	r1, #0
 800724c:	4618      	mov	r0, r3
 800724e:	f7fd fc39 	bl	8004ac4 <create_chain>
 8007252:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	2b01      	cmp	r3, #1
 8007258:	d104      	bne.n	8007264 <f_lseek+0x2a2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	755a      	strb	r2, [r3, #21]
 8007260:	2302      	movs	r3, #2
 8007262:	e0ce      	b.n	8007402 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d104      	bne.n	8007276 <f_lseek+0x2b4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	755a      	strb	r2, [r3, #21]
 8007272:	2301      	movs	r3, #1
 8007274:	e0c5      	b.n	8007402 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800727a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007280:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007284:	2b00      	cmp	r3, #0
 8007286:	d067      	beq.n	8007358 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007288:	e03a      	b.n	8007300 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	603b      	str	r3, [r7, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	441a      	add	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	7d1b      	ldrb	r3, [r3, #20]
 80072a2:	f003 0302 	and.w	r3, r3, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fd fc08 	bl	8004ac4 <create_chain>
 80072b4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d108      	bne.n	80072ce <f_lseek+0x30c>
							ofs = 0; break;
 80072bc:	2300      	movs	r3, #0
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	e022      	b.n	8007308 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fd f9a7 	bl	800461a <get_fat>
 80072cc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d104      	bne.n	80072e0 <f_lseek+0x31e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	755a      	strb	r2, [r3, #21]
 80072dc:	2301      	movs	r3, #1
 80072de:	e090      	b.n	8007402 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d904      	bls.n	80072f0 <f_lseek+0x32e>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d304      	bcc.n	80072fa <f_lseek+0x338>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	755a      	strb	r2, [r3, #21]
 80072f6:	2302      	movs	r3, #2
 80072f8:	e083      	b.n	8007402 <f_lseek+0x440>
					fp->clust = clst;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fe:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	429a      	cmp	r2, r3
 8007306:	d8c0      	bhi.n	800728a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	441a      	add	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	899b      	ldrh	r3, [r3, #12]
 8007318:	461a      	mov	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007320:	fb02 f201 	mul.w	r2, r2, r1
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d016      	beq.n	8007358 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd f954 	bl	80045dc <clust2sect>
 8007334:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	2b00      	cmp	r3, #0
 800733a:	d104      	bne.n	8007346 <f_lseek+0x384>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	755a      	strb	r2, [r3, #21]
 8007342:	2302      	movs	r3, #2
 8007344:	e05d      	b.n	8007402 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	899b      	ldrh	r3, [r3, #12]
 800734a:	461a      	mov	r2, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007354:	4413      	add	r3, r2
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	429a      	cmp	r2, r3
 8007362:	d90a      	bls.n	800737a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699a      	ldr	r2, [r3, #24]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7d1b      	ldrb	r3, [r3, #20]
 8007370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007374:	b2da      	uxtb	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	8992      	ldrh	r2, [r2, #12]
 8007382:	fbb3 f1f2 	udiv	r1, r3, r2
 8007386:	fb02 f201 	mul.w	r2, r2, r1
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d036      	beq.n	80073fe <f_lseek+0x43c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007396:	429a      	cmp	r2, r3
 8007398:	d031      	beq.n	80073fe <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7d1b      	ldrb	r3, [r3, #20]
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	da18      	bge.n	80073d6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	7858      	ldrb	r0, [r3, #1]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	2301      	movs	r3, #1
 80073b4:	f7fc fd86 	bl	8003ec4 <disk_write>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <f_lseek+0x406>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	755a      	strb	r2, [r3, #21]
 80073c4:	2301      	movs	r3, #1
 80073c6:	e01c      	b.n	8007402 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	7d1b      	ldrb	r3, [r3, #20]
 80073cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d0:	b2da      	uxtb	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	7858      	ldrb	r0, [r3, #1]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073e0:	2301      	movs	r3, #1
 80073e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e4:	f7fc fd4e 	bl	8003e84 <disk_read>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <f_lseek+0x436>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	755a      	strb	r2, [r3, #21]
 80073f4:	2301      	movs	r3, #1
 80073f6:	e004      	b.n	8007402 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80073fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007402:	4618      	mov	r0, r3
 8007404:	3740      	adds	r7, #64	; 0x40
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b092      	sub	sp, #72	; 0x48
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007416:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800741a:	f107 030c 	add.w	r3, r7, #12
 800741e:	2200      	movs	r2, #0
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fd63 	bl	8005eec <find_volume>
 8007426:	4603      	mov	r3, r0
 8007428:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800742c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 8099 	bne.w	8007568 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	3b02      	subs	r3, #2
 8007446:	429a      	cmp	r2, r3
 8007448:	d804      	bhi.n	8007454 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	699a      	ldr	r2, [r3, #24]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e089      	b.n	8007568 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d128      	bne.n	80074b2 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007460:	2302      	movs	r3, #2
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007468:	f107 0314 	add.w	r3, r7, #20
 800746c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800746e:	4618      	mov	r0, r3
 8007470:	f7fd f8d3 	bl	800461a <get_fat>
 8007474:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d103      	bne.n	8007486 <f_getfree+0x7c>
 800747e:	2301      	movs	r3, #1
 8007480:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007484:	e063      	b.n	800754e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d103      	bne.n	8007494 <f_getfree+0x8a>
 800748c:	2302      	movs	r3, #2
 800748e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007492:	e05c      	b.n	800754e <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d102      	bne.n	80074a0 <f_getfree+0x96>
 800749a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749c:	3301      	adds	r3, #1
 800749e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80074a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a2:	3301      	adds	r3, #1
 80074a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3db      	bcc.n	8007468 <f_getfree+0x5e>
 80074b0:	e04d      	b.n	800754e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
 80074c2:	2300      	movs	r3, #0
 80074c4:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80074c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d113      	bne.n	80074f4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80074cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	63ba      	str	r2, [r7, #56]	; 0x38
 80074d4:	4619      	mov	r1, r3
 80074d6:	f7fc ffe3 	bl	80044a0 <move_window>
 80074da:	4603      	mov	r3, r0
 80074dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80074e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d131      	bne.n	800754c <f_getfree+0x142>
							p = fs->win;
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	3338      	adds	r3, #56	; 0x38
 80074ec:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	899b      	ldrh	r3, [r3, #12]
 80074f2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d10f      	bne.n	800751c <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80074fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074fe:	f7fc fd1f 	bl	8003f40 <ld_word>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d102      	bne.n	800750e <f_getfree+0x104>
 8007508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750a:	3301      	adds	r3, #1
 800750c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	3302      	adds	r3, #2
 8007512:	633b      	str	r3, [r7, #48]	; 0x30
 8007514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007516:	3b02      	subs	r3, #2
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
 800751a:	e010      	b.n	800753e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800751c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800751e:	f7fc fd27 	bl	8003f70 <ld_dword>
 8007522:	4603      	mov	r3, r0
 8007524:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <f_getfree+0x128>
 800752c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752e:	3301      	adds	r3, #1
 8007530:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	3304      	adds	r3, #4
 8007536:	633b      	str	r3, [r7, #48]	; 0x30
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	3b04      	subs	r3, #4
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	3b01      	subs	r3, #1
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1bd      	bne.n	80074c6 <f_getfree+0xbc>
 800754a:	e000      	b.n	800754e <f_getfree+0x144>
							if (res != FR_OK) break;
 800754c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007552:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007558:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	791a      	ldrb	r2, [r3, #4]
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f042 0201 	orr.w	r2, r2, #1
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007568:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800756c:	4618      	mov	r0, r3
 800756e:	3748      	adds	r7, #72	; 0x48
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b0a0      	sub	sp, #128	; 0x80
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007580:	f107 010c 	add.w	r1, r7, #12
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	2202      	movs	r2, #2
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fcaf 	bl	8005eec <find_volume>
 800758e:	4603      	mov	r3, r0
 8007590:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8007598:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800759c:	2b00      	cmp	r3, #0
 800759e:	f040 808e 	bne.w	80076be <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075a8:	4611      	mov	r1, r2
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fb8e 	bl	8005ccc <follow_path>
 80075b0:	4603      	mov	r3, r0
 80075b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80075b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d108      	bne.n	80075d0 <f_unlink+0x5c>
 80075be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80075c2:	2102      	movs	r1, #2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fc fdbb 	bl	8004140 <chk_lock>
 80075ca:	4603      	mov	r3, r0
 80075cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80075d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d172      	bne.n	80076be <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80075d8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	da03      	bge.n	80075ea <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80075e2:	2306      	movs	r3, #6
 80075e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80075e8:	e008      	b.n	80075fc <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80075ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80075f6:	2307      	movs	r3, #7
 80075f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80075fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007600:	2b00      	cmp	r3, #0
 8007602:	d134      	bne.n	800766e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd fcd0 	bl	8004fb0 <ld_clust>
 8007610:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007612:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b00      	cmp	r3, #0
 800761c:	d027      	beq.n	800766e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8007622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007624:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8007626:	f107 0310 	add.w	r3, r7, #16
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fb19 	bl	8004c64 <dir_sdi>
 8007632:	4603      	mov	r3, r0
 8007634:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8007638:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800763c:	2b00      	cmp	r3, #0
 800763e:	d116      	bne.n	800766e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007640:	f107 0310 	add.w	r3, r7, #16
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd fedf 	bl	800540a <dir_read>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007652:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007656:	2b00      	cmp	r3, #0
 8007658:	d102      	bne.n	8007660 <f_unlink+0xec>
 800765a:	2307      	movs	r3, #7
 800765c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007660:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007664:	2b04      	cmp	r3, #4
 8007666:	d102      	bne.n	800766e <f_unlink+0xfa>
 8007668:	2300      	movs	r3, #0
 800766a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800766e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007672:	2b00      	cmp	r3, #0
 8007674:	d123      	bne.n	80076be <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007676:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe f924 	bl	80058c8 <dir_remove>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007686:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <f_unlink+0x134>
 800768e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8007694:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007698:	2200      	movs	r2, #0
 800769a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800769c:	4618      	mov	r0, r3
 800769e:	f7fd f9ac 	bl	80049fa <remove_chain>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80076a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <f_unlink+0x14a>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fc ff22 	bl	80044fc <sync_fs>
 80076b8:	4603      	mov	r3, r0
 80076ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80076be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3780      	adds	r7, #128	; 0x80
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b088      	sub	sp, #32
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
	int n = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80076de:	e01b      	b.n	8007718 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80076e0:	f107 0310 	add.w	r3, r7, #16
 80076e4:	f107 0114 	add.w	r1, r7, #20
 80076e8:	2201      	movs	r2, #1
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7ff f8ce 	bl	800688c <f_read>
		if (rc != 1) break;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d116      	bne.n	8007724 <f_gets+0x5a>
		c = s[0];
 80076f6:	7d3b      	ldrb	r3, [r7, #20]
 80076f8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b0d      	cmp	r3, #13
 80076fe:	d100      	bne.n	8007702 <f_gets+0x38>
 8007700:	e00a      	b.n	8007718 <f_gets+0x4e>
		*p++ = c;
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	61ba      	str	r2, [r7, #24]
 8007708:	7dfa      	ldrb	r2, [r7, #23]
 800770a:	701a      	strb	r2, [r3, #0]
		n++;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	3301      	adds	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	2b0a      	cmp	r3, #10
 8007716:	d007      	beq.n	8007728 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	3b01      	subs	r3, #1
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	429a      	cmp	r2, r3
 8007720:	dbde      	blt.n	80076e0 <f_gets+0x16>
 8007722:	e002      	b.n	800772a <f_gets+0x60>
		if (rc != 1) break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007728:	bf00      	nop
	}
	*p = 0;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <f_gets+0x70>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	e000      	b.n	800773c <f_gets+0x72>
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3720      	adds	r7, #32
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	2b0a      	cmp	r3, #10
 8007754:	d103      	bne.n	800775e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007756:	210d      	movs	r1, #13
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff fff3 	bl	8007744 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	db25      	blt.n	80077b6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	60fa      	str	r2, [r7, #12]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	78fa      	ldrb	r2, [r7, #3]
 8007776:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b3c      	cmp	r3, #60	; 0x3c
 800777c:	dd12      	ble.n	80077a4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f103 010c 	add.w	r1, r3, #12
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	f7ff f9dc 	bl	8006b4a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	429a      	cmp	r2, r3
 8007798:	d101      	bne.n	800779e <putc_bfd+0x5a>
 800779a:	2300      	movs	r3, #0
 800779c:	e001      	b.n	80077a2 <putc_bfd+0x5e>
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	e000      	b.n	80077b8 <putc_bfd+0x74>
	if (i < 0) return;
 80077b6:	bf00      	nop
}
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db16      	blt.n	80077fc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f103 010c 	add.w	r1, r3, #12
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	461a      	mov	r2, r3
 80077de:	f107 030c 	add.w	r3, r7, #12
 80077e2:	f7ff f9b2 	bl	8006b4a <f_write>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d107      	bne.n	80077fc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d102      	bne.n	80077fc <putc_flush+0x3e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	e001      	b.n	8007800 <putc_flush+0x42>
	return EOF;
 80077fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	609a      	str	r2, [r3, #8]
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b096      	sub	sp, #88	; 0x58
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800783c:	f107 030c 	add.w	r3, r7, #12
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff ffe0 	bl	8007808 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007848:	e009      	b.n	800785e <f_puts+0x2c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	781a      	ldrb	r2, [r3, #0]
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	4611      	mov	r1, r2
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ff73 	bl	8007744 <putc_bfd>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f1      	bne.n	800784a <f_puts+0x18>
	return putc_flush(&pb);
 8007866:	f107 030c 	add.w	r3, r7, #12
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ffa7 	bl	80077be <putc_flush>
 8007870:	4603      	mov	r3, r0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3758      	adds	r7, #88	; 0x58
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800788a:	2301      	movs	r3, #1
 800788c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800788e:	2300      	movs	r3, #0
 8007890:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007892:	4b1f      	ldr	r3, [pc, #124]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 8007894:	7a5b      	ldrb	r3, [r3, #9]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d131      	bne.n	8007900 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800789c:	4b1c      	ldr	r3, [pc, #112]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 800789e:	7a5b      	ldrb	r3, [r3, #9]
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078a6:	2100      	movs	r1, #0
 80078a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078aa:	4b19      	ldr	r3, [pc, #100]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078ac:	7a5b      	ldrb	r3, [r3, #9]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4a17      	ldr	r2, [pc, #92]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078ba:	4b15      	ldr	r3, [pc, #84]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078bc:	7a5b      	ldrb	r3, [r3, #9]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078c4:	4413      	add	r3, r2
 80078c6:	79fa      	ldrb	r2, [r7, #7]
 80078c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80078ca:	4b11      	ldr	r3, [pc, #68]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078cc:	7a5b      	ldrb	r3, [r3, #9]
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	b2d1      	uxtb	r1, r2
 80078d4:	4a0e      	ldr	r2, [pc, #56]	; (8007910 <FATFS_LinkDriverEx+0x94>)
 80078d6:	7251      	strb	r1, [r2, #9]
 80078d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80078da:	7dbb      	ldrb	r3, [r7, #22]
 80078dc:	3330      	adds	r3, #48	; 0x30
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	3301      	adds	r3, #1
 80078e8:	223a      	movs	r2, #58	; 0x3a
 80078ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3302      	adds	r3, #2
 80078f0:	222f      	movs	r2, #47	; 0x2f
 80078f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	3303      	adds	r3, #3
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
}
 8007902:	4618      	mov	r0, r3
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	200002d4 	.word	0x200002d4

08007914 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800791e:	2200      	movs	r2, #0
 8007920:	6839      	ldr	r1, [r7, #0]
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff ffaa 	bl	800787c <FATFS_LinkDriverEx>
 8007928:	4603      	mov	r3, r0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	2b7f      	cmp	r3, #127	; 0x7f
 8007944:	d802      	bhi.n	800794c <ff_convert+0x18>
		c = chr;
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	81fb      	strh	r3, [r7, #14]
 800794a:	e025      	b.n	8007998 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007952:	88fb      	ldrh	r3, [r7, #6]
 8007954:	2bff      	cmp	r3, #255	; 0xff
 8007956:	d805      	bhi.n	8007964 <ff_convert+0x30>
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	3b80      	subs	r3, #128	; 0x80
 800795c:	4a12      	ldr	r2, [pc, #72]	; (80079a8 <ff_convert+0x74>)
 800795e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007962:	e000      	b.n	8007966 <ff_convert+0x32>
 8007964:	2300      	movs	r3, #0
 8007966:	81fb      	strh	r3, [r7, #14]
 8007968:	e016      	b.n	8007998 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800796a:	2300      	movs	r3, #0
 800796c:	81fb      	strh	r3, [r7, #14]
 800796e:	e009      	b.n	8007984 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007970:	89fb      	ldrh	r3, [r7, #14]
 8007972:	4a0d      	ldr	r2, [pc, #52]	; (80079a8 <ff_convert+0x74>)
 8007974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007978:	88fa      	ldrh	r2, [r7, #6]
 800797a:	429a      	cmp	r2, r3
 800797c:	d006      	beq.n	800798c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800797e:	89fb      	ldrh	r3, [r7, #14]
 8007980:	3301      	adds	r3, #1
 8007982:	81fb      	strh	r3, [r7, #14]
 8007984:	89fb      	ldrh	r3, [r7, #14]
 8007986:	2b7f      	cmp	r3, #127	; 0x7f
 8007988:	d9f2      	bls.n	8007970 <ff_convert+0x3c>
 800798a:	e000      	b.n	800798e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800798c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800798e:	89fb      	ldrh	r3, [r7, #14]
 8007990:	3380      	adds	r3, #128	; 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	b2db      	uxtb	r3, r3
 8007996:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007998:	89fb      	ldrh	r3, [r7, #14]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3714      	adds	r7, #20
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	08008a10 	.word	0x08008a10

080079ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079bc:	d201      	bcs.n	80079c2 <ff_wtoupper+0x16>
 80079be:	4b3e      	ldr	r3, [pc, #248]	; (8007ab8 <ff_wtoupper+0x10c>)
 80079c0:	e000      	b.n	80079c4 <ff_wtoupper+0x18>
 80079c2:	4b3e      	ldr	r3, [pc, #248]	; (8007abc <ff_wtoupper+0x110>)
 80079c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	1c9a      	adds	r2, r3, #2
 80079ca:	617a      	str	r2, [r7, #20]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80079d0:	8a7b      	ldrh	r3, [r7, #18]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d068      	beq.n	8007aa8 <ff_wtoupper+0xfc>
 80079d6:	88fa      	ldrh	r2, [r7, #6]
 80079d8:	8a7b      	ldrh	r3, [r7, #18]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d364      	bcc.n	8007aa8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1c9a      	adds	r2, r3, #2
 80079e2:	617a      	str	r2, [r7, #20]
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	823b      	strh	r3, [r7, #16]
 80079e8:	8a3b      	ldrh	r3, [r7, #16]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	81fb      	strh	r3, [r7, #14]
 80079ee:	8a3b      	ldrh	r3, [r7, #16]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80079f4:	88fa      	ldrh	r2, [r7, #6]
 80079f6:	8a79      	ldrh	r1, [r7, #18]
 80079f8:	8a3b      	ldrh	r3, [r7, #16]
 80079fa:	440b      	add	r3, r1
 80079fc:	429a      	cmp	r2, r3
 80079fe:	da49      	bge.n	8007a94 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007a00:	89fb      	ldrh	r3, [r7, #14]
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d84f      	bhi.n	8007aa6 <ff_wtoupper+0xfa>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <ff_wtoupper+0x60>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a43 	.word	0x08007a43
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a61 	.word	0x08007a61
 8007a1c:	08007a69 	.word	0x08007a69
 8007a20:	08007a71 	.word	0x08007a71
 8007a24:	08007a79 	.word	0x08007a79
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a89 	.word	0x08007a89
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007a30:	88fa      	ldrh	r2, [r7, #6]
 8007a32:	8a7b      	ldrh	r3, [r7, #18]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	80fb      	strh	r3, [r7, #6]
 8007a40:	e027      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007a42:	88fa      	ldrh	r2, [r7, #6]
 8007a44:	8a7b      	ldrh	r3, [r7, #18]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	88fa      	ldrh	r2, [r7, #6]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	80fb      	strh	r3, [r7, #6]
 8007a56:	e01c      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007a58:	88fb      	ldrh	r3, [r7, #6]
 8007a5a:	3b10      	subs	r3, #16
 8007a5c:	80fb      	strh	r3, [r7, #6]
 8007a5e:	e018      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	3b20      	subs	r3, #32
 8007a64:	80fb      	strh	r3, [r7, #6]
 8007a66:	e014      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	3b30      	subs	r3, #48	; 0x30
 8007a6c:	80fb      	strh	r3, [r7, #6]
 8007a6e:	e010      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007a70:	88fb      	ldrh	r3, [r7, #6]
 8007a72:	3b1a      	subs	r3, #26
 8007a74:	80fb      	strh	r3, [r7, #6]
 8007a76:	e00c      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	80fb      	strh	r3, [r7, #6]
 8007a7e:	e008      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007a80:	88fb      	ldrh	r3, [r7, #6]
 8007a82:	3b50      	subs	r3, #80	; 0x50
 8007a84:	80fb      	strh	r3, [r7, #6]
 8007a86:	e004      	b.n	8007a92 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007a8e:	80fb      	strh	r3, [r7, #6]
 8007a90:	bf00      	nop
			}
			break;
 8007a92:	e008      	b.n	8007aa6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007a94:	89fb      	ldrh	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d195      	bne.n	80079c6 <ff_wtoupper+0x1a>
 8007a9a:	8a3b      	ldrh	r3, [r7, #16]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007aa4:	e78f      	b.n	80079c6 <ff_wtoupper+0x1a>
			break;
 8007aa6:	bf00      	nop
	}

	return chr;
 8007aa8:	88fb      	ldrh	r3, [r7, #6]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
 8007ab6:	bf00      	nop
 8007ab8:	08008b10 	.word	0x08008b10
 8007abc:	08008d04 	.word	0x08008d04

08007ac0 <__errno>:
 8007ac0:	4b01      	ldr	r3, [pc, #4]	; (8007ac8 <__errno+0x8>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000024 	.word	0x20000024

08007acc <__sflush_r>:
 8007acc:	898a      	ldrh	r2, [r1, #12]
 8007ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	0710      	lsls	r0, r2, #28
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	d458      	bmi.n	8007b8c <__sflush_r+0xc0>
 8007ada:	684b      	ldr	r3, [r1, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc05      	bgt.n	8007aec <__sflush_r+0x20>
 8007ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dc02      	bgt.n	8007aec <__sflush_r+0x20>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aee:	2e00      	cmp	r6, #0
 8007af0:	d0f9      	beq.n	8007ae6 <__sflush_r+0x1a>
 8007af2:	2300      	movs	r3, #0
 8007af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007af8:	682f      	ldr	r7, [r5, #0]
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	d032      	beq.n	8007b64 <__sflush_r+0x98>
 8007afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	075a      	lsls	r2, r3, #29
 8007b04:	d505      	bpl.n	8007b12 <__sflush_r+0x46>
 8007b06:	6863      	ldr	r3, [r4, #4]
 8007b08:	1ac0      	subs	r0, r0, r3
 8007b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b0c:	b10b      	cbz	r3, 8007b12 <__sflush_r+0x46>
 8007b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b10:	1ac0      	subs	r0, r0, r3
 8007b12:	2300      	movs	r3, #0
 8007b14:	4602      	mov	r2, r0
 8007b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b18:	6a21      	ldr	r1, [r4, #32]
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	47b0      	blx	r6
 8007b1e:	1c43      	adds	r3, r0, #1
 8007b20:	89a3      	ldrh	r3, [r4, #12]
 8007b22:	d106      	bne.n	8007b32 <__sflush_r+0x66>
 8007b24:	6829      	ldr	r1, [r5, #0]
 8007b26:	291d      	cmp	r1, #29
 8007b28:	d82c      	bhi.n	8007b84 <__sflush_r+0xb8>
 8007b2a:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <__sflush_r+0x108>)
 8007b2c:	40ca      	lsrs	r2, r1
 8007b2e:	07d6      	lsls	r6, r2, #31
 8007b30:	d528      	bpl.n	8007b84 <__sflush_r+0xb8>
 8007b32:	2200      	movs	r2, #0
 8007b34:	6062      	str	r2, [r4, #4]
 8007b36:	04d9      	lsls	r1, r3, #19
 8007b38:	6922      	ldr	r2, [r4, #16]
 8007b3a:	6022      	str	r2, [r4, #0]
 8007b3c:	d504      	bpl.n	8007b48 <__sflush_r+0x7c>
 8007b3e:	1c42      	adds	r2, r0, #1
 8007b40:	d101      	bne.n	8007b46 <__sflush_r+0x7a>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	b903      	cbnz	r3, 8007b48 <__sflush_r+0x7c>
 8007b46:	6560      	str	r0, [r4, #84]	; 0x54
 8007b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b4a:	602f      	str	r7, [r5, #0]
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	d0ca      	beq.n	8007ae6 <__sflush_r+0x1a>
 8007b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d002      	beq.n	8007b5e <__sflush_r+0x92>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f9b1 	bl	8007ec0 <_free_r>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	6360      	str	r0, [r4, #52]	; 0x34
 8007b62:	e7c1      	b.n	8007ae8 <__sflush_r+0x1c>
 8007b64:	6a21      	ldr	r1, [r4, #32]
 8007b66:	2301      	movs	r3, #1
 8007b68:	4628      	mov	r0, r5
 8007b6a:	47b0      	blx	r6
 8007b6c:	1c41      	adds	r1, r0, #1
 8007b6e:	d1c7      	bne.n	8007b00 <__sflush_r+0x34>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0c4      	beq.n	8007b00 <__sflush_r+0x34>
 8007b76:	2b1d      	cmp	r3, #29
 8007b78:	d001      	beq.n	8007b7e <__sflush_r+0xb2>
 8007b7a:	2b16      	cmp	r3, #22
 8007b7c:	d101      	bne.n	8007b82 <__sflush_r+0xb6>
 8007b7e:	602f      	str	r7, [r5, #0]
 8007b80:	e7b1      	b.n	8007ae6 <__sflush_r+0x1a>
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b88:	81a3      	strh	r3, [r4, #12]
 8007b8a:	e7ad      	b.n	8007ae8 <__sflush_r+0x1c>
 8007b8c:	690f      	ldr	r7, [r1, #16]
 8007b8e:	2f00      	cmp	r7, #0
 8007b90:	d0a9      	beq.n	8007ae6 <__sflush_r+0x1a>
 8007b92:	0793      	lsls	r3, r2, #30
 8007b94:	680e      	ldr	r6, [r1, #0]
 8007b96:	bf08      	it	eq
 8007b98:	694b      	ldreq	r3, [r1, #20]
 8007b9a:	600f      	str	r7, [r1, #0]
 8007b9c:	bf18      	it	ne
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	eba6 0807 	sub.w	r8, r6, r7
 8007ba4:	608b      	str	r3, [r1, #8]
 8007ba6:	f1b8 0f00 	cmp.w	r8, #0
 8007baa:	dd9c      	ble.n	8007ae6 <__sflush_r+0x1a>
 8007bac:	6a21      	ldr	r1, [r4, #32]
 8007bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bb0:	4643      	mov	r3, r8
 8007bb2:	463a      	mov	r2, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	47b0      	blx	r6
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	dc06      	bgt.n	8007bca <__sflush_r+0xfe>
 8007bbc:	89a3      	ldrh	r3, [r4, #12]
 8007bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e78e      	b.n	8007ae8 <__sflush_r+0x1c>
 8007bca:	4407      	add	r7, r0
 8007bcc:	eba8 0800 	sub.w	r8, r8, r0
 8007bd0:	e7e9      	b.n	8007ba6 <__sflush_r+0xda>
 8007bd2:	bf00      	nop
 8007bd4:	20400001 	.word	0x20400001

08007bd8 <_fflush_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	690b      	ldr	r3, [r1, #16]
 8007bdc:	4605      	mov	r5, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	b913      	cbnz	r3, 8007be8 <_fflush_r+0x10>
 8007be2:	2500      	movs	r5, #0
 8007be4:	4628      	mov	r0, r5
 8007be6:	bd38      	pop	{r3, r4, r5, pc}
 8007be8:	b118      	cbz	r0, 8007bf2 <_fflush_r+0x1a>
 8007bea:	6983      	ldr	r3, [r0, #24]
 8007bec:	b90b      	cbnz	r3, 8007bf2 <_fflush_r+0x1a>
 8007bee:	f000 f899 	bl	8007d24 <__sinit>
 8007bf2:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <_fflush_r+0x6c>)
 8007bf4:	429c      	cmp	r4, r3
 8007bf6:	d11b      	bne.n	8007c30 <_fflush_r+0x58>
 8007bf8:	686c      	ldr	r4, [r5, #4]
 8007bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0ef      	beq.n	8007be2 <_fflush_r+0xa>
 8007c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c04:	07d0      	lsls	r0, r2, #31
 8007c06:	d404      	bmi.n	8007c12 <_fflush_r+0x3a>
 8007c08:	0599      	lsls	r1, r3, #22
 8007c0a:	d402      	bmi.n	8007c12 <_fflush_r+0x3a>
 8007c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0e:	f000 f94c 	bl	8007eaa <__retarget_lock_acquire_recursive>
 8007c12:	4628      	mov	r0, r5
 8007c14:	4621      	mov	r1, r4
 8007c16:	f7ff ff59 	bl	8007acc <__sflush_r>
 8007c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c1c:	07da      	lsls	r2, r3, #31
 8007c1e:	4605      	mov	r5, r0
 8007c20:	d4e0      	bmi.n	8007be4 <_fflush_r+0xc>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	059b      	lsls	r3, r3, #22
 8007c26:	d4dd      	bmi.n	8007be4 <_fflush_r+0xc>
 8007c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2a:	f000 f93f 	bl	8007eac <__retarget_lock_release_recursive>
 8007c2e:	e7d9      	b.n	8007be4 <_fflush_r+0xc>
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <_fflush_r+0x70>)
 8007c32:	429c      	cmp	r4, r3
 8007c34:	d101      	bne.n	8007c3a <_fflush_r+0x62>
 8007c36:	68ac      	ldr	r4, [r5, #8]
 8007c38:	e7df      	b.n	8007bfa <_fflush_r+0x22>
 8007c3a:	4b04      	ldr	r3, [pc, #16]	; (8007c4c <_fflush_r+0x74>)
 8007c3c:	429c      	cmp	r4, r3
 8007c3e:	bf08      	it	eq
 8007c40:	68ec      	ldreq	r4, [r5, #12]
 8007c42:	e7da      	b.n	8007bfa <_fflush_r+0x22>
 8007c44:	08008de0 	.word	0x08008de0
 8007c48:	08008e00 	.word	0x08008e00
 8007c4c:	08008dc0 	.word	0x08008dc0

08007c50 <fflush>:
 8007c50:	4601      	mov	r1, r0
 8007c52:	b920      	cbnz	r0, 8007c5e <fflush+0xe>
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <fflush+0x18>)
 8007c56:	4905      	ldr	r1, [pc, #20]	; (8007c6c <fflush+0x1c>)
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f000 b8e1 	b.w	8007e20 <_fwalk_reent>
 8007c5e:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <fflush+0x20>)
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f7ff bfb9 	b.w	8007bd8 <_fflush_r>
 8007c66:	bf00      	nop
 8007c68:	08008e20 	.word	0x08008e20
 8007c6c:	08007bd9 	.word	0x08007bd9
 8007c70:	20000024 	.word	0x20000024

08007c74 <std>:
 8007c74:	2300      	movs	r3, #0
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
 8007c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c82:	6083      	str	r3, [r0, #8]
 8007c84:	8181      	strh	r1, [r0, #12]
 8007c86:	6643      	str	r3, [r0, #100]	; 0x64
 8007c88:	81c2      	strh	r2, [r0, #14]
 8007c8a:	6183      	str	r3, [r0, #24]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	2208      	movs	r2, #8
 8007c90:	305c      	adds	r0, #92	; 0x5c
 8007c92:	f000 f90c 	bl	8007eae <memset>
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <std+0x38>)
 8007c98:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x3c>)
 8007c9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std+0x40>)
 8007ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std+0x44>)
 8007ca4:	6224      	str	r4, [r4, #32]
 8007ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	bf00      	nop
 8007cac:	08008075 	.word	0x08008075
 8007cb0:	08008097 	.word	0x08008097
 8007cb4:	080080cf 	.word	0x080080cf
 8007cb8:	080080f3 	.word	0x080080f3

08007cbc <_cleanup_r>:
 8007cbc:	4901      	ldr	r1, [pc, #4]	; (8007cc4 <_cleanup_r+0x8>)
 8007cbe:	f000 b8af 	b.w	8007e20 <_fwalk_reent>
 8007cc2:	bf00      	nop
 8007cc4:	08007bd9 	.word	0x08007bd9

08007cc8 <__sfmoreglue>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	1e4a      	subs	r2, r1, #1
 8007ccc:	2568      	movs	r5, #104	; 0x68
 8007cce:	4355      	muls	r5, r2
 8007cd0:	460e      	mov	r6, r1
 8007cd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cd6:	f000 f943 	bl	8007f60 <_malloc_r>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	b140      	cbz	r0, 8007cf0 <__sfmoreglue+0x28>
 8007cde:	2100      	movs	r1, #0
 8007ce0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ce4:	300c      	adds	r0, #12
 8007ce6:	60a0      	str	r0, [r4, #8]
 8007ce8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cec:	f000 f8df 	bl	8007eae <memset>
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}

08007cf4 <__sfp_lock_acquire>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__sfp_lock_acquire+0x8>)
 8007cf6:	f000 b8d8 	b.w	8007eaa <__retarget_lock_acquire_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	20004c88 	.word	0x20004c88

08007d00 <__sfp_lock_release>:
 8007d00:	4801      	ldr	r0, [pc, #4]	; (8007d08 <__sfp_lock_release+0x8>)
 8007d02:	f000 b8d3 	b.w	8007eac <__retarget_lock_release_recursive>
 8007d06:	bf00      	nop
 8007d08:	20004c88 	.word	0x20004c88

08007d0c <__sinit_lock_acquire>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	; (8007d14 <__sinit_lock_acquire+0x8>)
 8007d0e:	f000 b8cc 	b.w	8007eaa <__retarget_lock_acquire_recursive>
 8007d12:	bf00      	nop
 8007d14:	20004c83 	.word	0x20004c83

08007d18 <__sinit_lock_release>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__sinit_lock_release+0x8>)
 8007d1a:	f000 b8c7 	b.w	8007eac <__retarget_lock_release_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20004c83 	.word	0x20004c83

08007d24 <__sinit>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	f7ff fff0 	bl	8007d0c <__sinit_lock_acquire>
 8007d2c:	69a3      	ldr	r3, [r4, #24]
 8007d2e:	b11b      	cbz	r3, 8007d38 <__sinit+0x14>
 8007d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d34:	f7ff bff0 	b.w	8007d18 <__sinit_lock_release>
 8007d38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d3c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <__sinit+0x68>)
 8007d40:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <__sinit+0x6c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	bf04      	itt	eq
 8007d4a:	2301      	moveq	r3, #1
 8007d4c:	61a3      	streq	r3, [r4, #24]
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 f820 	bl	8007d94 <__sfp>
 8007d54:	6060      	str	r0, [r4, #4]
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 f81c 	bl	8007d94 <__sfp>
 8007d5c:	60a0      	str	r0, [r4, #8]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f818 	bl	8007d94 <__sfp>
 8007d64:	2200      	movs	r2, #0
 8007d66:	60e0      	str	r0, [r4, #12]
 8007d68:	2104      	movs	r1, #4
 8007d6a:	6860      	ldr	r0, [r4, #4]
 8007d6c:	f7ff ff82 	bl	8007c74 <std>
 8007d70:	68a0      	ldr	r0, [r4, #8]
 8007d72:	2201      	movs	r2, #1
 8007d74:	2109      	movs	r1, #9
 8007d76:	f7ff ff7d 	bl	8007c74 <std>
 8007d7a:	68e0      	ldr	r0, [r4, #12]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	2112      	movs	r1, #18
 8007d80:	f7ff ff78 	bl	8007c74 <std>
 8007d84:	2301      	movs	r3, #1
 8007d86:	61a3      	str	r3, [r4, #24]
 8007d88:	e7d2      	b.n	8007d30 <__sinit+0xc>
 8007d8a:	bf00      	nop
 8007d8c:	08008e20 	.word	0x08008e20
 8007d90:	08007cbd 	.word	0x08007cbd

08007d94 <__sfp>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	4607      	mov	r7, r0
 8007d98:	f7ff ffac 	bl	8007cf4 <__sfp_lock_acquire>
 8007d9c:	4b1e      	ldr	r3, [pc, #120]	; (8007e18 <__sfp+0x84>)
 8007d9e:	681e      	ldr	r6, [r3, #0]
 8007da0:	69b3      	ldr	r3, [r6, #24]
 8007da2:	b913      	cbnz	r3, 8007daa <__sfp+0x16>
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ffbd 	bl	8007d24 <__sinit>
 8007daa:	3648      	adds	r6, #72	; 0x48
 8007dac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	d503      	bpl.n	8007dbc <__sfp+0x28>
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	b30b      	cbz	r3, 8007dfc <__sfp+0x68>
 8007db8:	6836      	ldr	r6, [r6, #0]
 8007dba:	e7f7      	b.n	8007dac <__sfp+0x18>
 8007dbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dc0:	b9d5      	cbnz	r5, 8007df8 <__sfp+0x64>
 8007dc2:	4b16      	ldr	r3, [pc, #88]	; (8007e1c <__sfp+0x88>)
 8007dc4:	60e3      	str	r3, [r4, #12]
 8007dc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dca:	6665      	str	r5, [r4, #100]	; 0x64
 8007dcc:	f000 f86c 	bl	8007ea8 <__retarget_lock_init_recursive>
 8007dd0:	f7ff ff96 	bl	8007d00 <__sfp_lock_release>
 8007dd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ddc:	6025      	str	r5, [r4, #0]
 8007dde:	61a5      	str	r5, [r4, #24]
 8007de0:	2208      	movs	r2, #8
 8007de2:	4629      	mov	r1, r5
 8007de4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007de8:	f000 f861 	bl	8007eae <memset>
 8007dec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007df0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007df4:	4620      	mov	r0, r4
 8007df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df8:	3468      	adds	r4, #104	; 0x68
 8007dfa:	e7d9      	b.n	8007db0 <__sfp+0x1c>
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7ff ff62 	bl	8007cc8 <__sfmoreglue>
 8007e04:	4604      	mov	r4, r0
 8007e06:	6030      	str	r0, [r6, #0]
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d1d5      	bne.n	8007db8 <__sfp+0x24>
 8007e0c:	f7ff ff78 	bl	8007d00 <__sfp_lock_release>
 8007e10:	230c      	movs	r3, #12
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	e7ee      	b.n	8007df4 <__sfp+0x60>
 8007e16:	bf00      	nop
 8007e18:	08008e20 	.word	0x08008e20
 8007e1c:	ffff0001 	.word	0xffff0001

08007e20 <_fwalk_reent>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4606      	mov	r6, r0
 8007e26:	4688      	mov	r8, r1
 8007e28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e2c:	2700      	movs	r7, #0
 8007e2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e32:	f1b9 0901 	subs.w	r9, r9, #1
 8007e36:	d505      	bpl.n	8007e44 <_fwalk_reent+0x24>
 8007e38:	6824      	ldr	r4, [r4, #0]
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	d1f7      	bne.n	8007e2e <_fwalk_reent+0xe>
 8007e3e:	4638      	mov	r0, r7
 8007e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e44:	89ab      	ldrh	r3, [r5, #12]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d907      	bls.n	8007e5a <_fwalk_reent+0x3a>
 8007e4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	d003      	beq.n	8007e5a <_fwalk_reent+0x3a>
 8007e52:	4629      	mov	r1, r5
 8007e54:	4630      	mov	r0, r6
 8007e56:	47c0      	blx	r8
 8007e58:	4307      	orrs	r7, r0
 8007e5a:	3568      	adds	r5, #104	; 0x68
 8007e5c:	e7e9      	b.n	8007e32 <_fwalk_reent+0x12>
	...

08007e60 <__libc_init_array>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4d0d      	ldr	r5, [pc, #52]	; (8007e98 <__libc_init_array+0x38>)
 8007e64:	4c0d      	ldr	r4, [pc, #52]	; (8007e9c <__libc_init_array+0x3c>)
 8007e66:	1b64      	subs	r4, r4, r5
 8007e68:	10a4      	asrs	r4, r4, #2
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	42a6      	cmp	r6, r4
 8007e6e:	d109      	bne.n	8007e84 <__libc_init_array+0x24>
 8007e70:	4d0b      	ldr	r5, [pc, #44]	; (8007ea0 <__libc_init_array+0x40>)
 8007e72:	4c0c      	ldr	r4, [pc, #48]	; (8007ea4 <__libc_init_array+0x44>)
 8007e74:	f000 fce8 	bl	8008848 <_init>
 8007e78:	1b64      	subs	r4, r4, r5
 8007e7a:	10a4      	asrs	r4, r4, #2
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	42a6      	cmp	r6, r4
 8007e80:	d105      	bne.n	8007e8e <__libc_init_array+0x2e>
 8007e82:	bd70      	pop	{r4, r5, r6, pc}
 8007e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e88:	4798      	blx	r3
 8007e8a:	3601      	adds	r6, #1
 8007e8c:	e7ee      	b.n	8007e6c <__libc_init_array+0xc>
 8007e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e92:	4798      	blx	r3
 8007e94:	3601      	adds	r6, #1
 8007e96:	e7f2      	b.n	8007e7e <__libc_init_array+0x1e>
 8007e98:	08008e60 	.word	0x08008e60
 8007e9c:	08008e60 	.word	0x08008e60
 8007ea0:	08008e60 	.word	0x08008e60
 8007ea4:	08008e64 	.word	0x08008e64

08007ea8 <__retarget_lock_init_recursive>:
 8007ea8:	4770      	bx	lr

08007eaa <__retarget_lock_acquire_recursive>:
 8007eaa:	4770      	bx	lr

08007eac <__retarget_lock_release_recursive>:
 8007eac:	4770      	bx	lr

08007eae <memset>:
 8007eae:	4402      	add	r2, r0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d100      	bne.n	8007eb8 <memset+0xa>
 8007eb6:	4770      	bx	lr
 8007eb8:	f803 1b01 	strb.w	r1, [r3], #1
 8007ebc:	e7f9      	b.n	8007eb2 <memset+0x4>
	...

08007ec0 <_free_r>:
 8007ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ec2:	2900      	cmp	r1, #0
 8007ec4:	d048      	beq.n	8007f58 <_free_r+0x98>
 8007ec6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007eca:	9001      	str	r0, [sp, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f1a1 0404 	sub.w	r4, r1, #4
 8007ed2:	bfb8      	it	lt
 8007ed4:	18e4      	addlt	r4, r4, r3
 8007ed6:	f000 f953 	bl	8008180 <__malloc_lock>
 8007eda:	4a20      	ldr	r2, [pc, #128]	; (8007f5c <_free_r+0x9c>)
 8007edc:	9801      	ldr	r0, [sp, #4]
 8007ede:	6813      	ldr	r3, [r2, #0]
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	b933      	cbnz	r3, 8007ef2 <_free_r+0x32>
 8007ee4:	6063      	str	r3, [r4, #4]
 8007ee6:	6014      	str	r4, [r2, #0]
 8007ee8:	b003      	add	sp, #12
 8007eea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007eee:	f000 b94d 	b.w	800818c <__malloc_unlock>
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	d90b      	bls.n	8007f0e <_free_r+0x4e>
 8007ef6:	6821      	ldr	r1, [r4, #0]
 8007ef8:	1862      	adds	r2, r4, r1
 8007efa:	4293      	cmp	r3, r2
 8007efc:	bf04      	itt	eq
 8007efe:	681a      	ldreq	r2, [r3, #0]
 8007f00:	685b      	ldreq	r3, [r3, #4]
 8007f02:	6063      	str	r3, [r4, #4]
 8007f04:	bf04      	itt	eq
 8007f06:	1852      	addeq	r2, r2, r1
 8007f08:	6022      	streq	r2, [r4, #0]
 8007f0a:	602c      	str	r4, [r5, #0]
 8007f0c:	e7ec      	b.n	8007ee8 <_free_r+0x28>
 8007f0e:	461a      	mov	r2, r3
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	b10b      	cbz	r3, 8007f18 <_free_r+0x58>
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	d9fa      	bls.n	8007f0e <_free_r+0x4e>
 8007f18:	6811      	ldr	r1, [r2, #0]
 8007f1a:	1855      	adds	r5, r2, r1
 8007f1c:	42a5      	cmp	r5, r4
 8007f1e:	d10b      	bne.n	8007f38 <_free_r+0x78>
 8007f20:	6824      	ldr	r4, [r4, #0]
 8007f22:	4421      	add	r1, r4
 8007f24:	1854      	adds	r4, r2, r1
 8007f26:	42a3      	cmp	r3, r4
 8007f28:	6011      	str	r1, [r2, #0]
 8007f2a:	d1dd      	bne.n	8007ee8 <_free_r+0x28>
 8007f2c:	681c      	ldr	r4, [r3, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	6053      	str	r3, [r2, #4]
 8007f32:	4421      	add	r1, r4
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	e7d7      	b.n	8007ee8 <_free_r+0x28>
 8007f38:	d902      	bls.n	8007f40 <_free_r+0x80>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	6003      	str	r3, [r0, #0]
 8007f3e:	e7d3      	b.n	8007ee8 <_free_r+0x28>
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	1961      	adds	r1, r4, r5
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf04      	itt	eq
 8007f48:	6819      	ldreq	r1, [r3, #0]
 8007f4a:	685b      	ldreq	r3, [r3, #4]
 8007f4c:	6063      	str	r3, [r4, #4]
 8007f4e:	bf04      	itt	eq
 8007f50:	1949      	addeq	r1, r1, r5
 8007f52:	6021      	streq	r1, [r4, #0]
 8007f54:	6054      	str	r4, [r2, #4]
 8007f56:	e7c7      	b.n	8007ee8 <_free_r+0x28>
 8007f58:	b003      	add	sp, #12
 8007f5a:	bd30      	pop	{r4, r5, pc}
 8007f5c:	200002e0 	.word	0x200002e0

08007f60 <_malloc_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	1ccd      	adds	r5, r1, #3
 8007f64:	f025 0503 	bic.w	r5, r5, #3
 8007f68:	3508      	adds	r5, #8
 8007f6a:	2d0c      	cmp	r5, #12
 8007f6c:	bf38      	it	cc
 8007f6e:	250c      	movcc	r5, #12
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	4606      	mov	r6, r0
 8007f74:	db01      	blt.n	8007f7a <_malloc_r+0x1a>
 8007f76:	42a9      	cmp	r1, r5
 8007f78:	d903      	bls.n	8007f82 <_malloc_r+0x22>
 8007f7a:	230c      	movs	r3, #12
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	2000      	movs	r0, #0
 8007f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f82:	f000 f8fd 	bl	8008180 <__malloc_lock>
 8007f86:	4921      	ldr	r1, [pc, #132]	; (800800c <_malloc_r+0xac>)
 8007f88:	680a      	ldr	r2, [r1, #0]
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	b99c      	cbnz	r4, 8007fb6 <_malloc_r+0x56>
 8007f8e:	4f20      	ldr	r7, [pc, #128]	; (8008010 <_malloc_r+0xb0>)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	b923      	cbnz	r3, 8007f9e <_malloc_r+0x3e>
 8007f94:	4621      	mov	r1, r4
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 f83c 	bl	8008014 <_sbrk_r>
 8007f9c:	6038      	str	r0, [r7, #0]
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f837 	bl	8008014 <_sbrk_r>
 8007fa6:	1c43      	adds	r3, r0, #1
 8007fa8:	d123      	bne.n	8007ff2 <_malloc_r+0x92>
 8007faa:	230c      	movs	r3, #12
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f000 f8ec 	bl	800818c <__malloc_unlock>
 8007fb4:	e7e3      	b.n	8007f7e <_malloc_r+0x1e>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	1b5b      	subs	r3, r3, r5
 8007fba:	d417      	bmi.n	8007fec <_malloc_r+0x8c>
 8007fbc:	2b0b      	cmp	r3, #11
 8007fbe:	d903      	bls.n	8007fc8 <_malloc_r+0x68>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	441c      	add	r4, r3
 8007fc4:	6025      	str	r5, [r4, #0]
 8007fc6:	e004      	b.n	8007fd2 <_malloc_r+0x72>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	42a2      	cmp	r2, r4
 8007fcc:	bf0c      	ite	eq
 8007fce:	600b      	streq	r3, [r1, #0]
 8007fd0:	6053      	strne	r3, [r2, #4]
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f000 f8da 	bl	800818c <__malloc_unlock>
 8007fd8:	f104 000b 	add.w	r0, r4, #11
 8007fdc:	1d23      	adds	r3, r4, #4
 8007fde:	f020 0007 	bic.w	r0, r0, #7
 8007fe2:	1ac2      	subs	r2, r0, r3
 8007fe4:	d0cc      	beq.n	8007f80 <_malloc_r+0x20>
 8007fe6:	1a1b      	subs	r3, r3, r0
 8007fe8:	50a3      	str	r3, [r4, r2]
 8007fea:	e7c9      	b.n	8007f80 <_malloc_r+0x20>
 8007fec:	4622      	mov	r2, r4
 8007fee:	6864      	ldr	r4, [r4, #4]
 8007ff0:	e7cc      	b.n	8007f8c <_malloc_r+0x2c>
 8007ff2:	1cc4      	adds	r4, r0, #3
 8007ff4:	f024 0403 	bic.w	r4, r4, #3
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d0e3      	beq.n	8007fc4 <_malloc_r+0x64>
 8007ffc:	1a21      	subs	r1, r4, r0
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 f808 	bl	8008014 <_sbrk_r>
 8008004:	3001      	adds	r0, #1
 8008006:	d1dd      	bne.n	8007fc4 <_malloc_r+0x64>
 8008008:	e7cf      	b.n	8007faa <_malloc_r+0x4a>
 800800a:	bf00      	nop
 800800c:	200002e0 	.word	0x200002e0
 8008010:	200002e4 	.word	0x200002e4

08008014 <_sbrk_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d06      	ldr	r5, [pc, #24]	; (8008030 <_sbrk_r+0x1c>)
 8008018:	2300      	movs	r3, #0
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	f7f9 fe82 	bl	8001d28 <_sbrk>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_sbrk_r+0x1a>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_sbrk_r+0x1a>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20004c8c 	.word	0x20004c8c

08008034 <siprintf>:
 8008034:	b40e      	push	{r1, r2, r3}
 8008036:	b500      	push	{lr}
 8008038:	b09c      	sub	sp, #112	; 0x70
 800803a:	ab1d      	add	r3, sp, #116	; 0x74
 800803c:	9002      	str	r0, [sp, #8]
 800803e:	9006      	str	r0, [sp, #24]
 8008040:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008044:	4809      	ldr	r0, [pc, #36]	; (800806c <siprintf+0x38>)
 8008046:	9107      	str	r1, [sp, #28]
 8008048:	9104      	str	r1, [sp, #16]
 800804a:	4909      	ldr	r1, [pc, #36]	; (8008070 <siprintf+0x3c>)
 800804c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008050:	9105      	str	r1, [sp, #20]
 8008052:	6800      	ldr	r0, [r0, #0]
 8008054:	9301      	str	r3, [sp, #4]
 8008056:	a902      	add	r1, sp, #8
 8008058:	f000 f8fa 	bl	8008250 <_svfiprintf_r>
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	2200      	movs	r2, #0
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	b01c      	add	sp, #112	; 0x70
 8008064:	f85d eb04 	ldr.w	lr, [sp], #4
 8008068:	b003      	add	sp, #12
 800806a:	4770      	bx	lr
 800806c:	20000024 	.word	0x20000024
 8008070:	ffff0208 	.word	0xffff0208

08008074 <__sread>:
 8008074:	b510      	push	{r4, lr}
 8008076:	460c      	mov	r4, r1
 8008078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807c:	f000 fb7c 	bl	8008778 <_read_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	bfab      	itete	ge
 8008084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008086:	89a3      	ldrhlt	r3, [r4, #12]
 8008088:	181b      	addge	r3, r3, r0
 800808a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800808e:	bfac      	ite	ge
 8008090:	6563      	strge	r3, [r4, #84]	; 0x54
 8008092:	81a3      	strhlt	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__swrite>:
 8008096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800809a:	461f      	mov	r7, r3
 800809c:	898b      	ldrh	r3, [r1, #12]
 800809e:	05db      	lsls	r3, r3, #23
 80080a0:	4605      	mov	r5, r0
 80080a2:	460c      	mov	r4, r1
 80080a4:	4616      	mov	r6, r2
 80080a6:	d505      	bpl.n	80080b4 <__swrite+0x1e>
 80080a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ac:	2302      	movs	r3, #2
 80080ae:	2200      	movs	r2, #0
 80080b0:	f000 f854 	bl	800815c <_lseek_r>
 80080b4:	89a3      	ldrh	r3, [r4, #12]
 80080b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080be:	81a3      	strh	r3, [r4, #12]
 80080c0:	4632      	mov	r2, r6
 80080c2:	463b      	mov	r3, r7
 80080c4:	4628      	mov	r0, r5
 80080c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ca:	f000 b825 	b.w	8008118 <_write_r>

080080ce <__sseek>:
 80080ce:	b510      	push	{r4, lr}
 80080d0:	460c      	mov	r4, r1
 80080d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d6:	f000 f841 	bl	800815c <_lseek_r>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	89a3      	ldrh	r3, [r4, #12]
 80080de:	bf15      	itete	ne
 80080e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80080e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ea:	81a3      	strheq	r3, [r4, #12]
 80080ec:	bf18      	it	ne
 80080ee:	81a3      	strhne	r3, [r4, #12]
 80080f0:	bd10      	pop	{r4, pc}

080080f2 <__sclose>:
 80080f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f6:	f000 b821 	b.w	800813c <_close_r>

080080fa <strcat>:
 80080fa:	b510      	push	{r4, lr}
 80080fc:	4602      	mov	r2, r0
 80080fe:	7814      	ldrb	r4, [r2, #0]
 8008100:	4613      	mov	r3, r2
 8008102:	3201      	adds	r2, #1
 8008104:	2c00      	cmp	r4, #0
 8008106:	d1fa      	bne.n	80080fe <strcat+0x4>
 8008108:	3b01      	subs	r3, #1
 800810a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008112:	2a00      	cmp	r2, #0
 8008114:	d1f9      	bne.n	800810a <strcat+0x10>
 8008116:	bd10      	pop	{r4, pc}

08008118 <_write_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d07      	ldr	r5, [pc, #28]	; (8008138 <_write_r+0x20>)
 800811c:	4604      	mov	r4, r0
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	2200      	movs	r2, #0
 8008124:	602a      	str	r2, [r5, #0]
 8008126:	461a      	mov	r2, r3
 8008128:	f7f9 fdc9 	bl	8001cbe <_write>
 800812c:	1c43      	adds	r3, r0, #1
 800812e:	d102      	bne.n	8008136 <_write_r+0x1e>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	b103      	cbz	r3, 8008136 <_write_r+0x1e>
 8008134:	6023      	str	r3, [r4, #0]
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	20004c8c 	.word	0x20004c8c

0800813c <_close_r>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4d06      	ldr	r5, [pc, #24]	; (8008158 <_close_r+0x1c>)
 8008140:	2300      	movs	r3, #0
 8008142:	4604      	mov	r4, r0
 8008144:	4608      	mov	r0, r1
 8008146:	602b      	str	r3, [r5, #0]
 8008148:	f7f9 fdd5 	bl	8001cf6 <_close>
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d102      	bne.n	8008156 <_close_r+0x1a>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	b103      	cbz	r3, 8008156 <_close_r+0x1a>
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	20004c8c 	.word	0x20004c8c

0800815c <_lseek_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4d07      	ldr	r5, [pc, #28]	; (800817c <_lseek_r+0x20>)
 8008160:	4604      	mov	r4, r0
 8008162:	4608      	mov	r0, r1
 8008164:	4611      	mov	r1, r2
 8008166:	2200      	movs	r2, #0
 8008168:	602a      	str	r2, [r5, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	f7f9 fdcf 	bl	8001d0e <_lseek>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d102      	bne.n	800817a <_lseek_r+0x1e>
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	b103      	cbz	r3, 800817a <_lseek_r+0x1e>
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	bd38      	pop	{r3, r4, r5, pc}
 800817c:	20004c8c 	.word	0x20004c8c

08008180 <__malloc_lock>:
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <__malloc_lock+0x8>)
 8008182:	f7ff be92 	b.w	8007eaa <__retarget_lock_acquire_recursive>
 8008186:	bf00      	nop
 8008188:	20004c84 	.word	0x20004c84

0800818c <__malloc_unlock>:
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <__malloc_unlock+0x8>)
 800818e:	f7ff be8d 	b.w	8007eac <__retarget_lock_release_recursive>
 8008192:	bf00      	nop
 8008194:	20004c84 	.word	0x20004c84

08008198 <__ssputs_r>:
 8008198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	688e      	ldr	r6, [r1, #8]
 800819e:	429e      	cmp	r6, r3
 80081a0:	4682      	mov	sl, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	4690      	mov	r8, r2
 80081a6:	461f      	mov	r7, r3
 80081a8:	d838      	bhi.n	800821c <__ssputs_r+0x84>
 80081aa:	898a      	ldrh	r2, [r1, #12]
 80081ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081b0:	d032      	beq.n	8008218 <__ssputs_r+0x80>
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	6909      	ldr	r1, [r1, #16]
 80081b6:	eba5 0901 	sub.w	r9, r5, r1
 80081ba:	6965      	ldr	r5, [r4, #20]
 80081bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081c4:	3301      	adds	r3, #1
 80081c6:	444b      	add	r3, r9
 80081c8:	106d      	asrs	r5, r5, #1
 80081ca:	429d      	cmp	r5, r3
 80081cc:	bf38      	it	cc
 80081ce:	461d      	movcc	r5, r3
 80081d0:	0553      	lsls	r3, r2, #21
 80081d2:	d531      	bpl.n	8008238 <__ssputs_r+0xa0>
 80081d4:	4629      	mov	r1, r5
 80081d6:	f7ff fec3 	bl	8007f60 <_malloc_r>
 80081da:	4606      	mov	r6, r0
 80081dc:	b950      	cbnz	r0, 80081f4 <__ssputs_r+0x5c>
 80081de:	230c      	movs	r3, #12
 80081e0:	f8ca 3000 	str.w	r3, [sl]
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f4:	6921      	ldr	r1, [r4, #16]
 80081f6:	464a      	mov	r2, r9
 80081f8:	f000 fad0 	bl	800879c <memcpy>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	6126      	str	r6, [r4, #16]
 800820a:	6165      	str	r5, [r4, #20]
 800820c:	444e      	add	r6, r9
 800820e:	eba5 0509 	sub.w	r5, r5, r9
 8008212:	6026      	str	r6, [r4, #0]
 8008214:	60a5      	str	r5, [r4, #8]
 8008216:	463e      	mov	r6, r7
 8008218:	42be      	cmp	r6, r7
 800821a:	d900      	bls.n	800821e <__ssputs_r+0x86>
 800821c:	463e      	mov	r6, r7
 800821e:	4632      	mov	r2, r6
 8008220:	6820      	ldr	r0, [r4, #0]
 8008222:	4641      	mov	r1, r8
 8008224:	f000 fac8 	bl	80087b8 <memmove>
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	6822      	ldr	r2, [r4, #0]
 800822c:	1b9b      	subs	r3, r3, r6
 800822e:	4432      	add	r2, r6
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	6022      	str	r2, [r4, #0]
 8008234:	2000      	movs	r0, #0
 8008236:	e7db      	b.n	80081f0 <__ssputs_r+0x58>
 8008238:	462a      	mov	r2, r5
 800823a:	f000 fad7 	bl	80087ec <_realloc_r>
 800823e:	4606      	mov	r6, r0
 8008240:	2800      	cmp	r0, #0
 8008242:	d1e1      	bne.n	8008208 <__ssputs_r+0x70>
 8008244:	6921      	ldr	r1, [r4, #16]
 8008246:	4650      	mov	r0, sl
 8008248:	f7ff fe3a 	bl	8007ec0 <_free_r>
 800824c:	e7c7      	b.n	80081de <__ssputs_r+0x46>
	...

08008250 <_svfiprintf_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	4698      	mov	r8, r3
 8008256:	898b      	ldrh	r3, [r1, #12]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	b09d      	sub	sp, #116	; 0x74
 800825c:	4607      	mov	r7, r0
 800825e:	460d      	mov	r5, r1
 8008260:	4614      	mov	r4, r2
 8008262:	d50e      	bpl.n	8008282 <_svfiprintf_r+0x32>
 8008264:	690b      	ldr	r3, [r1, #16]
 8008266:	b963      	cbnz	r3, 8008282 <_svfiprintf_r+0x32>
 8008268:	2140      	movs	r1, #64	; 0x40
 800826a:	f7ff fe79 	bl	8007f60 <_malloc_r>
 800826e:	6028      	str	r0, [r5, #0]
 8008270:	6128      	str	r0, [r5, #16]
 8008272:	b920      	cbnz	r0, 800827e <_svfiprintf_r+0x2e>
 8008274:	230c      	movs	r3, #12
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	e0d1      	b.n	8008422 <_svfiprintf_r+0x1d2>
 800827e:	2340      	movs	r3, #64	; 0x40
 8008280:	616b      	str	r3, [r5, #20]
 8008282:	2300      	movs	r3, #0
 8008284:	9309      	str	r3, [sp, #36]	; 0x24
 8008286:	2320      	movs	r3, #32
 8008288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800828c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008290:	2330      	movs	r3, #48	; 0x30
 8008292:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800843c <_svfiprintf_r+0x1ec>
 8008296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800829a:	f04f 0901 	mov.w	r9, #1
 800829e:	4623      	mov	r3, r4
 80082a0:	469a      	mov	sl, r3
 80082a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a6:	b10a      	cbz	r2, 80082ac <_svfiprintf_r+0x5c>
 80082a8:	2a25      	cmp	r2, #37	; 0x25
 80082aa:	d1f9      	bne.n	80082a0 <_svfiprintf_r+0x50>
 80082ac:	ebba 0b04 	subs.w	fp, sl, r4
 80082b0:	d00b      	beq.n	80082ca <_svfiprintf_r+0x7a>
 80082b2:	465b      	mov	r3, fp
 80082b4:	4622      	mov	r2, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	4638      	mov	r0, r7
 80082ba:	f7ff ff6d 	bl	8008198 <__ssputs_r>
 80082be:	3001      	adds	r0, #1
 80082c0:	f000 80aa 	beq.w	8008418 <_svfiprintf_r+0x1c8>
 80082c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c6:	445a      	add	r2, fp
 80082c8:	9209      	str	r2, [sp, #36]	; 0x24
 80082ca:	f89a 3000 	ldrb.w	r3, [sl]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 80a2 	beq.w	8008418 <_svfiprintf_r+0x1c8>
 80082d4:	2300      	movs	r3, #0
 80082d6:	f04f 32ff 	mov.w	r2, #4294967295
 80082da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082de:	f10a 0a01 	add.w	sl, sl, #1
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	9307      	str	r3, [sp, #28]
 80082e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082ea:	931a      	str	r3, [sp, #104]	; 0x68
 80082ec:	4654      	mov	r4, sl
 80082ee:	2205      	movs	r2, #5
 80082f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f4:	4851      	ldr	r0, [pc, #324]	; (800843c <_svfiprintf_r+0x1ec>)
 80082f6:	f7f7 ff93 	bl	8000220 <memchr>
 80082fa:	9a04      	ldr	r2, [sp, #16]
 80082fc:	b9d8      	cbnz	r0, 8008336 <_svfiprintf_r+0xe6>
 80082fe:	06d0      	lsls	r0, r2, #27
 8008300:	bf44      	itt	mi
 8008302:	2320      	movmi	r3, #32
 8008304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008308:	0711      	lsls	r1, r2, #28
 800830a:	bf44      	itt	mi
 800830c:	232b      	movmi	r3, #43	; 0x2b
 800830e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008312:	f89a 3000 	ldrb.w	r3, [sl]
 8008316:	2b2a      	cmp	r3, #42	; 0x2a
 8008318:	d015      	beq.n	8008346 <_svfiprintf_r+0xf6>
 800831a:	9a07      	ldr	r2, [sp, #28]
 800831c:	4654      	mov	r4, sl
 800831e:	2000      	movs	r0, #0
 8008320:	f04f 0c0a 	mov.w	ip, #10
 8008324:	4621      	mov	r1, r4
 8008326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800832a:	3b30      	subs	r3, #48	; 0x30
 800832c:	2b09      	cmp	r3, #9
 800832e:	d94e      	bls.n	80083ce <_svfiprintf_r+0x17e>
 8008330:	b1b0      	cbz	r0, 8008360 <_svfiprintf_r+0x110>
 8008332:	9207      	str	r2, [sp, #28]
 8008334:	e014      	b.n	8008360 <_svfiprintf_r+0x110>
 8008336:	eba0 0308 	sub.w	r3, r0, r8
 800833a:	fa09 f303 	lsl.w	r3, r9, r3
 800833e:	4313      	orrs	r3, r2
 8008340:	9304      	str	r3, [sp, #16]
 8008342:	46a2      	mov	sl, r4
 8008344:	e7d2      	b.n	80082ec <_svfiprintf_r+0x9c>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	1d19      	adds	r1, r3, #4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	9103      	str	r1, [sp, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfbb      	ittet	lt
 8008352:	425b      	neglt	r3, r3
 8008354:	f042 0202 	orrlt.w	r2, r2, #2
 8008358:	9307      	strge	r3, [sp, #28]
 800835a:	9307      	strlt	r3, [sp, #28]
 800835c:	bfb8      	it	lt
 800835e:	9204      	strlt	r2, [sp, #16]
 8008360:	7823      	ldrb	r3, [r4, #0]
 8008362:	2b2e      	cmp	r3, #46	; 0x2e
 8008364:	d10c      	bne.n	8008380 <_svfiprintf_r+0x130>
 8008366:	7863      	ldrb	r3, [r4, #1]
 8008368:	2b2a      	cmp	r3, #42	; 0x2a
 800836a:	d135      	bne.n	80083d8 <_svfiprintf_r+0x188>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	1d1a      	adds	r2, r3, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	9203      	str	r2, [sp, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfb8      	it	lt
 8008378:	f04f 33ff 	movlt.w	r3, #4294967295
 800837c:	3402      	adds	r4, #2
 800837e:	9305      	str	r3, [sp, #20]
 8008380:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800844c <_svfiprintf_r+0x1fc>
 8008384:	7821      	ldrb	r1, [r4, #0]
 8008386:	2203      	movs	r2, #3
 8008388:	4650      	mov	r0, sl
 800838a:	f7f7 ff49 	bl	8000220 <memchr>
 800838e:	b140      	cbz	r0, 80083a2 <_svfiprintf_r+0x152>
 8008390:	2340      	movs	r3, #64	; 0x40
 8008392:	eba0 000a 	sub.w	r0, r0, sl
 8008396:	fa03 f000 	lsl.w	r0, r3, r0
 800839a:	9b04      	ldr	r3, [sp, #16]
 800839c:	4303      	orrs	r3, r0
 800839e:	3401      	adds	r4, #1
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a6:	4826      	ldr	r0, [pc, #152]	; (8008440 <_svfiprintf_r+0x1f0>)
 80083a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ac:	2206      	movs	r2, #6
 80083ae:	f7f7 ff37 	bl	8000220 <memchr>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d038      	beq.n	8008428 <_svfiprintf_r+0x1d8>
 80083b6:	4b23      	ldr	r3, [pc, #140]	; (8008444 <_svfiprintf_r+0x1f4>)
 80083b8:	bb1b      	cbnz	r3, 8008402 <_svfiprintf_r+0x1b2>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	3307      	adds	r3, #7
 80083be:	f023 0307 	bic.w	r3, r3, #7
 80083c2:	3308      	adds	r3, #8
 80083c4:	9303      	str	r3, [sp, #12]
 80083c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c8:	4433      	add	r3, r6
 80083ca:	9309      	str	r3, [sp, #36]	; 0x24
 80083cc:	e767      	b.n	800829e <_svfiprintf_r+0x4e>
 80083ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80083d2:	460c      	mov	r4, r1
 80083d4:	2001      	movs	r0, #1
 80083d6:	e7a5      	b.n	8008324 <_svfiprintf_r+0xd4>
 80083d8:	2300      	movs	r3, #0
 80083da:	3401      	adds	r4, #1
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	4619      	mov	r1, r3
 80083e0:	f04f 0c0a 	mov.w	ip, #10
 80083e4:	4620      	mov	r0, r4
 80083e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ea:	3a30      	subs	r2, #48	; 0x30
 80083ec:	2a09      	cmp	r2, #9
 80083ee:	d903      	bls.n	80083f8 <_svfiprintf_r+0x1a8>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0c5      	beq.n	8008380 <_svfiprintf_r+0x130>
 80083f4:	9105      	str	r1, [sp, #20]
 80083f6:	e7c3      	b.n	8008380 <_svfiprintf_r+0x130>
 80083f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80083fc:	4604      	mov	r4, r0
 80083fe:	2301      	movs	r3, #1
 8008400:	e7f0      	b.n	80083e4 <_svfiprintf_r+0x194>
 8008402:	ab03      	add	r3, sp, #12
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	462a      	mov	r2, r5
 8008408:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <_svfiprintf_r+0x1f8>)
 800840a:	a904      	add	r1, sp, #16
 800840c:	4638      	mov	r0, r7
 800840e:	f3af 8000 	nop.w
 8008412:	1c42      	adds	r2, r0, #1
 8008414:	4606      	mov	r6, r0
 8008416:	d1d6      	bne.n	80083c6 <_svfiprintf_r+0x176>
 8008418:	89ab      	ldrh	r3, [r5, #12]
 800841a:	065b      	lsls	r3, r3, #25
 800841c:	f53f af2c 	bmi.w	8008278 <_svfiprintf_r+0x28>
 8008420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008422:	b01d      	add	sp, #116	; 0x74
 8008424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008428:	ab03      	add	r3, sp, #12
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	462a      	mov	r2, r5
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <_svfiprintf_r+0x1f8>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	4638      	mov	r0, r7
 8008434:	f000 f87a 	bl	800852c <_printf_i>
 8008438:	e7eb      	b.n	8008412 <_svfiprintf_r+0x1c2>
 800843a:	bf00      	nop
 800843c:	08008e24 	.word	0x08008e24
 8008440:	08008e2e 	.word	0x08008e2e
 8008444:	00000000 	.word	0x00000000
 8008448:	08008199 	.word	0x08008199
 800844c:	08008e2a 	.word	0x08008e2a

08008450 <_printf_common>:
 8008450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008454:	4616      	mov	r6, r2
 8008456:	4699      	mov	r9, r3
 8008458:	688a      	ldr	r2, [r1, #8]
 800845a:	690b      	ldr	r3, [r1, #16]
 800845c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008460:	4293      	cmp	r3, r2
 8008462:	bfb8      	it	lt
 8008464:	4613      	movlt	r3, r2
 8008466:	6033      	str	r3, [r6, #0]
 8008468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800846c:	4607      	mov	r7, r0
 800846e:	460c      	mov	r4, r1
 8008470:	b10a      	cbz	r2, 8008476 <_printf_common+0x26>
 8008472:	3301      	adds	r3, #1
 8008474:	6033      	str	r3, [r6, #0]
 8008476:	6823      	ldr	r3, [r4, #0]
 8008478:	0699      	lsls	r1, r3, #26
 800847a:	bf42      	ittt	mi
 800847c:	6833      	ldrmi	r3, [r6, #0]
 800847e:	3302      	addmi	r3, #2
 8008480:	6033      	strmi	r3, [r6, #0]
 8008482:	6825      	ldr	r5, [r4, #0]
 8008484:	f015 0506 	ands.w	r5, r5, #6
 8008488:	d106      	bne.n	8008498 <_printf_common+0x48>
 800848a:	f104 0a19 	add.w	sl, r4, #25
 800848e:	68e3      	ldr	r3, [r4, #12]
 8008490:	6832      	ldr	r2, [r6, #0]
 8008492:	1a9b      	subs	r3, r3, r2
 8008494:	42ab      	cmp	r3, r5
 8008496:	dc26      	bgt.n	80084e6 <_printf_common+0x96>
 8008498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800849c:	1e13      	subs	r3, r2, #0
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	bf18      	it	ne
 80084a2:	2301      	movne	r3, #1
 80084a4:	0692      	lsls	r2, r2, #26
 80084a6:	d42b      	bmi.n	8008500 <_printf_common+0xb0>
 80084a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ac:	4649      	mov	r1, r9
 80084ae:	4638      	mov	r0, r7
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d01e      	beq.n	80084f4 <_printf_common+0xa4>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	68e5      	ldr	r5, [r4, #12]
 80084ba:	6832      	ldr	r2, [r6, #0]
 80084bc:	f003 0306 	and.w	r3, r3, #6
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	bf08      	it	eq
 80084c4:	1aad      	subeq	r5, r5, r2
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	6922      	ldr	r2, [r4, #16]
 80084ca:	bf0c      	ite	eq
 80084cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084d0:	2500      	movne	r5, #0
 80084d2:	4293      	cmp	r3, r2
 80084d4:	bfc4      	itt	gt
 80084d6:	1a9b      	subgt	r3, r3, r2
 80084d8:	18ed      	addgt	r5, r5, r3
 80084da:	2600      	movs	r6, #0
 80084dc:	341a      	adds	r4, #26
 80084de:	42b5      	cmp	r5, r6
 80084e0:	d11a      	bne.n	8008518 <_printf_common+0xc8>
 80084e2:	2000      	movs	r0, #0
 80084e4:	e008      	b.n	80084f8 <_printf_common+0xa8>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4652      	mov	r2, sl
 80084ea:	4649      	mov	r1, r9
 80084ec:	4638      	mov	r0, r7
 80084ee:	47c0      	blx	r8
 80084f0:	3001      	adds	r0, #1
 80084f2:	d103      	bne.n	80084fc <_printf_common+0xac>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084fc:	3501      	adds	r5, #1
 80084fe:	e7c6      	b.n	800848e <_printf_common+0x3e>
 8008500:	18e1      	adds	r1, r4, r3
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	2030      	movs	r0, #48	; 0x30
 8008506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800850a:	4422      	add	r2, r4
 800850c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008514:	3302      	adds	r3, #2
 8008516:	e7c7      	b.n	80084a8 <_printf_common+0x58>
 8008518:	2301      	movs	r3, #1
 800851a:	4622      	mov	r2, r4
 800851c:	4649      	mov	r1, r9
 800851e:	4638      	mov	r0, r7
 8008520:	47c0      	blx	r8
 8008522:	3001      	adds	r0, #1
 8008524:	d0e6      	beq.n	80084f4 <_printf_common+0xa4>
 8008526:	3601      	adds	r6, #1
 8008528:	e7d9      	b.n	80084de <_printf_common+0x8e>
	...

0800852c <_printf_i>:
 800852c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008530:	460c      	mov	r4, r1
 8008532:	4691      	mov	r9, r2
 8008534:	7e27      	ldrb	r7, [r4, #24]
 8008536:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008538:	2f78      	cmp	r7, #120	; 0x78
 800853a:	4680      	mov	r8, r0
 800853c:	469a      	mov	sl, r3
 800853e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008542:	d807      	bhi.n	8008554 <_printf_i+0x28>
 8008544:	2f62      	cmp	r7, #98	; 0x62
 8008546:	d80a      	bhi.n	800855e <_printf_i+0x32>
 8008548:	2f00      	cmp	r7, #0
 800854a:	f000 80d8 	beq.w	80086fe <_printf_i+0x1d2>
 800854e:	2f58      	cmp	r7, #88	; 0x58
 8008550:	f000 80a3 	beq.w	800869a <_printf_i+0x16e>
 8008554:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800855c:	e03a      	b.n	80085d4 <_printf_i+0xa8>
 800855e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008562:	2b15      	cmp	r3, #21
 8008564:	d8f6      	bhi.n	8008554 <_printf_i+0x28>
 8008566:	a001      	add	r0, pc, #4	; (adr r0, 800856c <_printf_i+0x40>)
 8008568:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800856c:	080085c5 	.word	0x080085c5
 8008570:	080085d9 	.word	0x080085d9
 8008574:	08008555 	.word	0x08008555
 8008578:	08008555 	.word	0x08008555
 800857c:	08008555 	.word	0x08008555
 8008580:	08008555 	.word	0x08008555
 8008584:	080085d9 	.word	0x080085d9
 8008588:	08008555 	.word	0x08008555
 800858c:	08008555 	.word	0x08008555
 8008590:	08008555 	.word	0x08008555
 8008594:	08008555 	.word	0x08008555
 8008598:	080086e5 	.word	0x080086e5
 800859c:	08008609 	.word	0x08008609
 80085a0:	080086c7 	.word	0x080086c7
 80085a4:	08008555 	.word	0x08008555
 80085a8:	08008555 	.word	0x08008555
 80085ac:	08008707 	.word	0x08008707
 80085b0:	08008555 	.word	0x08008555
 80085b4:	08008609 	.word	0x08008609
 80085b8:	08008555 	.word	0x08008555
 80085bc:	08008555 	.word	0x08008555
 80085c0:	080086cf 	.word	0x080086cf
 80085c4:	680b      	ldr	r3, [r1, #0]
 80085c6:	1d1a      	adds	r2, r3, #4
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	600a      	str	r2, [r1, #0]
 80085cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085d4:	2301      	movs	r3, #1
 80085d6:	e0a3      	b.n	8008720 <_printf_i+0x1f4>
 80085d8:	6825      	ldr	r5, [r4, #0]
 80085da:	6808      	ldr	r0, [r1, #0]
 80085dc:	062e      	lsls	r6, r5, #24
 80085de:	f100 0304 	add.w	r3, r0, #4
 80085e2:	d50a      	bpl.n	80085fa <_printf_i+0xce>
 80085e4:	6805      	ldr	r5, [r0, #0]
 80085e6:	600b      	str	r3, [r1, #0]
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	da03      	bge.n	80085f4 <_printf_i+0xc8>
 80085ec:	232d      	movs	r3, #45	; 0x2d
 80085ee:	426d      	negs	r5, r5
 80085f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f4:	485e      	ldr	r0, [pc, #376]	; (8008770 <_printf_i+0x244>)
 80085f6:	230a      	movs	r3, #10
 80085f8:	e019      	b.n	800862e <_printf_i+0x102>
 80085fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085fe:	6805      	ldr	r5, [r0, #0]
 8008600:	600b      	str	r3, [r1, #0]
 8008602:	bf18      	it	ne
 8008604:	b22d      	sxthne	r5, r5
 8008606:	e7ef      	b.n	80085e8 <_printf_i+0xbc>
 8008608:	680b      	ldr	r3, [r1, #0]
 800860a:	6825      	ldr	r5, [r4, #0]
 800860c:	1d18      	adds	r0, r3, #4
 800860e:	6008      	str	r0, [r1, #0]
 8008610:	0628      	lsls	r0, r5, #24
 8008612:	d501      	bpl.n	8008618 <_printf_i+0xec>
 8008614:	681d      	ldr	r5, [r3, #0]
 8008616:	e002      	b.n	800861e <_printf_i+0xf2>
 8008618:	0669      	lsls	r1, r5, #25
 800861a:	d5fb      	bpl.n	8008614 <_printf_i+0xe8>
 800861c:	881d      	ldrh	r5, [r3, #0]
 800861e:	4854      	ldr	r0, [pc, #336]	; (8008770 <_printf_i+0x244>)
 8008620:	2f6f      	cmp	r7, #111	; 0x6f
 8008622:	bf0c      	ite	eq
 8008624:	2308      	moveq	r3, #8
 8008626:	230a      	movne	r3, #10
 8008628:	2100      	movs	r1, #0
 800862a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800862e:	6866      	ldr	r6, [r4, #4]
 8008630:	60a6      	str	r6, [r4, #8]
 8008632:	2e00      	cmp	r6, #0
 8008634:	bfa2      	ittt	ge
 8008636:	6821      	ldrge	r1, [r4, #0]
 8008638:	f021 0104 	bicge.w	r1, r1, #4
 800863c:	6021      	strge	r1, [r4, #0]
 800863e:	b90d      	cbnz	r5, 8008644 <_printf_i+0x118>
 8008640:	2e00      	cmp	r6, #0
 8008642:	d04d      	beq.n	80086e0 <_printf_i+0x1b4>
 8008644:	4616      	mov	r6, r2
 8008646:	fbb5 f1f3 	udiv	r1, r5, r3
 800864a:	fb03 5711 	mls	r7, r3, r1, r5
 800864e:	5dc7      	ldrb	r7, [r0, r7]
 8008650:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008654:	462f      	mov	r7, r5
 8008656:	42bb      	cmp	r3, r7
 8008658:	460d      	mov	r5, r1
 800865a:	d9f4      	bls.n	8008646 <_printf_i+0x11a>
 800865c:	2b08      	cmp	r3, #8
 800865e:	d10b      	bne.n	8008678 <_printf_i+0x14c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	07df      	lsls	r7, r3, #31
 8008664:	d508      	bpl.n	8008678 <_printf_i+0x14c>
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	6861      	ldr	r1, [r4, #4]
 800866a:	4299      	cmp	r1, r3
 800866c:	bfde      	ittt	le
 800866e:	2330      	movle	r3, #48	; 0x30
 8008670:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008674:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008678:	1b92      	subs	r2, r2, r6
 800867a:	6122      	str	r2, [r4, #16]
 800867c:	f8cd a000 	str.w	sl, [sp]
 8008680:	464b      	mov	r3, r9
 8008682:	aa03      	add	r2, sp, #12
 8008684:	4621      	mov	r1, r4
 8008686:	4640      	mov	r0, r8
 8008688:	f7ff fee2 	bl	8008450 <_printf_common>
 800868c:	3001      	adds	r0, #1
 800868e:	d14c      	bne.n	800872a <_printf_i+0x1fe>
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	b004      	add	sp, #16
 8008696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869a:	4835      	ldr	r0, [pc, #212]	; (8008770 <_printf_i+0x244>)
 800869c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	680e      	ldr	r6, [r1, #0]
 80086a4:	061f      	lsls	r7, r3, #24
 80086a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80086aa:	600e      	str	r6, [r1, #0]
 80086ac:	d514      	bpl.n	80086d8 <_printf_i+0x1ac>
 80086ae:	07d9      	lsls	r1, r3, #31
 80086b0:	bf44      	itt	mi
 80086b2:	f043 0320 	orrmi.w	r3, r3, #32
 80086b6:	6023      	strmi	r3, [r4, #0]
 80086b8:	b91d      	cbnz	r5, 80086c2 <_printf_i+0x196>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f023 0320 	bic.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	2310      	movs	r3, #16
 80086c4:	e7b0      	b.n	8008628 <_printf_i+0xfc>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	f043 0320 	orr.w	r3, r3, #32
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	2378      	movs	r3, #120	; 0x78
 80086d0:	4828      	ldr	r0, [pc, #160]	; (8008774 <_printf_i+0x248>)
 80086d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086d6:	e7e3      	b.n	80086a0 <_printf_i+0x174>
 80086d8:	065e      	lsls	r6, r3, #25
 80086da:	bf48      	it	mi
 80086dc:	b2ad      	uxthmi	r5, r5
 80086de:	e7e6      	b.n	80086ae <_printf_i+0x182>
 80086e0:	4616      	mov	r6, r2
 80086e2:	e7bb      	b.n	800865c <_printf_i+0x130>
 80086e4:	680b      	ldr	r3, [r1, #0]
 80086e6:	6826      	ldr	r6, [r4, #0]
 80086e8:	6960      	ldr	r0, [r4, #20]
 80086ea:	1d1d      	adds	r5, r3, #4
 80086ec:	600d      	str	r5, [r1, #0]
 80086ee:	0635      	lsls	r5, r6, #24
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	d501      	bpl.n	80086f8 <_printf_i+0x1cc>
 80086f4:	6018      	str	r0, [r3, #0]
 80086f6:	e002      	b.n	80086fe <_printf_i+0x1d2>
 80086f8:	0671      	lsls	r1, r6, #25
 80086fa:	d5fb      	bpl.n	80086f4 <_printf_i+0x1c8>
 80086fc:	8018      	strh	r0, [r3, #0]
 80086fe:	2300      	movs	r3, #0
 8008700:	6123      	str	r3, [r4, #16]
 8008702:	4616      	mov	r6, r2
 8008704:	e7ba      	b.n	800867c <_printf_i+0x150>
 8008706:	680b      	ldr	r3, [r1, #0]
 8008708:	1d1a      	adds	r2, r3, #4
 800870a:	600a      	str	r2, [r1, #0]
 800870c:	681e      	ldr	r6, [r3, #0]
 800870e:	6862      	ldr	r2, [r4, #4]
 8008710:	2100      	movs	r1, #0
 8008712:	4630      	mov	r0, r6
 8008714:	f7f7 fd84 	bl	8000220 <memchr>
 8008718:	b108      	cbz	r0, 800871e <_printf_i+0x1f2>
 800871a:	1b80      	subs	r0, r0, r6
 800871c:	6060      	str	r0, [r4, #4]
 800871e:	6863      	ldr	r3, [r4, #4]
 8008720:	6123      	str	r3, [r4, #16]
 8008722:	2300      	movs	r3, #0
 8008724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008728:	e7a8      	b.n	800867c <_printf_i+0x150>
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	4632      	mov	r2, r6
 800872e:	4649      	mov	r1, r9
 8008730:	4640      	mov	r0, r8
 8008732:	47d0      	blx	sl
 8008734:	3001      	adds	r0, #1
 8008736:	d0ab      	beq.n	8008690 <_printf_i+0x164>
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	079b      	lsls	r3, r3, #30
 800873c:	d413      	bmi.n	8008766 <_printf_i+0x23a>
 800873e:	68e0      	ldr	r0, [r4, #12]
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	4298      	cmp	r0, r3
 8008744:	bfb8      	it	lt
 8008746:	4618      	movlt	r0, r3
 8008748:	e7a4      	b.n	8008694 <_printf_i+0x168>
 800874a:	2301      	movs	r3, #1
 800874c:	4632      	mov	r2, r6
 800874e:	4649      	mov	r1, r9
 8008750:	4640      	mov	r0, r8
 8008752:	47d0      	blx	sl
 8008754:	3001      	adds	r0, #1
 8008756:	d09b      	beq.n	8008690 <_printf_i+0x164>
 8008758:	3501      	adds	r5, #1
 800875a:	68e3      	ldr	r3, [r4, #12]
 800875c:	9903      	ldr	r1, [sp, #12]
 800875e:	1a5b      	subs	r3, r3, r1
 8008760:	42ab      	cmp	r3, r5
 8008762:	dcf2      	bgt.n	800874a <_printf_i+0x21e>
 8008764:	e7eb      	b.n	800873e <_printf_i+0x212>
 8008766:	2500      	movs	r5, #0
 8008768:	f104 0619 	add.w	r6, r4, #25
 800876c:	e7f5      	b.n	800875a <_printf_i+0x22e>
 800876e:	bf00      	nop
 8008770:	08008e35 	.word	0x08008e35
 8008774:	08008e46 	.word	0x08008e46

08008778 <_read_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	; (8008798 <_read_r+0x20>)
 800877c:	4604      	mov	r4, r0
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	2200      	movs	r2, #0
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7f9 fa7c 	bl	8001c84 <_read>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_read_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_read_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20004c8c 	.word	0x20004c8c

0800879c <memcpy>:
 800879c:	440a      	add	r2, r1
 800879e:	4291      	cmp	r1, r2
 80087a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087a4:	d100      	bne.n	80087a8 <memcpy+0xc>
 80087a6:	4770      	bx	lr
 80087a8:	b510      	push	{r4, lr}
 80087aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087b2:	4291      	cmp	r1, r2
 80087b4:	d1f9      	bne.n	80087aa <memcpy+0xe>
 80087b6:	bd10      	pop	{r4, pc}

080087b8 <memmove>:
 80087b8:	4288      	cmp	r0, r1
 80087ba:	b510      	push	{r4, lr}
 80087bc:	eb01 0402 	add.w	r4, r1, r2
 80087c0:	d902      	bls.n	80087c8 <memmove+0x10>
 80087c2:	4284      	cmp	r4, r0
 80087c4:	4623      	mov	r3, r4
 80087c6:	d807      	bhi.n	80087d8 <memmove+0x20>
 80087c8:	1e43      	subs	r3, r0, #1
 80087ca:	42a1      	cmp	r1, r4
 80087cc:	d008      	beq.n	80087e0 <memmove+0x28>
 80087ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087d6:	e7f8      	b.n	80087ca <memmove+0x12>
 80087d8:	4402      	add	r2, r0
 80087da:	4601      	mov	r1, r0
 80087dc:	428a      	cmp	r2, r1
 80087de:	d100      	bne.n	80087e2 <memmove+0x2a>
 80087e0:	bd10      	pop	{r4, pc}
 80087e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087ea:	e7f7      	b.n	80087dc <memmove+0x24>

080087ec <_realloc_r>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	4607      	mov	r7, r0
 80087f0:	4614      	mov	r4, r2
 80087f2:	460e      	mov	r6, r1
 80087f4:	b921      	cbnz	r1, 8008800 <_realloc_r+0x14>
 80087f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087fa:	4611      	mov	r1, r2
 80087fc:	f7ff bbb0 	b.w	8007f60 <_malloc_r>
 8008800:	b922      	cbnz	r2, 800880c <_realloc_r+0x20>
 8008802:	f7ff fb5d 	bl	8007ec0 <_free_r>
 8008806:	4625      	mov	r5, r4
 8008808:	4628      	mov	r0, r5
 800880a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800880c:	f000 f814 	bl	8008838 <_malloc_usable_size_r>
 8008810:	42a0      	cmp	r0, r4
 8008812:	d20f      	bcs.n	8008834 <_realloc_r+0x48>
 8008814:	4621      	mov	r1, r4
 8008816:	4638      	mov	r0, r7
 8008818:	f7ff fba2 	bl	8007f60 <_malloc_r>
 800881c:	4605      	mov	r5, r0
 800881e:	2800      	cmp	r0, #0
 8008820:	d0f2      	beq.n	8008808 <_realloc_r+0x1c>
 8008822:	4631      	mov	r1, r6
 8008824:	4622      	mov	r2, r4
 8008826:	f7ff ffb9 	bl	800879c <memcpy>
 800882a:	4631      	mov	r1, r6
 800882c:	4638      	mov	r0, r7
 800882e:	f7ff fb47 	bl	8007ec0 <_free_r>
 8008832:	e7e9      	b.n	8008808 <_realloc_r+0x1c>
 8008834:	4635      	mov	r5, r6
 8008836:	e7e7      	b.n	8008808 <_realloc_r+0x1c>

08008838 <_malloc_usable_size_r>:
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f18      	subs	r0, r3, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfbc      	itt	lt
 8008842:	580b      	ldrlt	r3, [r1, r0]
 8008844:	18c0      	addlt	r0, r0, r3
 8008846:	4770      	bx	lr

08008848 <_init>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr

08008854 <_fini>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	bf00      	nop
 8008858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885a:	bc08      	pop	{r3}
 800885c:	469e      	mov	lr, r3
 800885e:	4770      	bx	lr
